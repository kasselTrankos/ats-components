{"version":3,"sources":["AnimatedValueXY.js"],"names":["AnimatedValue","require","AnimatedWithChildren","invariant","_uniqueId","AnimatedValueXY","valueIn","x","y","_listeners","value","setValue","offset","setOffset","flattenOffset","extractOffset","__getValue","callback","resetAnimation","stopAnimation","id","String","jointCallback","number","addListener","removeListener","removeAllListeners","left","top","translateX","translateY","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('./AnimatedValue');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\n\nconst invariant = require('invariant');\n\ntype ValueXYListenerCallback = (value: {x: number, y: number}) => mixed;\n\nlet _uniqueId = 1;\n\n/**\n * 2D Value for driving 2D animations, such as pan gestures. Almost identical\n * API to normal `Animated.Value`, but multiplexed.\n *\n * See http://facebook.github.io/react-native/docs/animatedvaluexy.html\n */\nclass AnimatedValueXY extends AnimatedWithChildren {\n  x: AnimatedValue;\n  y: AnimatedValue;\n  _listeners: {[key: string]: {x: string, y: string}};\n\n  constructor(\n    valueIn?: ?{+x: number | AnimatedValue, +y: number | AnimatedValue},\n  ) {\n    super();\n    const value: any = valueIn || {x: 0, y: 0}; // @flowfixme: shouldn't need `: any`\n    if (typeof value.x === 'number' && typeof value.y === 'number') {\n      this.x = new AnimatedValue(value.x);\n      this.y = new AnimatedValue(value.y);\n    } else {\n      invariant(\n        value.x instanceof AnimatedValue && value.y instanceof AnimatedValue,\n        'AnimatedValueXY must be initialized with an object of numbers or ' +\n          'AnimatedValues.',\n      );\n      this.x = value.x;\n      this.y = value.y;\n    }\n    this._listeners = {};\n  }\n\n  /**\n   * Directly set the value. This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setvalue\n   */\n  setValue(value: {x: number, y: number}) {\n    this.x.setValue(value.x);\n    this.y.setValue(value.y);\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether\n   * via `setValue`, an animation, or `Animated.event`. Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#setoffset\n   */\n  setOffset(offset: {x: number, y: number}) {\n    this.x.setOffset(offset.x);\n    this.y.setOffset(offset.y);\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this.x.flattenOffset();\n    this.y.flattenOffset();\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to\n   * zero. The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#extractoffset\n   */\n  extractOffset(): void {\n    this.x.extractOffset();\n    this.y.extractOffset();\n  }\n\n  __getValue(): {x: number, y: number} {\n    return {\n      x: this.x.__getValue(),\n      y: this.y.__getValue(),\n    };\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#resetanimation\n   */\n  resetAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.resetAnimation();\n    this.y.resetAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#stopanimation\n   */\n  stopAnimation(callback?: (value: {x: number, y: number}) => void): void {\n    this.x.stopAnimation();\n    this.y.stopAnimation();\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to synchronously read\n   * the value because it might be driven natively.\n   *\n   * Returns a string that serves as an identifier for the listener.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#addlistener\n   */\n  addListener(callback: ValueXYListenerCallback): string {\n    const id = String(_uniqueId++);\n    const jointCallback = ({value: number}) => {\n      callback(this.__getValue());\n    };\n    this._listeners[id] = {\n      x: this.x.addListener(jointCallback),\n      y: this.y.addListener(jointCallback),\n    };\n    return id;\n  }\n\n  /**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removelistener\n   */\n  removeListener(id: string): void {\n    this.x.removeListener(this._listeners[id].x);\n    this.y.removeListener(this._listeners[id].y);\n    delete this._listeners[id];\n  }\n\n  /**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#removealllisteners\n   */\n  removeAllListeners(): void {\n    this.x.removeAllListeners();\n    this.y.removeAllListeners();\n    this._listeners = {};\n  }\n\n  /**\n   * Converts `{x, y}` into `{left, top}` for use in style.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#getlayout\n   */\n  getLayout(): {[key: string]: AnimatedValue} {\n    return {\n      left: this.x,\n      top: this.y,\n    };\n  }\n\n  /**\n   * Converts `{x, y}` into a useable translation transform.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvaluexy.html#gettranslatetransform\n   */\n  getTranslateTransform(): Array<{[key: string]: AnimatedValue}> {\n    return [{translateX: this.x}, {translateY: this.y}];\n  }\n}\n\nmodule.exports = AnimatedValueXY;\n"]}