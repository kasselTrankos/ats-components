aa2d41e6c4a158d3261cef63ab8e653f
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var AnimatedValue = require('./AnimatedValue');

var AnimatedWithChildren = require('./AnimatedWithChildren');

var invariant = require('invariant');

var _uniqueId = 1;

var AnimatedValueXY = function (_AnimatedWithChildren) {
  (0, _inherits2["default"])(AnimatedValueXY, _AnimatedWithChildren);

  function AnimatedValueXY(valueIn) {
    var _this;

    (0, _classCallCheck2["default"])(this, AnimatedValueXY);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(AnimatedValueXY).call(this));
    _this.x = void 0;
    _this.y = void 0;
    _this._listeners = void 0;
    var value = valueIn || {
      x: 0,
      y: 0
    };

    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this.x = new AnimatedValue(value.x);
      _this.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
      _this.x = value.x;
      _this.y = value.y;
    }

    _this._listeners = {};
    return _this;
  }

  (0, _createClass2["default"])(AnimatedValueXY, [{
    key: "setValue",
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: "extractOffset",
    value: function extractOffset() {
      this.x.extractOffset();
      this.y.extractOffset();
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: "resetAnimation",
    value: function resetAnimation(callback) {
      this.x.resetAnimation();
      this.y.resetAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var _this2 = this;

      var id = String(_uniqueId++);

      var jointCallback = function jointCallback(_ref) {
        var number = _ref.value;
        callback(_this2.__getValue());
      };

      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: "getLayout",
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: "getTranslateTransform",
    value: function getTranslateTransform() {
      return [{
        translateX: this.x
      }, {
        translateY: this.y
      }];
    }
  }]);
  return AnimatedValueXY;
}(AnimatedWithChildren);

module.exports = AnimatedValueXY;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,