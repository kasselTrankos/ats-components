09f0afcfb0efc2958d5ff4fafc88f0f6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedColorPropType = require('../../DeprecatedPropTypes/DeprecatedColorPropType');

var DeprecatedViewPropTypes = require('../../DeprecatedPropTypes/DeprecatedViewPropTypes');

var NativeMethodsMixin = require('../../Renderer/shims/NativeMethodsMixin');

var Platform = require('../../Utilities/Platform');

var PropTypes = require('prop-types');

var React = require('react');

var ReactNativeViewAttributes = require('../View/ReactNativeViewAttributes');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var Touchable = require('./Touchable');

var TouchableWithoutFeedback = require('./TouchableWithoutFeedback');

var View = require('../View/View');

var createReactClass = require('create-react-class');

var ensurePositiveDelayProps = require('./ensurePositiveDelayProps');

var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  delayPressOut: 100,
  underlayColor: 'black'
};
var PRESS_RETENTION_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};
var TouchableHighlight = createReactClass({
  displayName: 'TouchableHighlight',
  propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,
    underlayColor: DeprecatedColorPropType,
    style: DeprecatedViewPropTypes.style,
    onShowUnderlay: PropTypes.func,
    onHideUnderlay: PropTypes.func,
    hasTVPreferredFocus: PropTypes.bool,
    nextFocusDown: PropTypes.number,
    nextFocusForward: PropTypes.number,
    nextFocusLeft: PropTypes.number,
    nextFocusRight: PropTypes.number,
    nextFocusUp: PropTypes.number,
    tvParallaxProperties: PropTypes.object,
    testOnly_pressed: PropTypes.bool
  }),
  mixins: [NativeMethodsMixin, Touchable.Mixin.withoutDefaultFocusAndBlur],
  getDefaultProps: function getDefaultProps() {
    return DEFAULT_PROPS;
  },
  getInitialState: function getInitialState() {
    this._isMounted = false;

    if (this.props.testOnly_pressed) {
      return _objectSpread({}, this.touchableGetInitialState(), {
        extraChildStyle: {
          opacity: this.props.activeOpacity
        },
        extraUnderlayStyle: {
          backgroundColor: this.props.underlayColor
        }
      });
    } else {
      return _objectSpread({}, this.touchableGetInitialState(), {
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
    }
  },
  componentDidMount: function componentDidMount() {
    this._isMounted = true;
    ensurePositiveDelayProps(this.props);
  },
  componentWillUnmount: function componentWillUnmount() {
    this._isMounted = false;
    clearTimeout(this._hideTimeout);
  },
  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },
  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },
  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = null;

    this._showUnderlay();

    this.props.onPressIn && this.props.onPressIn(e);
  },
  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }

    this.props.onPressOut && this.props.onPressOut(e);
  },
  touchableHandleFocus: function touchableHandleFocus(e) {
    if (Platform.isTV) {
      this._showUnderlay();
    }

    this.props.onFocus && this.props.onFocus(e);
  },
  touchableHandleBlur: function touchableHandleBlur(e) {
    if (Platform.isTV) {
      this._hideUnderlay();
    }

    this.props.onBlur && this.props.onBlur(e);
  },
  touchableHandlePress: function touchableHandlePress(e) {
    clearTimeout(this._hideTimeout);

    if (!Platform.isTV) {
      this._showUnderlay();

      this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut);
    }

    this.props.onPress && this.props.onPress(e);
  },
  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },
  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },
  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },
  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },
  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },
  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },
  _showUnderlay: function _showUnderlay() {
    if (!this._isMounted || !this._hasPressHandler()) {
      return;
    }

    this.setState({
      extraChildStyle: {
        opacity: this.props.activeOpacity
      },
      extraUnderlayStyle: {
        backgroundColor: this.props.underlayColor
      }
    });
    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },
  _hideUnderlay: function _hideUnderlay() {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = null;

    if (this.props.testOnly_pressed) {
      return;
    }

    if (this._hasPressHandler()) {
      this.setState({
        extraChildStyle: null,
        extraUnderlayStyle: null
      });
      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },
  _hasPressHandler: function _hasPressHandler() {
    return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
  },
  render: function render() {
    var child = React.Children.only(this.props.children);
    return React.createElement(View, {
      accessible: this.props.accessible !== false,
      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityHint: this.props.accessibilityHint,
      accessibilityRole: this.props.accessibilityRole,
      accessibilityStates: this.props.accessibilityStates,
      accessibilityState: this.props.accessibilityState,
      accessibilityActions: this.props.accessibilityActions,
      onAccessibilityAction: this.props.onAccessibilityAction,
      style: StyleSheet.compose(this.props.style, this.state.extraUnderlayStyle),
      onLayout: this.props.onLayout,
      hitSlop: this.props.hitSlop,
      isTVSelectable: true,
      tvParallaxProperties: this.props.tvParallaxProperties,
      hasTVPreferredFocus: this.props.hasTVPreferredFocus,
      nextFocusDown: this.props.nextFocusDown,
      nextFocusForward: this.props.nextFocusForward,
      nextFocusLeft: this.props.nextFocusLeft,
      nextFocusRight: this.props.nextFocusRight,
      nextFocusUp: this.props.nextFocusUp,
      focusable: this.props.focusable !== false && this.props.onPress !== undefined,
      onClick: this.touchableHandlePress,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      nativeID: this.props.nativeID,
      testID: this.props.testID
    }, React.cloneElement(child, {
      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)
    }), Touchable.renderDebugView({
      color: 'green',
      hitSlop: this.props.hitSlop
    }));
  }
});
module.exports = TouchableHighlight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,