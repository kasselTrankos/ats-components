f5fb8f6071ba50729bfbe5e5618f470a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeShape = exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _propTypes = require("prop-types");

var _resolveIncludes = _interopRequireDefault(require("./resolveIncludes"));

var _mergeComponentAndThemeStyles = _interopRequireDefault(require("./mergeComponentAndThemeStyles"));

var _normalizeStyle = _interopRequireDefault(require("./StyleNormalizer/normalizeStyle"));

var THEME_STYLE = "@@shoutem.theme/themeStyle";
var THEME_STYLE_CACHE = "@@shoutem.theme/themeCachedStyle";
var defaultTheme;

var resolveStyle = function resolveStyle(style, baseStyle) {
  return (0, _normalizeStyle["default"])((0, _resolveIncludes["default"])(style, baseStyle));
};

var Theme = function () {
  function Theme(themeStyle) {
    (0, _classCallCheck2["default"])(this, Theme);
    this[THEME_STYLE] = resolveStyle(themeStyle);
    this[THEME_STYLE_CACHE] = {};
  }

  (0, _createClass2["default"])(Theme, [{
    key: "createComponentStyle",
    value: function createComponentStyle(componentName, defaultStyle) {
      if (this[THEME_STYLE_CACHE][componentName]) {
        return this[THEME_STYLE_CACHE][componentName];
      }

      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);
      this[THEME_STYLE_CACHE][componentName] = (0, _mergeComponentAndThemeStyles["default"])(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);
      return this[THEME_STYLE_CACHE][componentName];
    }
  }], [{
    key: "setDefaultThemeStyle",
    value: function setDefaultThemeStyle(style) {
      defaultTheme = new Theme(style);
    }
  }, {
    key: "getDefaultTheme",
    value: function getDefaultTheme() {
      if (!defaultTheme) {
        defaultTheme = new Theme({});
      }

      return defaultTheme;
    }
  }]);
  return Theme;
}();

exports["default"] = Theme;

var ThemeShape = _propTypes.PropTypes.shape({
  createComponentStyle: _propTypes.PropTypes.func.isRequired
});

exports.ThemeShape = ThemeShape;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZW1lLmpzIl0sIm5hbWVzIjpbIlRIRU1FX1NUWUxFIiwiVEhFTUVfU1RZTEVfQ0FDSEUiLCJkZWZhdWx0VGhlbWUiLCJyZXNvbHZlU3R5bGUiLCJzdHlsZSIsImJhc2VTdHlsZSIsIlRoZW1lIiwidGhlbWVTdHlsZSIsImNvbXBvbmVudE5hbWUiLCJkZWZhdWx0U3R5bGUiLCJjb21wb25lbnRJbmNsdWRlZFN0eWxlIiwiVGhlbWVTaGFwZSIsIlByb3BUeXBlcyIsInNoYXBlIiwiY3JlYXRlQ29tcG9uZW50U3R5bGUiLCJmdW5jIiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFNQSxXQUFXLEdBQUcsNEJBQXBCO0FBQ0EsSUFBTUMsaUJBQWlCLEdBQUcsa0NBQTFCO0FBRUEsSUFBSUMsWUFBSjs7QUFFQSxJQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFDQyxLQUFELEVBQVFDLFNBQVI7QUFBQSxTQUNuQixnQ0FBZSxpQ0FBZ0JELEtBQWhCLEVBQXVCQyxTQUF2QixDQUFmLENBRG1CO0FBQUEsQ0FBckI7O0lBMkJxQkMsSztBQUNuQixpQkFBWUMsVUFBWixFQUF3QjtBQUFBO0FBQ3RCLFNBQUtQLFdBQUwsSUFBb0JHLFlBQVksQ0FBQ0ksVUFBRCxDQUFoQztBQUNBLFNBQUtOLGlCQUFMLElBQTBCLEVBQTFCO0FBQ0Q7Ozs7eUNBZ0NvQk8sYSxFQUFlQyxZLEVBQWM7QUFDaEQsVUFBSSxLQUFLUixpQkFBTCxFQUF3Qk8sYUFBeEIsQ0FBSixFQUE0QztBQUMxQyxlQUFPLEtBQUtQLGlCQUFMLEVBQXdCTyxhQUF4QixDQUFQO0FBQ0Q7O0FBRUQsVUFBTUUsc0JBQXNCLEdBQUdQLFlBQVksQ0FDekNNLFlBRHlDLEVBRXpDLEtBQUtULFdBQUwsQ0FGeUMsQ0FBM0M7QUFVQSxXQUFLQyxpQkFBTCxFQUF3Qk8sYUFBeEIsSUFBeUMsOENBQ3ZDRSxzQkFEdUMsRUFFdkMsS0FBS1YsV0FBTCxFQUFrQlEsYUFBbEIsQ0FGdUMsRUFHdkMsS0FBS1IsV0FBTCxDQUh1QyxDQUF6QztBQU1BLGFBQU8sS0FBS0MsaUJBQUwsRUFBd0JPLGFBQXhCLENBQVA7QUFDRDs7O3lDQWpEMkJKLEssRUFBTztBQUNqQ0YsTUFBQUEsWUFBWSxHQUFHLElBQUlJLEtBQUosQ0FBVUYsS0FBVixDQUFmO0FBQ0Q7OztzQ0FNd0I7QUFDdkIsVUFBSSxDQUFDRixZQUFMLEVBQW1CO0FBQ2pCQSxRQUFBQSxZQUFZLEdBQUcsSUFBSUksS0FBSixDQUFVLEVBQVYsQ0FBZjtBQUNEOztBQUVELGFBQU9KLFlBQVA7QUFDRDs7Ozs7OztBQXNDSSxJQUFNUyxVQUFVLEdBQUdDLHFCQUFVQyxLQUFWLENBQWdCO0FBQ3hDQyxFQUFBQSxvQkFBb0IsRUFBRUYscUJBQVVHLElBQVYsQ0FBZUM7QUFERyxDQUFoQixDQUFuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3BUeXBlcyB9IGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgcmVzb2x2ZUluY2x1ZGVzIGZyb20gXCIuL3Jlc29sdmVJbmNsdWRlc1wiO1xuaW1wb3J0IG1lcmdlQ29tcG9uZW50QW5kVGhlbWVTdHlsZXMgZnJvbSBcIi4vbWVyZ2VDb21wb25lbnRBbmRUaGVtZVN0eWxlc1wiO1xuaW1wb3J0IG5vcm1hbGl6ZVN0eWxlIGZyb20gXCIuL1N0eWxlTm9ybWFsaXplci9ub3JtYWxpemVTdHlsZVwiO1xuXG4vLyBQcml2YXRlcywgaWRlYWxseSB0aG9zZSBzaG91bGQgYmUgc3ltYm9sc1xuY29uc3QgVEhFTUVfU1RZTEUgPSBcIkBAc2hvdXRlbS50aGVtZS90aGVtZVN0eWxlXCI7XG5jb25zdCBUSEVNRV9TVFlMRV9DQUNIRSA9IFwiQEBzaG91dGVtLnRoZW1lL3RoZW1lQ2FjaGVkU3R5bGVcIjtcblxubGV0IGRlZmF1bHRUaGVtZTtcblxuY29uc3QgcmVzb2x2ZVN0eWxlID0gKHN0eWxlLCBiYXNlU3R5bGUpID0+XG4gIG5vcm1hbGl6ZVN0eWxlKHJlc29sdmVJbmNsdWRlcyhzdHlsZSwgYmFzZVN0eWxlKSk7XG5cbi8qKlxuICogVGhlIHRoZW1lIGRlZmluZXMgdGhlIGFwcGxpY2F0aW9uIHN0eWxlLCBhbmQgcHJvdmlkZXMgbWV0aG9kcyB0b1xuICogcmVzb2x2ZSB0aGUgc3R5bGUgZm9yIGEgc3BlY2lmaWMgY29tcG9uZW50LlxuICpcbiAqIEEgdGhlbWUgc3R5bGUgaXMgYSBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZVxuICogUmVhY3QgTmF0aXZlIHN0eWxlIHJ1bGVzLCB3aXRoIHNldmVyYWwgYWRkaXRpb25hbCBmZWF0dXJlczpcbiAqIDEuIFN0eWxlIHJ1bGVzIG1heSBiZSBuZXN0ZWQgYXJiaXRyYXJpbHlcbiAqIDIuIFRvcCBsZXZlbCBrZXlzIG1heSB0YXJnZXQgc3BlY2lmaWMgY29tcG9uZW50cyBieSB1c2luZyB0aGVpciBmdWxseSBxdWFsaWZpZWQgbmFtZVxuICogMy4gSU5DTFVERSBrZXl3b3JkIG1heSBiZSB1c2VkIHRvIGluY2x1ZGUgYW55IHRvcCBsZXZlbCBzdHlsZSBrZXkgcnVsZXMgaW4gYW55IG90aGVyIHN0eWxlIGtleVxuICpcbiAqIFRvcCBsZXZlbCBrZXlzIGluIGEgdGhlbWUgYXJlIHVzdWFsbHkgc29tZSBzaGFyZWQgc3R5bGVzIGFuZCBjb21wb25lbnQgc3R5bGVzLCBlLmcuOlxuICoge1xuICogICAvLyBTaGFyZWQgc3R5bGVcbiAqICAgYmFzZUZvbnQ6IHtcbiAqICAgICBmb250RmFtaWx5OiAnLi4uJ1xuICogICB9LFxuICpcbiAqICAgLy8gU3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hvdXRlbS51aS5UZXh0IGNvbXBvbmVudFxuICogICAnc2hvdXRlbS51aS5UZXh0Jzoge1xuICogICAgIFtJTkNMVURFXTogWydiYXNlRm9udCddLFxuICogICAgIGNvbG9yOiAnYmxhY2snXG4gKiAgIH1cbiAqIH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhlbWUge1xuICBjb25zdHJ1Y3Rvcih0aGVtZVN0eWxlKSB7XG4gICAgdGhpc1tUSEVNRV9TVFlMRV0gPSByZXNvbHZlU3R5bGUodGhlbWVTdHlsZSk7XG4gICAgdGhpc1tUSEVNRV9TVFlMRV9DQUNIRV0gPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiBzdHlsZSBhcyBhIGRlZmF1bHQgdGhlbWUgc3R5bGUuXG4gICAqL1xuICBzdGF0aWMgc2V0RGVmYXVsdFRoZW1lU3R5bGUoc3R5bGUpIHtcbiAgICBkZWZhdWx0VGhlbWUgPSBuZXcgVGhlbWUoc3R5bGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRlZmF1bHQgdGhlbWUgdGhhdCB3aWxsIGJlIHVzZWQgYXMgZmFsbGJhY2tcbiAgICogaWYgdGhlIFN0eWxlUHJvdmlkZXIgaXMgbm90IGNvbmZpZ3VyZWQgaW4gdGhlIGFwcC5cbiAgICovXG4gIHN0YXRpYyBnZXREZWZhdWx0VGhlbWUoKSB7XG4gICAgaWYgKCFkZWZhdWx0VGhlbWUpIHtcbiAgICAgIGRlZmF1bHRUaGVtZSA9IG5ldyBUaGVtZSh7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcG9uZW50IHN0eWxlIGJ5IG1lcmdpbmcgdGhlIHRoZW1lIHN0eWxlIG9uIHRvcCBvZiB0aGVcbiAgICogcHJvdmlkZWQgZGVmYXVsdCBjb21wb25lbnQgc3R5bGUuIEFueSBydWxlcyBpbiB0aGUgdGhlbWUgc3R5bGUgd2lsbFxuICAgKiBvdmVycmlkZSB0aGUgcnVsZXMgZnJvbSB0aGUgYmFzZSBjb21wb25lbnQgc3R5bGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyByZXNvbHZlIGFueSBJTkNMVURFIGtleXdvcmRzIGluIHRoZSB0aGVtZSBvclxuICAgKiBjb21wb25lbnQgc3R5bGVzIGJlZm9yZSByZXR1cm5pbmcgdGhlIGZpbmFsIHN0eWxlLlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50TmFtZSBmdWxseSBxdWFsaWZpZWQgY29tcG9uZW50IG5hbWUuXG4gICAqIEBwYXJhbSBkZWZhdWx0U3R5bGUgLSBkZWZhdWx0IGNvbXBvbmVudCBzdHlsZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyBiYXNlIHN0eWxlLlxuICAgKi9cbiAgY3JlYXRlQ29tcG9uZW50U3R5bGUoY29tcG9uZW50TmFtZSwgZGVmYXVsdFN0eWxlKSB7XG4gICAgaWYgKHRoaXNbVEhFTUVfU1RZTEVfQ0FDSEVdW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICByZXR1cm4gdGhpc1tUSEVNRV9TVFlMRV9DQUNIRV1bY29tcG9uZW50TmFtZV07XG4gICAgfVxuXG4gICAgY29uc3QgY29tcG9uZW50SW5jbHVkZWRTdHlsZSA9IHJlc29sdmVTdHlsZShcbiAgICAgIGRlZmF1bHRTdHlsZSxcbiAgICAgIHRoaXNbVEhFTUVfU1RZTEVdXG4gICAgKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgc3RhdGljIGNvbXBvbmVudCBzdHlsZSAoc3RhdGljIHBlciBjb21wb25lbnROYW1lKS4gVGhpcyBzdHlsZSBjYW4gb25seVxuICAgICAqIGNoYW5nZSBpZiB0aGUgdGhlbWUgY2hhbmdlcyBkdXJpbmcgcnVudGltZSwgc28gaXQgaXMgc2FmZSB0byByZXVzZSBpdCB3aXRoaW4gYVxuICAgICAqIHNjb3BlIG9mIGEgdGhlbWUgb25jZSBpdCBpcyByZXNvbHZlZCBmb3IgdGhlIGZpcnN0IHRpbWUuXG4gICAgICovXG4gICAgdGhpc1tUSEVNRV9TVFlMRV9DQUNIRV1bY29tcG9uZW50TmFtZV0gPSBtZXJnZUNvbXBvbmVudEFuZFRoZW1lU3R5bGVzKFxuICAgICAgY29tcG9uZW50SW5jbHVkZWRTdHlsZSxcbiAgICAgIHRoaXNbVEhFTUVfU1RZTEVdW2NvbXBvbmVudE5hbWVdLFxuICAgICAgdGhpc1tUSEVNRV9TVFlMRV1cbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXNbVEhFTUVfU1RZTEVfQ0FDSEVdW2NvbXBvbmVudE5hbWVdO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBUaGVtZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgY3JlYXRlQ29tcG9uZW50U3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuIl19