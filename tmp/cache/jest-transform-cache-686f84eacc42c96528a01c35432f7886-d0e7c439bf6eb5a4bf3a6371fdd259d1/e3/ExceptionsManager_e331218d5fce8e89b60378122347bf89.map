{"version":3,"sources":["ExceptionsManager.js"],"names":["SyntheticError","name","Error","exceptionID","reportException","e","isFatal","NativeExceptionsManager","require","parseErrorStack","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","isFromConsoleError","startsWith","console","_errorOriginal","error","jsEngine","id","extraData","rawStack","framesPopped","framesToPop","__DEV__","preventSymbolication","symbolicateStackTrace","then","prettyStack","stackWithoutCollapsedFrames","filter","frame","collapse","updateExceptionMessage","log","handleException","reactConsoleErrorHandler","reportErrorsAsExceptions","apply","arguments","stringifySafe","str","Array","prototype","map","call","join","slice","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const NativeExceptionsManager = require('./NativeExceptionsManager').default;\n  if (NativeExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    const originalMessage = e.message || '';\n    let message = originalMessage;\n    if (e.componentStack != null) {\n      message += `\\n\\nThis error is located at:${e.componentStack}`;\n    }\n    const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n    const isFromConsoleError = e.name === 'console.error';\n\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n\n    // Errors created by `console.error` have already been printed.\n    if (!isFromConsoleError) {\n      if (console._errorOriginal) {\n        console._errorOriginal(message);\n      } else {\n        console.error(message);\n      }\n    }\n\n    message =\n      e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n    NativeExceptionsManager.reportException({\n      message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack:\n        typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack,\n      id: currentExceptionID,\n      isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n        framesPopped: e.framesToPop,\n      },\n    });\n    if (__DEV__) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(prettyStack => {\n          if (prettyStack) {\n            const stackWithoutCollapsedFrames = prettyStack.filter(\n              frame => !frame.collapse,\n            );\n            NativeExceptionsManager.updateExceptionMessage(\n              message,\n              stackWithoutCollapsedFrames,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error => {\n          console.log('Unable to symbolicate stack trace: ' + error.message);\n        });\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  reportException(error, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  if (!console.reportErrorsAsExceptions) {\n    console._errorOriginal.apply(console, arguments);\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    // reportException will console.error this with high enough fidelity.\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    console._errorOriginal.apply(console, arguments);\n    const stringifySafe = require('../Utilities/stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new SyntheticError(str);\n    error.name = 'console.error';\n    error.framesToPop = (error.framesToPop || 0) + 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {handleException, installConsoleErrorReporter, SyntheticError};\n"]}