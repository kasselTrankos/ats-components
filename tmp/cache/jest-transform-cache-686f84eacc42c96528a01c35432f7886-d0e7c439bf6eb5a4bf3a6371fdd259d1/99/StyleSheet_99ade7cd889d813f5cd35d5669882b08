0e4f1a2ca8d17cb8955765ebd143129d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PixelRatio = require('../Utilities/PixelRatio');

var ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');

var StyleSheetValidation = require('./StyleSheetValidation');

var flatten = require('./flattenStyle');

var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);

if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFill = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};

if (__DEV__) {
  Object.freeze(absoluteFill);
}

module.exports = {
  hairlineWidth: hairlineWidth,
  absoluteFill: absoluteFill,
  absoluteFillObject: absoluteFill,
  compose: function compose(style1, style2) {
    if (style1 != null && style2 != null) {
      return [style1, style2];
    } else {
      return style1 != null ? style1 : style2;
    }
  },
  flatten: flatten,
  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var value;

    if (ReactNativeStyleAttributes[property] === true) {
      value = {};
    } else if ((0, _typeof2["default"])(ReactNativeStyleAttributes[property]) === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + " is not a valid style attribute");
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn("Overwriting " + property + " style attribute preprocessor");
    }

    ReactNativeStyleAttributes[property] = _objectSpread({}, value, {
      process: process
    });
  },
  create: function create(obj) {
    if (__DEV__) {
      for (var _key in obj) {
        StyleSheetValidation.validateStyle(_key, obj);

        if (obj[_key]) {
          Object.freeze(obj[_key]);
        }
      }
    }

    return obj;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,