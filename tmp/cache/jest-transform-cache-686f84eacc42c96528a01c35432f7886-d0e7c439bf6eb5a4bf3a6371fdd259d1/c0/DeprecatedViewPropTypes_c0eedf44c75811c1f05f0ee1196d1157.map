{"version":3,"sources":["DeprecatedViewPropTypes.js"],"names":["DeprecatedEdgeInsetsPropType","require","DeprecatedStyleSheetPropType","DeprecatedViewStylePropTypes","PlatformViewPropTypes","PropTypes","DeprecatedAccessibilityRoles","DeprecatedAccessibilityStates","stylePropType","module","exports","accessible","bool","accessibilityLabel","node","accessibilityHint","string","accessibilityActions","arrayOf","accessibilityIgnoresInvertColors","accessibilityRole","oneOf","accessibilityStates","accessibilityState","object","accessibilityLiveRegion","importantForAccessibility","accessibilityViewIsModal","accessibilityElementsHidden","onAccessibilityAction","func","onAccessibilityTap","onMagicTap","testID","nativeID","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","onStartShouldSetResponderCapture","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","hitSlop","onLayout","pointerEvents","style","removeClippedSubviews","renderToHardwareTextureAndroid","shouldRasterizeIOS","collapsable","needsOffscreenAlphaCompositing"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst DeprecatedEdgeInsetsPropType = require('./DeprecatedEdgeInsetsPropType');\nconst DeprecatedStyleSheetPropType = require('./DeprecatedStyleSheetPropType');\nconst DeprecatedViewStylePropTypes = require('./DeprecatedViewStylePropTypes');\nconst PlatformViewPropTypes = require('../Components/View/PlatformViewPropTypes');\nconst PropTypes = require('prop-types');\n\nconst {\n  DeprecatedAccessibilityRoles,\n  DeprecatedAccessibilityStates,\n} = require('./DeprecatedViewAccessibility');\n\nconst stylePropType: ReactPropsCheckType = DeprecatedStyleSheetPropType(\n  DeprecatedViewStylePropTypes,\n);\n\nmodule.exports = {\n  /**\n   * When `true`, indicates that the view is an accessibility element.\n   * By default, all the touchable elements are accessible.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessible\n   */\n  accessible: PropTypes.bool,\n\n  /**\n   * Overrides the text that's read by the screen reader when the user interacts\n   * with the element. By default, the label is constructed by traversing all\n   * the children and accumulating all the `Text` nodes separated by space.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilitylabel\n   */\n  accessibilityLabel: PropTypes.node,\n\n  /**\n   * An accessibility hint helps users understand what will happen when they perform\n   * an action on the accessibility element when that result is not obvious from the\n   * accessibility label.\n   *\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityHint\n   */\n  accessibilityHint: PropTypes.string,\n\n  /**\n   * Provides an array of custom actions available for accessibility.\n   *\n   * @platform ios\n   */\n  accessibilityActions: (PropTypes.arrayOf(\n    PropTypes.string,\n  ): React$PropType$Primitive<Array<string>>),\n\n  /**\n   * Prevents view from being inverted if set to true and color inversion is turned on.\n   *\n   * @platform ios\n   */\n  accessibilityIgnoresInvertColors: PropTypes.bool,\n\n  /**\n   * Indicates to accessibility services to treat UI component like a specific role.\n   */\n  accessibilityRole: (PropTypes.oneOf(\n    DeprecatedAccessibilityRoles,\n  ): React$PropType$Primitive<\n    | 'none'\n    | 'button'\n    | 'link'\n    | 'search'\n    | 'image'\n    | 'keyboardkey'\n    | 'text'\n    | 'adjustable'\n    | 'imagebutton'\n    | 'header'\n    | 'summary'\n    | 'alert'\n    | 'checkbox'\n    | 'combobox'\n    | 'menu'\n    | 'menubar'\n    | 'menuitem'\n    | 'progressbar'\n    | 'radio'\n    | 'radiogroup'\n    | 'scrollbar'\n    | 'spinbutton'\n    | 'switch'\n    | 'tab'\n    | 'tablist'\n    | 'timer'\n    | 'toolbar',\n  >),\n\n  /**\n   * Indicates to accessibility services that UI Component is in a specific State.\n   */\n  accessibilityStates: (PropTypes.arrayOf(\n    PropTypes.oneOf(DeprecatedAccessibilityStates),\n  ): React$PropType$Primitive<\n    Array<\n      | 'selected'\n      | 'disabled'\n      | 'checked'\n      | 'unchecked'\n      | 'busy'\n      | 'expanded'\n      | 'collapsed'\n      | 'hasPopup',\n    >,\n  >),\n  accessibilityState: PropTypes.object,\n  /**\n   * Indicates to accessibility services whether the user should be notified\n   * when this view changes. Works for Android API >= 19 only.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityliveregion\n   */\n  accessibilityLiveRegion: (PropTypes.oneOf([\n    'none',\n    'polite',\n    'assertive',\n  ]): React$PropType$Primitive<'none' | 'polite' | 'assertive'>),\n\n  /**\n   * Controls how view is important for accessibility which is if it\n   * fires accessibility events and if it is reported to accessibility services\n   * that query the screen. Works for Android only.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#importantforaccessibility\n   */\n  importantForAccessibility: (PropTypes.oneOf([\n    'auto',\n    'yes',\n    'no',\n    'no-hide-descendants',\n  ]): React$PropType$Primitive<'auto' | 'yes' | 'no' | 'no-hide-descendants'>),\n\n  /**\n   * A value indicating whether VoiceOver should ignore the elements\n   * within views that are siblings of the receiver.\n   * Default is `false`.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityviewismodal\n   */\n  accessibilityViewIsModal: PropTypes.bool,\n\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#accessibilityElementsHidden\n   */\n  accessibilityElementsHidden: PropTypes.bool,\n\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs an accessibility custom action.\n   *\n   * @platform ios\n   */\n  onAccessibilityAction: PropTypes.func,\n\n  /**\n   * When `accessible` is true, the system will try to invoke this function\n   * when the user performs accessibility tap gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onaccessibilitytap\n   */\n  onAccessibilityTap: PropTypes.func,\n\n  /**\n   * When `accessible` is `true`, the system will invoke this function when the\n   * user performs the magic tap gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onmagictap\n   */\n  onMagicTap: PropTypes.func,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#testid\n   */\n  testID: PropTypes.string,\n\n  /**\n   * Used to locate this view from native classes.\n   *\n   * > This disables the 'layout-only view removal' optimization for this view!\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#nativeid\n   */\n  nativeID: PropTypes.string,\n\n  /**\n   * For most touch interactions, you'll simply want to wrap your component in\n   * `TouchableHighlight` or `TouchableOpacity`. Check out `Touchable.js`,\n   * `ScrollResponder.js` and `ResponderEventPlugin.js` for more discussion.\n   */\n\n  /**\n   * The View is now responding for touch events. This is the time to highlight\n   * and show the user what is happening.\n   *\n   * `View.props.onResponderGrant: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onrespondergrant\n   */\n  onResponderGrant: PropTypes.func,\n\n  /**\n   * The user is moving their finger.\n   *\n   * `View.props.onResponderMove: (event) => {}`, where `event` is a synthetic\n   * touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onrespondermove\n   */\n  onResponderMove: PropTypes.func,\n\n  /**\n   * Another responder is already active and will not release it to that `View`\n   * asking to be the responder.\n   *\n   * `View.props.onResponderReject: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderreject\n   */\n  onResponderReject: PropTypes.func,\n\n  /**\n   * Fired at the end of the touch.\n   *\n   * `View.props.onResponderRelease: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderrelease\n   */\n  onResponderRelease: PropTypes.func,\n\n  /**\n   * The responder has been taken from the `View`. Might be taken by other\n   * views after a call to `onResponderTerminationRequest`, or might be taken\n   * by the OS without asking (e.g., happens with control center/ notification\n   * center on iOS)\n   *\n   * `View.props.onResponderTerminate: (event) => {}`, where `event` is a\n   * synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderterminate\n   */\n  onResponderTerminate: PropTypes.func,\n\n  /**\n   * Some other `View` wants to become responder and is asking this `View` to\n   * release its responder. Returning `true` allows its release.\n   *\n   * `View.props.onResponderTerminationRequest: (event) => {}`, where `event`\n   * is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onresponderterminationrequest\n   */\n  onResponderTerminationRequest: PropTypes.func,\n\n  /**\n   * Does this view want to become responder on the start of a touch?\n   *\n   * `View.props.onStartShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onstartshouldsetresponder\n   */\n  onStartShouldSetResponder: PropTypes.func,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a touch start, it should have this handler which returns `true`.\n   *\n   * `View.props.onStartShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onstartshouldsetrespondercapture\n   */\n  onStartShouldSetResponderCapture: PropTypes.func,\n\n  /**\n   * Does this view want to \"claim\" touch responsiveness? This is called for\n   * every touch move on the `View` when it is not the responder.\n   *\n   * `View.props.onMoveShouldSetResponder: (event) => [true | false]`, where\n   * `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onmoveshouldsetresponder\n   */\n  onMoveShouldSetResponder: PropTypes.func,\n\n  /**\n   * If a parent `View` wants to prevent a child `View` from becoming responder\n   * on a move, it should have this handler which returns `true`.\n   *\n   * `View.props.onMoveShouldSetResponderCapture: (event) => [true | false]`,\n   * where `event` is a synthetic touch event as described above.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onMoveShouldsetrespondercapture\n   */\n  onMoveShouldSetResponderCapture: PropTypes.func,\n\n  /**\n   * This defines how far a touch event can start away from the view.\n   * Typical interface guidelines recommend touch targets that are at least\n   * 30 - 40 points/density-independent pixels.\n   *\n   * > The touch area never extends past the parent view bounds and the Z-index\n   * > of sibling views always takes precedence if a touch hits two overlapping\n   * > views.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#hitslop\n   */\n  hitSlop: DeprecatedEdgeInsetsPropType,\n\n  /**\n   * Invoked on mount and layout changes with:\n   *\n   * `{nativeEvent: { layout: {x, y, width, height}}}`\n   *\n   * This event is fired immediately once the layout has been calculated, but\n   * the new layout may not yet be reflected on the screen at the time the\n   * event is received, especially if a layout animation is in progress.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#onlayout\n   */\n  onLayout: PropTypes.func,\n\n  /**\n   * Controls whether the `View` can be the target of touch events.\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#pointerevents\n   */\n  pointerEvents: (PropTypes.oneOf([\n    'box-none',\n    'none',\n    'box-only',\n    'auto',\n  ]): React$PropType$Primitive<'box-none' | 'none' | 'box-only' | 'auto'>),\n\n  /**\n   * See http://facebook.github.io/react-native/docs/style.html\n   */\n  style: stylePropType,\n\n  /**\n   * This is a special performance property exposed by `RCTView` and is useful\n   * for scrolling content when there are many subviews, most of which are\n   * offscreen. For this property to be effective, it must be applied to a\n   * view that contains many subviews that extend outside its bound. The\n   * subviews must also have `overflow: hidden`, as should the containing view\n   * (or one of its superviews).\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#removeclippedsubviews\n   */\n  removeClippedSubviews: PropTypes.bool,\n\n  /**\n   * Whether this `View` should render itself (and all of its children) into a\n   * single hardware texture on the GPU.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#rendertohardwaretextureandroid\n   */\n  renderToHardwareTextureAndroid: PropTypes.bool,\n\n  /**\n   * Whether this `View` should be rendered as a bitmap before compositing.\n   *\n   * @platform ios\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#shouldrasterizeios\n   */\n  shouldRasterizeIOS: PropTypes.bool,\n\n  /**\n   * Views that are only used to layout their children or otherwise don't draw\n   * anything may be automatically removed from the native hierarchy as an\n   * optimization. Set this property to `false` to disable this optimization and\n   * ensure that this `View` exists in the native view hierarchy.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#collapsable\n   */\n  collapsable: PropTypes.bool,\n\n  /**\n   * Whether this `View` needs to rendered offscreen and composited with an\n   * alpha in order to preserve 100% correct colors and blending behavior.\n   *\n   * @platform android\n   *\n   * See http://facebook.github.io/react-native/docs/view.html#needsoffscreenalphacompositing\n   */\n  needsOffscreenAlphaCompositing: PropTypes.bool,\n\n  /**\n   * Any additional platform-specific view prop types, or prop type overrides.\n   */\n  ...PlatformViewPropTypes,\n};\n"]}