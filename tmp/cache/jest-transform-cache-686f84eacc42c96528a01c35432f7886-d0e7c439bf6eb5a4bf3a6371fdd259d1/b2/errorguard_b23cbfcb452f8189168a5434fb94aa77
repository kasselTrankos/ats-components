5259e060d4ad20a7a29d35e5c2e39110
var _inGuard = 0;

var _globalHandler = function onError(e, isFatal) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error, false);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args, unused_onError, unused_name) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return !!_inGuard;
  },
  guard: function guard(fun, name, context) {
    var _ref, _name;

    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    var guardName = (_ref = (_name = name) != null ? _name : fun.name) != null ? _ref : '<generated guard>';

    function guarded() {
      var _context;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return ErrorUtils.applyWithGuard(fun, (_context = context) != null ? _context : this, args, null, guardName);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsImlzRmF0YWwiLCJFcnJvclV0aWxzIiwic2V0R2xvYmFsSGFuZGxlciIsImZ1biIsImdldEdsb2JhbEhhbmRsZXIiLCJyZXBvcnRFcnJvciIsImVycm9yIiwicmVwb3J0RmF0YWxFcnJvciIsImFwcGx5V2l0aEd1YXJkIiwiY29udGV4dCIsImFyZ3MiLCJ1bnVzZWRfb25FcnJvciIsInVudXNlZF9uYW1lIiwiYXBwbHkiLCJhcHBseVdpdGhHdWFyZElmTmVlZGVkIiwiaW5HdWFyZCIsImd1YXJkIiwibmFtZSIsImNvbnNvbGUiLCJ3YXJuIiwiZ3VhcmROYW1lIiwiZ3VhcmRlZCIsImdsb2JhbCJdLCJtYXBwaW5ncyI6IkFBV0EsSUFBSUEsUUFBUSxHQUFHLENBQWY7O0FBVUEsSUFBSUMsY0FBNEIsR0FBRyxTQUFTQyxPQUFULENBQ2pDQyxDQURpQyxFQUVqQ0MsT0FGaUMsRUFHakM7QUFDQSxRQUFNRCxDQUFOO0FBQ0QsQ0FMRDs7QUFlQSxJQUFNRSxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLGdCQURpQiw0QkFDQUMsR0FEQSxFQUN5QjtBQUN4Q04sSUFBQUEsY0FBYyxHQUFHTSxHQUFqQjtBQUNELEdBSGdCO0FBSWpCQyxFQUFBQSxnQkFKaUIsOEJBSWdCO0FBQy9CLFdBQU9QLGNBQVA7QUFDRCxHQU5nQjtBQU9qQlEsRUFBQUEsV0FQaUIsdUJBT0xDLEtBUEssRUFPZTtBQUM5QlQsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLENBQUNTLEtBQUQsRUFBUSxLQUFSLENBQWhDO0FBQ0QsR0FUZ0I7QUFVakJDLEVBQUFBLGdCQVZpQiw0QkFVQUQsS0FWQSxFQVVvQjtBQUVuQ1QsSUFBQUEsY0FBYyxJQUFJQSxjQUFjLENBQUNTLEtBQUQsRUFBUSxJQUFSLENBQWhDO0FBQ0QsR0FiZ0I7QUFjakJFLEVBQUFBLGNBZGlCLDBCQWVmTCxHQWZlLEVBZ0JmTSxPQWhCZSxFQWlCZkMsSUFqQmUsRUFtQmZDLGNBbkJlLEVBcUJmQyxXQXJCZSxFQXNCUjtBQUNQLFFBQUk7QUFDRmhCLE1BQUFBLFFBQVE7QUFFUixhQUFPTyxHQUFHLENBQUNVLEtBQUosQ0FBVUosT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBSkQsQ0FJRSxPQUFPWCxDQUFQLEVBQVU7QUFDVkUsTUFBQUEsVUFBVSxDQUFDSSxXQUFYLENBQXVCTixDQUF2QjtBQUNELEtBTkQsU0FNVTtBQUNSSCxNQUFBQSxRQUFRO0FBQ1Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FqQ2dCO0FBa0NqQmtCLEVBQUFBLHNCQWxDaUIsa0NBbUNmWCxHQW5DZSxFQW9DZk0sT0FwQ2UsRUFxQ2ZDLElBckNlLEVBc0NSO0FBQ1AsUUFBSVQsVUFBVSxDQUFDYyxPQUFYLEVBQUosRUFBMEI7QUFFeEIsYUFBT1osR0FBRyxDQUFDVSxLQUFKLENBQVVKLE9BQVYsRUFBbUJDLElBQW5CLENBQVA7QUFDRCxLQUhELE1BR087QUFDTFQsTUFBQUEsVUFBVSxDQUFDTyxjQUFYLENBQTBCTCxHQUExQixFQUErQk0sT0FBL0IsRUFBd0NDLElBQXhDO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0E5Q2dCO0FBK0NqQkssRUFBQUEsT0EvQ2lCLHFCQStDRTtBQUNqQixXQUFPLENBQUMsQ0FBQ25CLFFBQVQ7QUFDRCxHQWpEZ0I7QUFrRGpCb0IsRUFBQUEsS0FsRGlCLGlCQW1EZmIsR0FuRGUsRUFvRGZjLElBcERlLEVBcURmUixPQXJEZSxFQXNETztBQUFBOztBQUd0QixRQUFJLE9BQU9OLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUM3QmUsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEscURBQWIsRUFBb0VoQixHQUFwRTtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUNELFFBQU1pQixTQUFTLG9CQUFHSCxJQUFILG9CQUFXZCxHQUFHLENBQUNjLElBQWYsbUJBQXVCLG1CQUF0Qzs7QUFDQSxhQUFTSSxPQUFULEdBQXdDO0FBQUE7O0FBQUEsd0NBQXBCWCxJQUFvQjtBQUFwQkEsUUFBQUEsSUFBb0I7QUFBQTs7QUFDdEMsYUFBT1QsVUFBVSxDQUFDTyxjQUFYLENBQ0xMLEdBREssY0FFTE0sT0FGSyx1QkFFTSxJQUZOLEVBR0xDLElBSEssRUFJTCxJQUpLLEVBS0xVLFNBTEssQ0FBUDtBQU9EOztBQUVELFdBQU9DLE9BQVA7QUFDRDtBQXpFZ0IsQ0FBbkI7QUE0RUFDLE1BQU0sQ0FBQ3JCLFVBQVAsR0FBb0JBLFVBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBwb2x5ZmlsbFxuICovXG5cbmxldCBfaW5HdWFyZCA9IDA7XG5cbnR5cGUgRXJyb3JIYW5kbGVyID0gKGVycm9yOiBtaXhlZCwgaXNGYXRhbDogYm9vbGVhbikgPT4gdm9pZDtcbnR5cGUgRm48QXJncywgUmV0dXJuPiA9ICguLi5BcmdzKSA9PiBSZXR1cm47XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZXJyb3IgaGFuZGxlciB0aGF0IGlzIGNhbGxlZCB3aGVuIHdlIGVuY291bnRlciBhbiBleGNlcHRpb25cbiAqIHdoZW4gbG9hZGluZyBhIG1vZHVsZS4gVGhpcyB3aWxsIHJlcG9ydCBhbnkgZXJyb3JzIGVuY291bnRlcmVkIGJlZm9yZVxuICogRXhjZXB0aW9uc01hbmFnZXIgaXMgY29uZmlndXJlZC5cbiAqL1xubGV0IF9nbG9iYWxIYW5kbGVyOiBFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiBvbkVycm9yKFxuICBlOiBtaXhlZCxcbiAgaXNGYXRhbDogYm9vbGVhbixcbikge1xuICB0aHJvdyBlO1xufTtcblxuLyoqXG4gKiBUaGUgcGFydGljdWxhciByZXF1aXJlIHJ1bnRpbWUgdGhhdCB3ZSBhcmUgdXNpbmcgbG9va3MgZm9yIGEgZ2xvYmFsXG4gKiBgRXJyb3JVdGlsc2Agb2JqZWN0IGFuZCBpZiBpdCBleGlzdHMsIHRoZW4gaXQgcmVxdWlyZXMgbW9kdWxlcyB3aXRoIHRoZVxuICogZXJyb3IgaGFuZGxlciBzcGVjaWZpZWQgdmlhIEVycm9yVXRpbHMuc2V0R2xvYmFsSGFuZGxlciBieSBjYWxsaW5nIHRoZVxuICogcmVxdWlyZSBmdW5jdGlvbiB3aXRoIGFwcGx5V2l0aEd1YXJkLiBTaW5jZSB0aGUgcmVxdWlyZSBtb2R1bGUgaXMgbG9hZGVkXG4gKiBiZWZvcmUgYW55IG9mIHRoZSBtb2R1bGVzLCB0aGlzIEVycm9yVXRpbHMgbXVzdCBiZSBkZWZpbmVkIChhbmQgdGhlIGhhbmRsZXJcbiAqIHNldCkgZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBhbnl0aGluZy5cbiAqL1xuY29uc3QgRXJyb3JVdGlscyA9IHtcbiAgc2V0R2xvYmFsSGFuZGxlcihmdW46IEVycm9ySGFuZGxlcik6IHZvaWQge1xuICAgIF9nbG9iYWxIYW5kbGVyID0gZnVuO1xuICB9LFxuICBnZXRHbG9iYWxIYW5kbGVyKCk6IEVycm9ySGFuZGxlciB7XG4gICAgcmV0dXJuIF9nbG9iYWxIYW5kbGVyO1xuICB9LFxuICByZXBvcnRFcnJvcihlcnJvcjogbWl4ZWQpOiB2b2lkIHtcbiAgICBfZ2xvYmFsSGFuZGxlciAmJiBfZ2xvYmFsSGFuZGxlcihlcnJvciwgZmFsc2UpO1xuICB9LFxuICByZXBvcnRGYXRhbEVycm9yKGVycm9yOiBtaXhlZCk6IHZvaWQge1xuICAgIC8vIE5PVEU6IFRoaXMgaGFzIGFuIHVudHlwZWQgY2FsbCBzaXRlIGluIE1ldHJvLlxuICAgIF9nbG9iYWxIYW5kbGVyICYmIF9nbG9iYWxIYW5kbGVyKGVycm9yLCB0cnVlKTtcbiAgfSxcbiAgYXBwbHlXaXRoR3VhcmQ8VEFyZ3M6ICRSZWFkT25seUFycmF5PG1peGVkPiwgVE91dD4oXG4gICAgZnVuOiBGbjxUQXJncywgVE91dD4sXG4gICAgY29udGV4dD86ID9taXhlZCxcbiAgICBhcmdzPzogP1RBcmdzLFxuICAgIC8vIFVudXNlZCwgYnV0IHNvbWUgY29kZSBzeW5jZWQgZnJvbSB3d3cgc2V0cyBpdCB0byBudWxsLlxuICAgIHVudXNlZF9vbkVycm9yPzogbnVsbCxcbiAgICAvLyBTb21lIGNhbGxlcnMgcGFzcyBhIG5hbWUgaGVyZSwgd2hpY2ggd2UgaWdub3JlLlxuICAgIHVudXNlZF9uYW1lPzogP3N0cmluZyxcbiAgKTogP1RPdXQge1xuICAgIHRyeSB7XG4gICAgICBfaW5HdWFyZCsrO1xuICAgICAgLy8gJEZsb3dGaXhNZTogVE9ETyBUNDgyMDQ3NDUgKDEpIGFwcGx5KGNvbnRleHQsIG51bGwpIGlzIGZpbmUuICgyKSBhcnJheSAtPiByZXN0IGFycmF5IHNob3VsZCB3b3JrXG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIEVycm9yVXRpbHMucmVwb3J0RXJyb3IoZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pbkd1YXJkLS07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZElmTmVlZGVkPFRBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIFRPdXQ+KFxuICAgIGZ1bjogRm48VEFyZ3MsIFRPdXQ+LFxuICAgIGNvbnRleHQ/OiA/bWl4ZWQsXG4gICAgYXJncz86ID9UQXJncyxcbiAgKTogP1RPdXQge1xuICAgIGlmIChFcnJvclV0aWxzLmluR3VhcmQoKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZTogVE9ETyBUNDgyMDQ3NDUgKDEpIGFwcGx5KGNvbnRleHQsIG51bGwpIGlzIGZpbmUuICgyKSBhcnJheSAtPiByZXN0IGFycmF5IHNob3VsZCB3b3JrXG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBpbkd1YXJkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIV9pbkd1YXJkO1xuICB9LFxuICBndWFyZDxUQXJnczogJFJlYWRPbmx5QXJyYXk8bWl4ZWQ+LCBUT3V0PihcbiAgICBmdW46IEZuPFRBcmdzLCBUT3V0PixcbiAgICBuYW1lPzogP3N0cmluZyxcbiAgICBjb250ZXh0PzogP21peGVkLFxuICApOiA/KC4uLlRBcmdzKSA9PiA/VE91dCB7XG4gICAgLy8gVE9ETzogKG1vdGkpIFQ0ODIwNDc1MyBNYWtlIHN1cmUgdGhpcyB3YXJuaW5nIGlzIG5ldmVyIGhpdCBhbmQgcmVtb3ZlIGl0IC0gdHlwZXNcbiAgICAvLyBzaG91bGQgYmUgc3VmZmljaWVudC5cbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKCdBIGZ1bmN0aW9uIG11c3QgYmUgcGFzc2VkIHRvIEVycm9yVXRpbHMuZ3VhcmQsIGdvdCAnLCBmdW4pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGd1YXJkTmFtZSA9IG5hbWUgPz8gZnVuLm5hbWUgPz8gJzxnZW5lcmF0ZWQgZ3VhcmQ+JztcbiAgICBmdW5jdGlvbiBndWFyZGVkKC4uLmFyZ3M6IFRBcmdzKTogP1RPdXQge1xuICAgICAgcmV0dXJuIEVycm9yVXRpbHMuYXBwbHlXaXRoR3VhcmQoXG4gICAgICAgIGZ1bixcbiAgICAgICAgY29udGV4dCA/PyB0aGlzLFxuICAgICAgICBhcmdzLFxuICAgICAgICBudWxsLFxuICAgICAgICBndWFyZE5hbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBndWFyZGVkO1xuICB9LFxufTtcblxuZ2xvYmFsLkVycm9yVXRpbHMgPSBFcnJvclV0aWxzO1xuXG5leHBvcnQgdHlwZSBFcnJvclV0aWxzVCA9IHR5cGVvZiBFcnJvclV0aWxzO1xuIl19