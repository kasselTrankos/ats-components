632b96c649b6b35c0eb0f935883f4435
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if ((0, _typeof2["default"])(object) !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }

    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var _i = 0; _i < keys.length; _i++) {
      var _key = keys[_i];

      if (_hasOwnProperty.call(object, _key)) {
        deepFreezeAndThrowOnMutationInDev(object[_key]);
      }
    }
  }

  return object;
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldi5qcyJdLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBbUJBLFNBQVNBLGlDQUFULENBQXNEQyxNQUF0RCxFQUFvRTtBQUNsRSxNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUNFLHlCQUFPRCxNQUFQLE1BQWtCLFFBQWxCLElBQ0FBLE1BQU0sS0FBSyxJQURYLElBRUFFLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkgsTUFBaEIsQ0FGQSxJQUdBRSxNQUFNLENBQUNFLFFBQVAsQ0FBZ0JKLE1BQWhCLENBSkYsRUFLRTtBQUNBLGFBQU9BLE1BQVA7QUFDRDs7QUFFRCxRQUFNSyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0csSUFBUCxDQUFZTCxNQUFaLENBQWI7QUFDQSxRQUFNTSxlQUFjLEdBQUdKLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkQsY0FBeEM7O0FBRUEsU0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQXpCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFVBQU1FLEdBQUcsR0FBR0wsSUFBSSxDQUFDRyxDQUFELENBQWhCOztBQUNBLFVBQUlGLGVBQWMsQ0FBQ0ssSUFBZixDQUFvQlgsTUFBcEIsRUFBNEJVLEdBQTVCLENBQUosRUFBc0M7QUFDcENSLFFBQUFBLE1BQU0sQ0FBQ1UsY0FBUCxDQUFzQlosTUFBdEIsRUFBOEJVLEdBQTlCLEVBQW1DO0FBQ2pDRyxVQUFBQSxHQUFHLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjLElBQWQsRUFBb0JmLE1BQU0sQ0FBQ1UsR0FBRCxDQUExQjtBQUQ0QixTQUFuQztBQUdBUixRQUFBQSxNQUFNLENBQUNVLGNBQVAsQ0FBc0JaLE1BQXRCLEVBQThCVSxHQUE5QixFQUFtQztBQUNqQ00sVUFBQUEsR0FBRyxFQUFFQyx3QkFBd0IsQ0FBQ0YsSUFBekIsQ0FBOEIsSUFBOUIsRUFBb0NMLEdBQXBDO0FBRDRCLFNBQW5DO0FBR0Q7QUFDRjs7QUFFRFIsSUFBQUEsTUFBTSxDQUFDZ0IsTUFBUCxDQUFjbEIsTUFBZDtBQUNBRSxJQUFBQSxNQUFNLENBQUNpQixJQUFQLENBQVluQixNQUFaOztBQUVBLFNBQUssSUFBSVEsRUFBQyxHQUFHLENBQWIsRUFBZ0JBLEVBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUF6QixFQUFpQ0QsRUFBQyxFQUFsQyxFQUFzQztBQUNwQyxVQUFNRSxJQUFHLEdBQUdMLElBQUksQ0FBQ0csRUFBRCxDQUFoQjs7QUFDQSxVQUFJRixlQUFjLENBQUNLLElBQWYsQ0FBb0JYLE1BQXBCLEVBQTRCVSxJQUE1QixDQUFKLEVBQXNDO0FBQ3BDWCxRQUFBQSxpQ0FBaUMsQ0FBQ0MsTUFBTSxDQUFDVSxJQUFELENBQVAsQ0FBakM7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBT1YsTUFBUDtBQUNEOztBQUVELFNBQVNpQix3QkFBVCxDQUFrQ1AsR0FBbEMsRUFBdUNVLEtBQXZDLEVBQThDO0FBQzVDLFFBQU1DLEtBQUssQ0FDVCxtQ0FDRVgsR0FERixHQUVFLG9CQUZGLEdBR0VZLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxLQUFmLENBSEYsR0FJRSwrQ0FKRixHQUtFLHNCQU5PLENBQVg7QUFRRDs7QUFFRCxTQUFTTixRQUFULENBQWtCTSxLQUFsQixFQUF5QjtBQUN2QixTQUFPQSxLQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLGlDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSWYgeW91ciBhcHBsaWNhdGlvbiBpcyBhY2NlcHRpbmcgZGlmZmVyZW50IHZhbHVlcyBmb3IgdGhlIHNhbWUgZmllbGQgb3ZlclxuICogdGltZSBhbmQgaXMgZG9pbmcgYSBkaWZmIG9uIHRoZW0sIHlvdSBjYW4gZWl0aGVyICgxKSBjcmVhdGUgYSBjb3B5IG9yXG4gKiAoMikgZW5zdXJlIHRoYXQgdGhvc2UgdmFsdWVzIGFyZSBub3QgbXV0YXRlZCBiZWhpbmQgdHdvIHBhc3Nlcy5cbiAqIFRoaXMgZnVuY3Rpb24gaGVscHMgeW91IHdpdGggKDIpIGJ5IGZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIHRocm93aW5nIGlmXG4gKiB0aGUgdXNlciBzdWJzZXF1ZW50bHkgbW9kaWZpZXMgdGhlIHZhbHVlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gY2F2ZWF0cyB3aXRoIHRoaXMgZnVuY3Rpb246XG4gKiAgIC0gSWYgdGhlIGNhbGwgc2l0ZSBpcyBub3QgaW4gc3RyaWN0IG1vZGUsIGl0IHdpbGwgb25seSB0aHJvdyB3aGVuXG4gKiAgICAgbXV0YXRpbmcgZXhpc3RpbmcgZmllbGRzLCBhZGRpbmcgYSBuZXcgb25lXG4gKiAgICAgd2lsbCB1bmZvcnR1bmF0ZWx5IGZhaWwgc2lsZW50bHkgOihcbiAqICAgLSBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgZnJvemVuIG9yIHNlYWxlZCwgaXQgd2lsbCBub3QgY29udGludWUgdGhlXG4gKiAgICAgZGVlcCB0cmF2ZXJzYWwgYW5kIHdpbGwgbGVhdmUgbGVhZiBub2RlcyB1bmZyb3plbi5cbiAqXG4gKiBGcmVlemluZyB0aGUgb2JqZWN0IGFuZCBhZGRpbmcgdGhlIHRocm93IG1lY2hhbmlzbSBpcyBleHBlbnNpdmUgYW5kIHdpbGxcbiAqIG9ubHkgYmUgdXNlZCBpbiBERVYuXG4gKi9cbmZ1bmN0aW9uIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxUOiBPYmplY3Q+KG9iamVjdDogVCk6IFQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8XG4gICAgICBvYmplY3QgPT09IG51bGwgfHxcbiAgICAgIE9iamVjdC5pc0Zyb3plbihvYmplY3QpIHx8XG4gICAgICBPYmplY3QuaXNTZWFsZWQob2JqZWN0KVxuICAgICkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICBjb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiBpZGVudGl0eS5iaW5kKG51bGwsIG9iamVjdFtrZXldKSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIHNldDogdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uLmJpbmQobnVsbCwga2V5KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmZyZWV6ZShvYmplY3QpO1xuICAgIE9iamVjdC5zZWFsKG9iamVjdCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2KG9iamVjdFtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uKGtleSwgdmFsdWUpIHtcbiAgdGhyb3cgRXJyb3IoXG4gICAgJ1lvdSBhdHRlbXB0ZWQgdG8gc2V0IHRoZSBrZXkgYCcgK1xuICAgICAga2V5ICtcbiAgICAgICdgIHdpdGggdGhlIHZhbHVlIGAnICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArXG4gICAgICAnYCBvbiBhbiBvYmplY3QgdGhhdCBpcyBtZWFudCB0byBiZSBpbW11dGFibGUgJyArXG4gICAgICAnYW5kIGhhcyBiZWVuIGZyb3plbi4nLFxuICApO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2O1xuIl19