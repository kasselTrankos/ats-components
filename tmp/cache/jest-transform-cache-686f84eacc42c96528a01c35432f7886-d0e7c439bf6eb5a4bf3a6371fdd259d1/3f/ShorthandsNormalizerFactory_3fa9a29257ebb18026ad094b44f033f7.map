{"version":3,"sources":["ShorthandsNormalizerFactory.js"],"names":["createShorthand","name","type","_","isUndefined","SIDES","CORNERS","HORIZONTAL","VERTICAL","LEFT","RIGHT","TOP","BOTTOM","TOP_RIGHT","BOTTOM_RIGHT","TOP_LEFT","BOTTOM_LEFT","ShorthandsNormalizerFactory","createNormalizersMap","createAllSidesNormalizer","createAllCornersNormalizer","createHorizontalSidesNormalizer","createVerticalSidesNormalizer","prop","shorthand","suffix","val","normalizerCreator","getNormalizerCreator"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,IAAP;AAAA,SAAiB;AAAED,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,IAAI,EAAEC,mBAAEC,WAAF,CAAcF,IAAd,IAAsBD,IAAtB,GAA6BC;AAA3C,GAAjB;AAAA,CAAxB;;AAEO,IAAMG,KAAK,GAAGL,eAAe,CAAC,OAAD,EAAU,EAAV,CAA7B;;AACA,IAAMM,OAAO,GAAGN,eAAe,CAAC,SAAD,EAAY,EAAZ,CAA/B;;AACA,IAAMO,UAAU,GAAGP,eAAe,CAAC,YAAD,CAAlC;;AACA,IAAMQ,QAAQ,GAAGR,eAAe,CAAC,UAAD,CAAhC;;AAEA,IAAMS,IAAI,GAAG,MAAb;;AACA,IAAMC,KAAK,GAAG,OAAd;;AACA,IAAMC,GAAG,GAAG,KAAZ;;AACA,IAAMC,MAAM,GAAG,QAAf;;AACA,IAAMC,SAAS,GAAG,UAAlB;;AACA,IAAMC,YAAY,GAAG,aAArB;;AACA,IAAMC,QAAQ,GAAG,SAAjB;;AACA,IAAMC,WAAW,GAAG,YAApB;;;IAODC,2B;AACJ,yCAAc;AAAA;;AAAA;AACZ,SAAKC,oBAAL,wFACGb,KAAK,CAACJ,IADT,EACgB,KAAKkB,wBADrB,2DAEGb,OAAO,CAACL,IAFX,EAEkB,KAAKmB,0BAFvB,2DAGGb,UAAU,CAACN,IAHd,EAGqB,KAAKoB,+BAH1B,2DAIGb,QAAQ,CAACP,IAJZ,EAImB,KAAKqB,6BAJxB;AAMD;;;;6CAEwBC,I,EAAMC,S,EAAwB;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AACrD,aAAO,UAACC,GAAD;AAAA;;AAAA,iEACJH,IAAI,GAAGd,IAAP,GAAcgB,MADV,EACmBC,GADnB,0CAEJH,IAAI,GAAGb,KAAP,GAAee,MAFX,EAEoBC,GAFpB,0CAGJH,IAAI,GAAGZ,GAAP,GAAac,MAHT,EAGkBC,GAHlB,0CAIJH,IAAI,GAAGX,MAAP,GAAgBa,MAJZ,EAIqBC,GAJrB;AAAA,OAAP;AAMD;;;+CAE0BH,I,EAAMC,S,EAAwB;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AACvD,aAAO,UAACC,GAAD;AAAA;;AAAA,mEACJH,IAAI,GAAGP,WAAP,GAAqBS,MADjB,EAC0BC,GAD1B,2CAEJH,IAAI,GAAGT,YAAP,GAAsBW,MAFlB,EAE2BC,GAF3B,2CAGJH,IAAI,GAAGR,QAAP,GAAkBU,MAHd,EAGuBC,GAHvB,2CAIJH,IAAI,GAAGV,SAAP,GAAmBY,MAJf,EAIwBC,GAJxB;AAAA,OAAP;AAMD;;;oDAE+BH,I,EAAM;AACpC,aAAO,UAACG,GAAD;AAAA;;AAAA,mEACJH,IAAI,GAAGd,IADH,EACUiB,GADV,2CAEJH,IAAI,GAAGb,KAFH,EAEWgB,GAFX;AAAA,OAAP;AAID;;;kDAE6BH,I,EAAM;AAClC,aAAO,UAACG,GAAD;AAAA;;AAAA,mEACJH,IAAI,GAAGZ,GADH,EACSe,GADT,2CAEJH,IAAI,GAAGX,MAFH,EAEYc,GAFZ;AAAA,OAAP;AAID;;;yCAEoBF,S,EAAW;AAC9B,aAAO,KAAKN,oBAAL,CAA0BM,SAAS,CAACvB,IAApC,CAAP;AACD;;;qCAEgBsB,I,EAAMC,S,EAAWC,M,EAAQ;AACxC,UAAME,iBAAiB,GAAG,KAAKC,oBAAL,CAA0BJ,SAA1B,CAA1B;AACA,aAAOG,iBAAiB,CAACJ,IAAD,EAAOC,SAAP,EAAkBC,MAAlB,CAAxB;AACD;;;;;eAGY,IAAIR,2BAAJ,E","sourcesContent":["import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({ name, type: _.isUndefined(type) ? name : type });\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\n\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft';\n\n// Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer,\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val,\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val,\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val,\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val,\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n}\n\nexport default new ShorthandsNormalizerFactory();\n"]}