{"version":3,"sources":["resolveComponentStyle.js"],"names":["isStyleVariant","propertyName","test","isChildStyle","splitStyle","style","_","reduce","result","value","key","styleSection","componentStyle","styleVariants","childrenStyle","resolveComponentStyle","componentName","styleNames","themeStyle","parentStyle","themeCache","mergedStyle","forEach","sn","index","resolvedStyle"],"mappings":";;;;;;;AAAA;;AACA;;AAWA,SAASA,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,SAAO,MAAMC,IAAN,CAAWD,YAAX,CAAP;AACD;;AAcD,SAASE,YAAT,CAAsBF,YAAtB,EAAoC;AAClC,SAAO,oBAAoBC,IAApB,CAAyBD,YAAzB,CAAP;AACD;;AAWD,SAASG,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOC,mBAAEC,MAAF,CACLF,KADK,EAEL,UAACG,MAAD,EAASC,KAAT,EAAgBC,GAAhB,EAAwB;AACtB,QAAIC,YAAY,GAAGH,MAAM,CAACI,cAA1B;;AACA,QAAIZ,cAAc,CAACU,GAAD,CAAlB,EAAyB;AACvBC,MAAAA,YAAY,GAAGH,MAAM,CAACK,aAAtB;AACD,KAFD,MAEO,IAAIV,YAAY,CAACO,GAAD,CAAhB,EAAuB;AAC5BC,MAAAA,YAAY,GAAGH,MAAM,CAACM,aAAtB;AACD;;AACDH,IAAAA,YAAY,CAACD,GAAD,CAAZ,GAAoBD,KAApB;AACA,WAAOD,MAAP;AACD,GAXI,EAYL;AACEI,IAAAA,cAAc,EAAE,EADlB;AAEEC,IAAAA,aAAa,EAAE,EAFjB;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAZK,CAAP;AAkBD;;AAyBM,SAASC,qBAAT,CACLC,aADK,EAML;AAAA,MAJAC,UAIA,uEAJa,EAIb;AAAA,MAHAC,UAGA,uEAHa,EAGb;AAAA,MAFAC,WAEA,uEAFc,EAEd;AAAA,MADAC,UACA;AAUA,MAAIC,WAAW,GAAG,6BAAYH,UAAZ,EAAwBC,WAAW,CAACH,aAAD,CAAnC,CAAlB;AACAC,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAChCH,IAAAA,WAAW,GAAG,6BAAYA,WAAZ,EAAyBH,UAAU,MAAIK,EAAJ,CAAnC,CAAd;AACD,GAFD;AAIAN,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAChCH,IAAAA,WAAW,GAAG,6BACZA,WADY,EAEZF,WAAW,MAAIH,aAAJ,GAAoBO,EAApB,CAFC,CAAd;AAID,GALD;AAmBA,MAAIE,aAAa,GAAG,6BAAYJ,WAAZ,EAAyBF,WAAW,CAACH,aAAD,CAApC,CAApB;AAEAC,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAChCC,IAAAA,aAAa,GAAG,6BAAYA,aAAZ,EAA2BJ,WAAW,MAAIE,EAAJ,CAAtC,CAAhB;AACD,GAFD;AAIAN,EAAAA,UAAU,CAACK,OAAX,CAAmB,UAACC,EAAD,EAAKC,KAAL,EAAe;AAChCC,IAAAA,aAAa,GAAG,6BACdA,aADc,EAEdN,WAAW,MAAIH,aAAJ,GAAoBO,EAApB,CAFG,CAAhB;AAID,GALD;AAOA,SAAOE,aAAP;AACD","sourcesContent":["import _ from \"lodash\";\nimport customMerge from \"./customMerge\";\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\n/**\n * Splits the style into its parts:\n * component style - concrete style that needs to be applied to a component\n * style variants - variants that can be applied to a component by using styleName prop\n * children style - style rules that need to be propagated to component children\n *\n * @param style The style to split.\n * @returns {*} An object with the componentStyle, styleVariants, and childrenStyle keys.\n */\nfunction splitStyle(style) {\n  return _.reduce(\n    style,\n    (result, value, key) => {\n      let styleSection = result.componentStyle;\n      if (isStyleVariant(key)) {\n        styleSection = result.styleVariants;\n      } else if (isChildStyle(key)) {\n        styleSection = result.childrenStyle;\n      }\n      styleSection[key] = value;\n      return result;\n    },\n    {\n      componentStyle: {},\n      styleVariants: {},\n      childrenStyle: {}\n    }\n  );\n}\n\n/**\n * Resolves the final component style by merging all of the styles that can be\n * applied to a component in the proper order.\n *\n * This function extracts the applicable parts of the theme, parent and element\n * styles, and merges the styles that target the component, and component variants\n * with those styles to get the final style.\n *\n * The styles are merged in the following order, where the styles with the\n * higher index override the styles with the lower one:\n * 1. Theme component style\n * 2. Parent component style\n * 3. Theme style variants specified through styleName\n * 4. Parent style variants specified through styleName\n * 5. Element style passed through the style prop\n *\n * @param componentName The component name ('shoutem.ui.Text')\n * @param styleName Style names ('large rounded')\n * @param themeStyle The theme style that should include the theme and base component style\n * @param parentStyle The style rules inherited from the parent component\n * @param elementStyle The style passed through the style prop of the component\n * @returns {{componentStyle, childrenStyle}} The resolved component and children styles.\n */\nexport function resolveComponentStyle(\n  componentName,\n  styleNames = [],\n  themeStyle = {},\n  parentStyle = {},\n  themeCache\n) {\n  // const mergedStyle = _.merge({},\n  //   themeStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => themeStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  let mergedStyle = customMerge(themeStyle, parentStyle[componentName]);\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(mergedStyle, themeStyle[`${sn}`]);\n  });\n\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(\n      mergedStyle,\n      parentStyle[`${componentName}${sn}`]\n    );\n  });\n\n  // Phase 2: merge the component styles, this step is performed by using the\n  // style from phase 1, so that we are sure that the final style variants are\n  // applied to component style.\n  // const resolvedStyle = _.merge({},\n  //   mergedStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => mergedStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  let resolvedStyle = customMerge(mergedStyle, parentStyle[componentName]);\n\n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(resolvedStyle, mergedStyle[`${sn}`]);\n  });\n\n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(\n      resolvedStyle,\n      parentStyle[`${componentName}${sn}`]\n    );\n  });\n\n  return resolvedStyle;\n}\n"]}