{"version":3,"sources":["TextInput.js"],"names":["DeprecatedTextInputPropTypes","require","DocumentSelectionState","NativeMethodsMixin","Platform","React","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TouchableWithoutFeedback","UIManager","createReactClass","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","emptyFunctionThatReturnsTrue","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","getDefaultProps","allowFontScaling","rejectResponderTermination","underlineColorAndroid","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","_rafId","componentDidMount","props","value","tag","registerInput","autoFocus","requestAnimationFrame","focus","componentWillUnmount","remove","blur","unregisterInput","cancelAnimationFrame","clear","setNativeProps","text","render","textInput","getViewManagerConfig","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","defaultValue","_setNativeRef","ref","textContainer","style","selection","end","start","multiline","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","childCount","Children","forEach","maxFontSizeMultiplier","inputView","unshift","styles","multilineInput","onContentSizeChange","_onTextInput","dataDetectorTypes","_onScroll","onLayout","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","accessibilityState","nativeID","testID","RCTTextInputView","autoCapitalize","disableFullscreenUI","textBreakStrategy","event","onFocus","selectionState","editable","mostRecentEventCount","nativeEvent","eventCount","onChange","onChangeText","forceUpdate","onSelectionChange","componentDidUpdate","nativeProps","Object","keys","length","update","onBlur","onScroll","InternalTextInputType","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst DeprecatedTextInputPropTypes = require('../../DeprecatedPropTypes/DeprecatedTextInputPropTypes');\nconst DocumentSelectionState = require('../../vendor/document/selection/DocumentSelectionState');\nconst NativeMethodsMixin = require('../../Renderer/shims/NativeMethodsMixin');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst Text = require('../../Text/Text');\nconst TextAncestor = require('../../Text/TextAncestor');\nconst TextInputState = require('./TextInputState');\nconst TouchableWithoutFeedback = require('../Touchable/TouchableWithoutFeedback');\nconst UIManager = require('../../ReactNative/UIManager');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('invariant');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {TextStyleProp, ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {SyntheticEvent, ScrollEvent} from '../../Types/CoreEventTypes';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nexport type ChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type TextInputEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    previousText: string,\n    range: $ReadOnly<{|\n      start: number,\n      end: number,\n    |}>,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type ContentSizeChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n    contentSize: $ReadOnly<{|\n      width: number,\n      height: number,\n    |}>,\n  |}>,\n>;\n\ntype TargetEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type BlurEvent = TargetEvent;\nexport type FocusEvent = TargetEvent;\n\ntype Selection = $ReadOnly<{|\n  start: number,\n  end: number,\n|}>;\n\nexport type SelectionChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    selection: Selection,\n    target: number,\n  |}>,\n>;\n\nexport type KeyPressEvent = SyntheticEvent<\n  $ReadOnly<{|\n    key: string,\n    target?: ?number,\n    eventCount?: ?number,\n  |}>,\n>;\n\nexport type EditingEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    text: string,\n    target: number,\n  |}>,\n>;\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\nexport type TextContentType =\n  | 'none'\n  | 'URL'\n  | 'addressCity'\n  | 'addressCityAndState'\n  | 'addressState'\n  | 'countryName'\n  | 'creditCardNumber'\n  | 'emailAddress'\n  | 'familyName'\n  | 'fullStreetAddress'\n  | 'givenName'\n  | 'jobTitle'\n  | 'location'\n  | 'middleName'\n  | 'name'\n  | 'namePrefix'\n  | 'nameSuffix'\n  | 'nickname'\n  | 'organizationName'\n  | 'postalCode'\n  | 'streetAddressLine1'\n  | 'streetAddressLine2'\n  | 'sublocality'\n  | 'telephoneNumber'\n  | 'username'\n  | 'password'\n  | 'newPassword'\n  | 'oneTimeCode';\n\ntype PasswordRules = string;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If `false`, disables spell-check style (i.e. red underlines).\n   * The default value is inherited from `autoCorrect`.\n   * @platform ios\n   */\n  spellCheck?: ?boolean,\n\n  /**\n   * Determines the color of the keyboard.\n   * @platform ios\n   */\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n\n  /**\n   * If `true`, the keyboard disables the return key when there is no text and\n   * automatically enables it when there is text. The default value is `false`.\n   * @platform ios\n   */\n  enablesReturnKeyAutomatically?: ?boolean,\n\n  /**\n   * An instance of `DocumentSelectionState`, this is some state that is responsible for\n   * maintaining selection information for a document.\n   *\n   * Some functionality that can be performed with this instance is:\n   *\n   * - `blur()`\n   * - `focus()`\n   * - `update()`\n   *\n   * > You can reference `DocumentSelectionState` in\n   * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n   *\n   * @platform ios\n   */\n  selectionState?: ?DocumentSelectionState,\n\n  /**\n   * When the clear button should appear on the right side of the text view.\n   * This property is supported only for single-line TextInput component.\n   * @platform ios\n   */\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n\n  /**\n   * If `true`, clears the text field automatically when editing begins.\n   * @platform ios\n   */\n  clearTextOnFocus?: ?boolean,\n\n  /**\n   * Determines the types of data converted to clickable URLs in the text input.\n   * Only valid if `multiline={true}` and `editable={false}`.\n   * By default no data types are detected.\n   *\n   * You can provide one type or an array of many types.\n   *\n   * Possible values for `dataDetectorTypes` are:\n   *\n   * - `'phoneNumber'`\n   * - `'link'`\n   * - `'address'`\n   * - `'calendarEvent'`\n   * - `'none'`\n   * - `'all'`\n   *\n   * @platform ios\n   */\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n\n  /**\n   * An optional identifier which links a custom InputAccessoryView to\n   * this text input. The InputAccessoryView is rendered above the\n   * keyboard when this text input is focused.\n   * @platform ios\n   */\n  inputAccessoryViewID?: ?string,\n\n  /**\n   * Give the keyboard and the system information about the\n   * expected semantic meaning for the content that users enter.\n   * @platform ios\n   */\n  textContentType?: ?TextContentType,\n\n  PasswordRules?: ?PasswordRules,\n\n  /**\n   * If `false`, scrolling of the text view will be disabled.\n   * The default value is `true`. Does only work with 'multiline={true}'.\n   * @platform ios\n   */\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Determines which content to suggest on auto complete, e.g.`username`.\n   * To disable auto complete, use `off`.\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `username`\n   * - `password`\n   * - `email`\n   * - `name`\n   * - `tel`\n   * - `street-address`\n   * - `postal-code`\n   * - `cc-number`\n   * - `cc-csc`\n   * - `cc-exp`\n   * - `cc-exp-month`\n   * - `cc-exp-year`\n   * - `off`\n   *\n   * @platform android\n   */\n  autoCompleteType?: ?(\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'email'\n    | 'name'\n    | 'password'\n    | 'postal-code'\n    | 'street-address'\n    | 'tel'\n    | 'username'\n    | 'off'\n  ),\n\n  /**\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\n   * @platform android\n   */\n  returnKeyLabel?: ?string,\n\n  /**\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  numberOfLines?: ?number,\n\n  /**\n   * When `false`, if there is a small amount of space available around a text input\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n   * the text inside of a full screen text input mode. When `true`, this feature is\n   * disabled and users will always edit the text directly inside of the text input.\n   * Defaults to `false`.\n   * @platform android\n   */\n  disableFullscreenUI?: ?boolean,\n\n  /**\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n   * The default value is `simple`.\n   * @platform android\n   */\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n\n  /**\n   * The color of the `TextInput` underline.\n   * @platform android\n   */\n  underlineColorAndroid?: ?ColorValue,\n\n  /**\n   * If defined, the provided image resource will be rendered on the left.\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n   * like\n   * ```\n   * <TextInput\n   *  inlineImageLeft='search_icon'\n   * />\n   * ```\n   * @platform android\n   */\n  inlineImageLeft?: ?string,\n\n  /**\n   * Padding between the inline image, if any, and the text input itself.\n   * @platform android\n   */\n  inlineImagePadding?: ?number,\n\n  importantForAutofill?: ?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),\n\n  /**\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\n   * Defaults to `true`.\n   * @platform android\n   */\n  showSoftInputOnFocus?: ?boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Can tell `TextInput` to automatically capitalize certain characters.\n   *\n   * - `characters`: all characters.\n   * - `words`: first letter of each word.\n   * - `sentences`: first letter of each sentence (*default*).\n   * - `none`: don't auto capitalize anything.\n   */\n  autoCapitalize?: ?AutoCapitalize,\n\n  /**\n   * If `false`, disables auto-correct. The default value is `true`.\n   */\n  autoCorrect?: ?boolean,\n\n  /**\n   * If `true`, focuses the input on `componentDidMount`.\n   * The default value is `false`.\n   */\n  autoFocus?: ?boolean,\n\n  /**\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n   * default is `true`.\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?number,\n\n  /**\n   * If `false`, text is not editable. The default value is `true`.\n   */\n  editable?: ?boolean,\n\n  /**\n   * Determines which keyboard to open, e.g.`numeric`.\n   *\n   * The following values work across platforms:\n   *\n   * - `default`\n   * - `numeric`\n   * - `number-pad`\n   * - `decimal-pad`\n   * - `email-address`\n   * - `phone-pad`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `ascii-capable`\n   * - `numbers-and-punctuation`\n   * - `url`\n   * - `name-phone-pad`\n   * - `twitter`\n   * - `web-search`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `visible-password`\n   */\n  keyboardType?: ?KeyboardType,\n\n  /**\n   * Determines how the return key should look. On Android you can also use\n   * `returnKeyLabel`.\n   *\n   * *Cross platform*\n   *\n   * The following values work across platforms:\n   *\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `search`\n   * - `send`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `none`\n   * - `previous`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `default`\n   * - `emergency-call`\n   * - `google`\n   * - `join`\n   * - `route`\n   * - `yahoo`\n   */\n  returnKeyType?: ?ReturnKeyType,\n\n  /**\n   * Limits the maximum number of characters that can be entered. Use this\n   * instead of implementing the logic in JS to avoid flicker.\n   */\n  maxLength?: ?number,\n\n  /**\n   * If `true`, the text input can be multiple lines.\n   * The default value is `false`.\n   */\n  multiline?: ?boolean,\n\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: ?(e: BlurEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: ?(e: FocusEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChange?: ?(e: ChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: ?(text: string) => mixed,\n\n  /**\n   * Callback that is called when the text input's content size changes.\n   * This will be called with\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\n   *\n   * Only called for multiline text inputs.\n   */\n  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,\n\n  onTextInput?: ?(e: TextInputEvent) => mixed,\n\n  /**\n   * Callback that is called when text input ends.\n   */\n  onEndEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input selection is changed.\n   * This will be called with\n   * `{ nativeEvent: { selection: { start, end } } }`.\n   */\n  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's submit button is pressed.\n   * Invalid if `multiline={true}` is specified.\n   */\n  onSubmitEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   */\n  onKeyPress?: ?(e: KeyPressEvent) => mixed,\n\n  /**\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n   * May also contain other properties from ScrollEvent but on Android contentSize\n   * is not provided for performance reasons.\n   */\n  onScroll?: ?(e: ScrollEvent) => mixed,\n\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: ?Stringish,\n\n  /**\n   * The text color of the placeholder string.\n   */\n  placeholderTextColor?: ?ColorValue,\n\n  /**\n   * If `true`, the text input obscures the text entered so that sensitive text\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n   */\n  secureTextEntry?: ?boolean,\n\n  /**\n   * The highlight and cursor color of the text input.\n   */\n  selectionColor?: ?ColorValue,\n\n  /**\n   * The start and end of the text input's selection. Set start and end to\n   * the same value to position the cursor.\n   */\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n\n  /**\n   * The value to show for the text input. `TextInput` is a controlled\n   * component, which means the native value will be forced to match this\n   * value prop if provided. For most uses, this works great, but in some\n   * cases this may cause flickering - one common cause is preventing edits\n   * by keeping value the same. In addition to simply setting the same value,\n   * either set `editable={false}`, or set/update `maxLength` to prevent\n   * unwanted edits without flicker.\n   */\n  value?: ?Stringish,\n\n  /**\n   * Provides an initial value that will change when the user starts typing.\n   * Useful for simple use-cases where you do not want to deal with listening\n   * to events and updating the value prop to keep the controlled state in sync.\n   */\n  defaultValue?: ?Stringish,\n\n  /**\n   * If `true`, all text will automatically be selected on focus.\n   */\n  selectTextOnFocus?: ?boolean,\n\n  /**\n   * If `true`, the text field will blur when submitted.\n   * The default value is true for single-line fields and false for\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n   * to `true` means that pressing return will blur the field and trigger the\n   * `onSubmitEditing` event instead of inserting a newline into the field.\n   */\n  blurOnSubmit?: ?boolean,\n\n  /**\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n   *\n   * - `borderLeftWidth`\n   * - `borderTopWidth`\n   * - `borderRightWidth`\n   * - `borderBottomWidth`\n   * - `borderTopLeftRadius`\n   * - `borderTopRightRadius`\n   * - `borderBottomRightRadius`\n   * - `borderBottomLeftRadius`\n   *\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n   * for more detail.\n   *\n   * [Styles](docs/style.html)\n   */\n  style?: ?TextStyleProp,\n\n  /**\n   * If `true`, caret is hidden. The default value is `false`.\n   * This property is supported only for single-line TextInput component on iOS.\n   */\n  caretHidden?: ?boolean,\n\n  /*\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\n   */\n  contextMenuHidden?: ?boolean,\n|}>;\n\nconst emptyFunctionThatReturnsTrue = () => true;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: DeprecatedTextInputPropTypes,\n  getDefaultProps() {\n    return {\n      allowFontScaling: true,\n      rejectResponderTermination: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n  _rafId: (null: ?AnimationFrameID),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.props.autoFocus) {\n      this._rafId = requestAnimationFrame(this.focus);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n    if (this._rafId != null) {\n      cancelAnimationFrame(this._rafId);\n    }\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.getViewManagerConfig('RCTVirtualText')\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n      ? this.props.defaultValue\n      : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text\n            style={props.style}\n            allowFontScaling={props.allowFontScaling}\n            maxFontSizeMultiplier={props.maxFontSizeMultiplier}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        accessibilityState={props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={props.rejectResponderTermination}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        accessibilityState={props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize = props.autoCapitalize || 'sentences';\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        accessibilityState={this.props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: FocusEvent) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: PressEvent) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: ChangeEvent) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef && this._inputRef.setNativeProps) {\n      ReactNative.setNativeProps(this._inputRef, {\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: SelectionChangeEvent) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (\n      Object.keys(nativeProps).length > 0 &&\n      this._inputRef &&\n      this._inputRef.setNativeProps\n    ) {\n      ReactNative.setNativeProps(this._inputRef, nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: BlurEvent) {\n    // This is a hack to fix https://fburl.com/toehyir8\n    // @todo(rsnara) Figure out why this is necessary.\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: TextInputEvent) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: ScrollEvent) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"]}