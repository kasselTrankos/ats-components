ab2d94e6c06cebbf0a1666b1ed612d23
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

if (__DEV__) {
  (function () {
    "use strict";

    require("react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore");

    var ReactNativePrivateInterface = require("react-native/Libraries/ReactPrivate/ReactNativePrivateInterface");

    var React = require("react");

    var checkPropTypes = require("prop-types/checkPropTypes");

    var Scheduler = require("scheduler");

    var tracing = require("scheduler/tracing");

    function ReactError(error) {
      error.name = "Invariant Violation";
      return error;
    }

    var eventPluginOrder = null;
    var namesToPlugins = {};

    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        return;
      }

      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);

        (function () {
          if (!(pluginIndex > -1)) {
            throw ReactError(Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`."));
          }
        })();

        if (plugins[pluginIndex]) {
          continue;
        }

        (function () {
          if (!pluginModule.extractEvents) {
            throw ReactError(Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not."));
          }
        })();

        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;

        for (var eventName in publishedEvents) {
          (function () {
            if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
              throw ReactError(Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`."));
            }
          })();
        }
      }
    }

    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      (function () {
        if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same event name, `" + eventName + "`."));
        }
      })();

      eventNameDispatchConfigs[eventName] = dispatchConfig;
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }

        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }

      return false;
    }

    function publishRegistrationName(registrationName, pluginModule, eventName) {
      (function () {
        if (!!registrationNameModules[registrationName]) {
          throw ReactError(Error("EventPluginHub: More than one plugin attempted to publish the same registration name, `" + registrationName + "`."));
        }
      })();

      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
      }
    }

    var plugins = [];
    var eventNameDispatchConfigs = {};
    var registrationNameModules = {};
    var registrationNameDependencies = {};

    function injectEventPluginOrder(injectedEventPluginOrder) {
      (function () {
        if (!!eventPluginOrder) {
          throw ReactError(Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React."));
        }
      })();

      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }

    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;

      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }

        var pluginModule = injectedNamesToPlugins[pluginName];

        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          (function () {
            if (!!namesToPlugins[pluginName]) {
              throw ReactError(Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`."));
            }
          })();

          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }

      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }

    var invokeGuardedCallbackImpl = function invokeGuardedCallbackImpl(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");

        var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          (function () {
            if (!(typeof document !== "undefined")) {
              throw ReactError(Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous."));
            }
          })();

          var evt = document.createEvent("Event");
          var didError = true;
          var windowEvent = window.event;
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            fakeNode.removeEventListener(evtType, callCallback, false);

            if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          }

          var error = void 0;
          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }

            if (event.defaultPrevented) {
              if (error != null && (0, _typeof2["default"])(error) === "object") {
                try {
                  error._suppressLogging = true;
                } catch (inner) {}
              }
            }
          }

          var evtType = "react-" + (name ? name : "invokeguardedcallback");
          window.addEventListener("error", handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false);
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (windowEventDescriptor) {
            Object.defineProperty(window, "event", windowEventDescriptor);
          }

          if (didError) {
            if (!didSetError) {
              error = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://fb.me/react-crossorigin-error for more information.");
            }

            this.onError(error);
          }

          window.removeEventListener("error", handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function onError(error) {
        hasError = true;
        caughtError = error;
      }
    };

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }

    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        var error = clearCaughtError();

        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }

    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        (function () {
          {
            throw ReactError(Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }
    }

    var warningWithoutStack = function warningWithoutStack() {};

    {
      warningWithoutStack = function warningWithoutStack(condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error("`warningWithoutStack(condition, format, ...args)` requires a warning " + "message argument");
        }

        if (args.length > 8) {
          throw new Error("warningWithoutStack() currently supports at most 8 arguments.");
        }

        if (condition) {
          return;
        }

        if (typeof console !== "undefined") {
          var argsWithFormat = args.map(function (item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, "EventPluginUtils.setComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.") : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function validateEventDispatches(event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, "EventPluginUtils: Invalid `event`.") : void 0;
      };
    }

    function executeDispatch(event, listener, inst) {
      var type = event.type || "unknown-event";
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }

    function executeDispatchesInOrder(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }

          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, dispatchListeners, dispatchInstances);
      }

      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }

    function executeDispatchesInOrderStopAtTrueImpl(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          }

          if (dispatchListeners[i](event, dispatchInstances[i])) {
            return dispatchInstances[i];
          }
        }
      } else if (dispatchListeners) {
        if (dispatchListeners(event, dispatchInstances)) {
          return dispatchInstances;
        }
      }

      return null;
    }

    function executeDispatchesInOrderStopAtTrue(event) {
      var ret = executeDispatchesInOrderStopAtTrueImpl(event);
      event._dispatchInstances = null;
      event._dispatchListeners = null;
      return ret;
    }

    function executeDirectDispatch(event) {
      {
        validateEventDispatches(event);
      }
      var dispatchListener = event._dispatchListeners;
      var dispatchInstance = event._dispatchInstances;

      (function () {
        if (!!Array.isArray(dispatchListener)) {
          throw ReactError(Error("executeDirectDispatch(...): Invalid `event`."));
        }
      })();

      event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;
      var res = dispatchListener ? dispatchListener(event) : null;
      event.currentTarget = null;
      event._dispatchListeners = null;
      event._dispatchInstances = null;
      return res;
    }

    function hasDispatches(event) {
      return !!event._dispatchListeners;
    }

    function accumulateInto(current, next) {
      (function () {
        if (!(next != null)) {
          throw ReactError(Error("accumulateInto(...): Accumulated items must not be null or undefined."));
        }
      })();

      if (current == null) {
        return next;
      }

      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }

        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        return [current].concat(next);
      }

      return [current, next];
    }

    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }

    var eventQueue = null;

    var executeDispatchesAndRelease = function executeDispatchesAndRelease(event) {
      if (event) {
        executeDispatchesInOrder(event);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
      return executeDispatchesAndRelease(e);
    };

    function runEventsInBatch(events) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      }

      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

      (function () {
        if (!!eventQueue) {
          throw ReactError(Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented."));
        }
      })();

      rethrowCaughtError();
    }

    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
          return !!(props.disabled && isInteractive(type));

        default:
          return false;
      }
    }

    var injection = {
      injectEventPluginOrder: injectEventPluginOrder,
      injectEventPluginsByName: injectEventPluginsByName
    };

    function getListener(inst, registrationName) {
      var listener = void 0;
      var stateNode = inst.stateNode;

      if (!stateNode) {
        return null;
      }

      var props = getFiberCurrentPropsFromNode(stateNode);

      if (!props) {
        return null;
      }

      listener = props[registrationName];

      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }

      (function () {
        if (!(!listener || typeof listener === "function")) {
          throw ReactError(Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + (0, _typeof2["default"])(listener) + "` type."));
        }
      })();

      return listener;
    }

    function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;

      for (var i = 0; i < plugins.length; i++) {
        var possiblePlugin = plugins[i];

        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }

      return events;
    }

    function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events);
    }

    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;

    function getParent(inst) {
      do {
        inst = inst["return"];
      } while (inst && inst.tag !== HostComponent);

      if (inst) {
        return inst;
      }

      return null;
    }

    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;

      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }

      var depthB = 0;

      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }

      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      }

      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      }

      var depth = depthA;

      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }

        instA = getParent(instA);
        instB = getParent(instB);
      }

      return null;
    }

    function isAncestor(instA, instB) {
      while (instB) {
        if (instA === instB || instA === instB.alternate) {
          return true;
        }

        instB = getParent(instB);
      }

      return false;
    }

    function getParentInstance(inst) {
      return getParent(inst);
    }

    function traverseTwoPhase(inst, fn, arg) {
      var path = [];

      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }

      var i = void 0;

      for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
      }

      for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
      }
    }

    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }

    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, "Dispatching inst must not be null") : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);

      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }

    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }

    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst;
        var parentInst = targetInst ? getParentInstance(targetInst) : null;
        traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
      }
    }

    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }

    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateTwoPhaseDispatchesSkipTarget(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var EVENT_POOL_SIZE = 10;
    var EventInterface = {
      type: null,
      target: null,
      currentTarget: function currentTarget() {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }

    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      var Interface = this.constructor.Interface;

      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }

        {
          delete this[propName];
        }
        var normalize = Interface[propName];

        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === "target") {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    (0, _extends2["default"])(SyntheticEvent.prototype, {
      preventDefault: function preventDefault() {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== "unknown") {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== "unknown") {
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },
      persist: function persist() {
        this.isPersistent = functionThatReturnsTrue;
      },
      isPersistent: functionThatReturnsFalse,
      destructor: function destructor() {
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }

        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
          Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
          Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
          Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function () {}));
          Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function () {}));
        }
      }
    });
    SyntheticEvent.Interface = EventInterface;

    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function E() {};

      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }

      (0, _extends2["default"])(prototype, Class.prototype);
      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = (0, _extends2["default"])({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);

    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === "function";
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? "setting the method" : "setting the property";
        warn(action, "This is effectively a no-op");
        return val;
      }

      function get() {
        var action = isFunction ? "accessing the method" : "accessing the property";
        var result = isFunction ? "This is a no-op function" : "This is set to null";
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result) : void 0;
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;

      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }

      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;

      (function () {
        if (!(event instanceof EventConstructor)) {
          throw ReactError(Error("Trying to release an event instance into a pool of a different type."));
        }
      })();

      event.destructor();

      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }

    var ResponderSyntheticEvent = SyntheticEvent.extend({
      touchHistory: function touchHistory(nativeEvent) {
        return null;
      }
    });
    var TOP_TOUCH_START = "topTouchStart";
    var TOP_TOUCH_MOVE = "topTouchMove";
    var TOP_TOUCH_END = "topTouchEnd";
    var TOP_TOUCH_CANCEL = "topTouchCancel";
    var TOP_SCROLL = "topScroll";
    var TOP_SELECTION_CHANGE = "topSelectionChange";

    function isStartish(topLevelType) {
      return topLevelType === TOP_TOUCH_START;
    }

    function isMoveish(topLevelType) {
      return topLevelType === TOP_TOUCH_MOVE;
    }

    function isEndish(topLevelType) {
      return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;
    }

    var startDependencies = [TOP_TOUCH_START];
    var moveDependencies = [TOP_TOUCH_MOVE];
    var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];
    var MAX_TOUCH_BANK = 20;
    var touchBank = [];
    var touchHistory = {
      touchBank: touchBank,
      numberActiveTouches: 0,
      indexOfSingleActiveTouch: -1,
      mostRecentTimeStamp: 0
    };

    function timestampForTouch(touch) {
      return touch.timeStamp || touch.timestamp;
    }

    function createTouchRecord(touch) {
      return {
        touchActive: true,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
      };
    }

    function resetTouchRecord(touchRecord, touch) {
      touchRecord.touchActive = true;
      touchRecord.startPageX = touch.pageX;
      touchRecord.startPageY = touch.pageY;
      touchRecord.startTimeStamp = timestampForTouch(touch);
      touchRecord.currentPageX = touch.pageX;
      touchRecord.currentPageY = touch.pageY;
      touchRecord.currentTimeStamp = timestampForTouch(touch);
      touchRecord.previousPageX = touch.pageX;
      touchRecord.previousPageY = touch.pageY;
      touchRecord.previousTimeStamp = timestampForTouch(touch);
    }

    function getTouchIdentifier(_ref) {
      var identifier = _ref.identifier;

      (function () {
        if (!(identifier != null)) {
          throw ReactError(Error("Touch object is missing identifier."));
        }
      })();

      {
        !(identifier <= MAX_TOUCH_BANK) ? warningWithoutStack$1(false, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK) : void 0;
      }
      return identifier;
    }

    function recordTouchStart(touch) {
      var identifier = getTouchIdentifier(touch);
      var touchRecord = touchBank[identifier];

      if (touchRecord) {
        resetTouchRecord(touchRecord, touch);
      } else {
        touchBank[identifier] = createTouchRecord(touch);
      }

      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
    }

    function recordTouchMove(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];

      if (touchRecord) {
        touchRecord.touchActive = true;
        touchRecord.previousPageX = touchRecord.currentPageX;
        touchRecord.previousPageY = touchRecord.currentPageY;
        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      } else {
        console.warn("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
      }
    }

    function recordTouchEnd(touch) {
      var touchRecord = touchBank[getTouchIdentifier(touch)];

      if (touchRecord) {
        touchRecord.touchActive = false;
        touchRecord.previousPageX = touchRecord.currentPageX;
        touchRecord.previousPageY = touchRecord.currentPageY;
        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      } else {
        console.warn("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
      }
    }

    function printTouch(touch) {
      return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
      });
    }

    function printTouchBank() {
      var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));

      if (touchBank.length > MAX_TOUCH_BANK) {
        printed += " (original size: " + touchBank.length + ")";
      }

      return printed;
    }

    var ResponderTouchHistoryStore = {
      recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish(topLevelType)) {
          nativeEvent.changedTouches.forEach(recordTouchMove);
        } else if (isStartish(topLevelType)) {
          nativeEvent.changedTouches.forEach(recordTouchStart);
          touchHistory.numberActiveTouches = nativeEvent.touches.length;

          if (touchHistory.numberActiveTouches === 1) {
            touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
          }
        } else if (isEndish(topLevelType)) {
          nativeEvent.changedTouches.forEach(recordTouchEnd);
          touchHistory.numberActiveTouches = nativeEvent.touches.length;

          if (touchHistory.numberActiveTouches === 1) {
            for (var i = 0; i < touchBank.length; i++) {
              var touchTrackToCheck = touchBank[i];

              if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
              }
            }

            {
              var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
              !(activeRecord != null && activeRecord.touchActive) ? warningWithoutStack$1(false, "Cannot find single active touch.") : void 0;
            }
          }
        }
      },
      touchHistory: touchHistory
    };

    function accumulate(current, next) {
      (function () {
        if (!(next != null)) {
          throw ReactError(Error("accumulate(...): Accumulated items must not be null or undefined."));
        }
      })();

      if (current == null) {
        return next;
      }

      if (Array.isArray(current)) {
        return current.concat(next);
      }

      if (Array.isArray(next)) {
        return [current].concat(next);
      }

      return [current, next];
    }

    var responderInst = null;
    var trackedTouchCount = 0;

    var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
      var oldResponderInst = responderInst;
      responderInst = nextResponderInst;

      if (ResponderEventPlugin.GlobalResponderHandler !== null) {
        ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
      }
    };

    var eventTypes = {
      startShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onStartShouldSetResponder",
          captured: "onStartShouldSetResponderCapture"
        },
        dependencies: startDependencies
      },
      scrollShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onScrollShouldSetResponder",
          captured: "onScrollShouldSetResponderCapture"
        },
        dependencies: [TOP_SCROLL]
      },
      selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onSelectionChangeShouldSetResponder",
          captured: "onSelectionChangeShouldSetResponderCapture"
        },
        dependencies: [TOP_SELECTION_CHANGE]
      },
      moveShouldSetResponder: {
        phasedRegistrationNames: {
          bubbled: "onMoveShouldSetResponder",
          captured: "onMoveShouldSetResponderCapture"
        },
        dependencies: moveDependencies
      },
      responderStart: {
        registrationName: "onResponderStart",
        dependencies: startDependencies
      },
      responderMove: {
        registrationName: "onResponderMove",
        dependencies: moveDependencies
      },
      responderEnd: {
        registrationName: "onResponderEnd",
        dependencies: endDependencies
      },
      responderRelease: {
        registrationName: "onResponderRelease",
        dependencies: endDependencies
      },
      responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest",
        dependencies: []
      },
      responderGrant: {
        registrationName: "onResponderGrant",
        dependencies: []
      },
      responderReject: {
        registrationName: "onResponderReject",
        dependencies: []
      },
      responderTerminate: {
        registrationName: "onResponderTerminate",
        dependencies: []
      }
    };

    function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;
      var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);
      var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
      var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
      shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

      if (skipOverBubbleShouldSetFrom) {
        accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
      } else {
        accumulateTwoPhaseDispatches(shouldSetEvent);
      }

      var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);

      if (!shouldSetEvent.isPersistent()) {
        shouldSetEvent.constructor.release(shouldSetEvent);
      }

      if (!wantsResponderInst || wantsResponderInst === responderInst) {
        return null;
      }

      var extracted = void 0;
      var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
      grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      accumulateDirectDispatches(grantEvent);
      var blockHostResponder = executeDirectDispatch(grantEvent) === true;

      if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
        accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);

        if (!terminationRequestEvent.isPersistent()) {
          terminationRequestEvent.constructor.release(terminationRequestEvent);
        }

        if (shouldSwitch) {
          var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
          terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(terminateEvent);
          extracted = accumulate(extracted, [grantEvent, terminateEvent]);
          changeResponder(wantsResponderInst, blockHostResponder);
        } else {
          var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
          rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(rejectEvent);
          extracted = accumulate(extracted, rejectEvent);
        }
      } else {
        extracted = accumulate(extracted, grantEvent);
        changeResponder(wantsResponderInst, blockHostResponder);
      }

      return extracted;
    }

    function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
      return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));
    }

    function noResponderTouches(nativeEvent) {
      var touches = nativeEvent.touches;

      if (!touches || touches.length === 0) {
        return true;
      }

      for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i];
        var target = activeTouch.target;

        if (target !== null && target !== undefined && target !== 0) {
          var targetInst = getInstanceFromNode(target);

          if (isAncestor(responderInst, targetInst)) {
            return false;
          }
        }
      }

      return true;
    }

    var ResponderEventPlugin = {
      _getResponder: function _getResponder() {
        return responderInst;
      },
      eventTypes: eventTypes,
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish(topLevelType)) {
          trackedTouchCount += 1;
        } else if (isEndish(topLevelType)) {
          if (trackedTouchCount >= 0) {
            trackedTouchCount -= 1;
          } else {
            console.error("Ended a touch event which was not counted in `trackedTouchCount`.");
            return null;
          }
        }

        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;
        var isResponderTouchStart = responderInst && isStartish(topLevelType);
        var isResponderTouchMove = responderInst && isMoveish(topLevelType);
        var isResponderTouchEnd = responderInst && isEndish(topLevelType);
        var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

        if (incrementalTouch) {
          var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
          gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(gesture);
          extracted = accumulate(extracted, gesture);
        }

        var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;
        var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
        var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;

        if (finalTouch) {
          var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
          finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
          accumulateDirectDispatches(finalEvent);
          extracted = accumulate(extracted, finalEvent);
          changeResponder(null);
        }

        return extracted;
      },
      GlobalResponderHandler: null,
      injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        }
      }
    };
    var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes;
    var customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;
    var ReactNativeBridgeEventPlugin = {
      eventTypes: {},
      extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (targetInst == null) {
          return null;
        }

        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
        var directDispatchConfig = customDirectEventTypes[topLevelType];

        (function () {
          if (!(bubbleDispatchConfig || directDispatchConfig)) {
            throw ReactError(Error('Unsupported top level event type "' + topLevelType + '" dispatched'));
          }
        })();

        var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);

        if (bubbleDispatchConfig) {
          accumulateTwoPhaseDispatches(event);
        } else if (directDispatchConfig) {
          accumulateDirectDispatches(event);
        } else {
          return null;
        }

        return event;
      }
    };
    var ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"];
    injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
    injection.injectEventPluginsByName({
      ResponderEventPlugin: ResponderEventPlugin,
      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin
    });
    var instanceCache = new Map();
    var instanceProps = new Map();

    function precacheFiberNode(hostInst, tag) {
      instanceCache.set(tag, hostInst);
    }

    function uncacheFiberNode(tag) {
      instanceCache["delete"](tag);
      instanceProps["delete"](tag);
    }

    function getInstanceFromTag(tag) {
      return instanceCache.get(tag) || null;
    }

    function getTagFromInstance(inst) {
      var tag = inst.stateNode._nativeTag;

      if (tag === undefined) {
        tag = inst.stateNode.canonical._nativeTag;
      }

      (function () {
        if (!tag) {
          throw ReactError(Error("All native instances should have a tag."));
        }
      })();

      return tag;
    }

    function getFiberCurrentPropsFromNode$1(stateNode) {
      return instanceProps.get(stateNode._nativeTag) || null;
    }

    function updateFiberProps(tag, props) {
      instanceProps.set(tag, props);
    }

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        return;
      }

      (function () {
        if (!(typeof restoreImpl === "function")) {
          throw ReactError(Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();

      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }

    var debugRenderPhaseSideEffects = false;
    var debugRenderPhaseSideEffectsForStrictMode = false;
    var enableUserTimingAPI = true;
    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
    var warnAboutDeprecatedLifecycles = true;
    var enableProfilerTimer = true;
    var enableSchedulerTracing = true;
    var enableSuspenseServerRenderer = false;
    var warnAboutDeprecatedSetNativeProps = false;
    var enableFlareAPI = false;
    var enableFundamentalAPI = false;
    var warnAboutUnmockedScheduler = false;
    var revertPassiveEffectsChange = false;
    var flushSuspenseFallbacksInTests = true;
    var enableSuspenseCallback = false;
    var warnAboutDefaultPropsOnFunctionComponents = false;
    var warnAboutStringRefs = false;
    var disableLegacyContext = false;
    var disableSchedulerTimeoutBasedOnReactExpirationTime = false;

    var batchedUpdatesImpl = function batchedUpdatesImpl(fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var flushDiscreteUpdatesImpl = function flushDiscreteUpdatesImpl() {};

    var isInsideEventHandler = false;

    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();

      if (controlledComponentsHavePendingUpdates) {
        flushDiscreteUpdatesImpl();
        restoreStateIfNeeded();
      }
    }

    function batchedUpdates(fn, bookkeeping) {
      if (isInsideEventHandler) {
        return fn(bookkeeping);
      }

      isInsideEventHandler = true;

      try {
        return batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }

    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
    }

    var EMPTY_NATIVE_EVENT = {};

    var touchSubsequence = function touchSubsequence(touches, indices) {
      var ret = [];

      for (var i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
      }

      return ret;
    };

    var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
      var rippedOut = [];
      var temp = touches;

      for (var i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]);
        temp[index] = null;
      }

      var fillAt = 0;

      for (var j = 0; j < temp.length; j++) {
        var cur = temp[j];

        if (cur !== null) {
          temp[fillAt++] = cur;
        }
      }

      temp.length = fillAt;
      return rippedOut;
    };

    function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
      var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
      var inst = getInstanceFromTag(rootNodeID);
      batchedUpdates(function () {
        runExtractedPluginEventsInBatch(topLevelType, inst, nativeEvent, nativeEvent.target);
      });
    }

    function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {
      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    }

    function receiveTouches(eventTopLevelType, touches, changedIndices) {
      var changedTouches = eventTopLevelType === "topTouchEnd" || eventTopLevelType === "topTouchCancel" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

      for (var jj = 0; jj < changedTouches.length; jj++) {
        var touch = changedTouches[jj];
        touch.changedTouches = changedTouches;
        touch.touches = touches;
        var nativeEvent = touch;
        var rootNodeID = null;
        var target = nativeEvent.target;

        if (target !== null && target !== undefined) {
          if (target < 1) {
            {
              warningWithoutStack$1(false, "A view is reporting that a touch occurred on tag zero.");
            }
          } else {
            rootNodeID = target;
          }
        }

        _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
      }
    }

    var ReactNativeGlobalResponderHandler = {
      onChange: function onChange(from, to, blockNativeResponder) {
        if (to !== null) {
          var tag = to.stateNode._nativeTag;
          ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);
        } else {
          ReactNativePrivateInterface.UIManager.clearJSResponder();
        }
      }
    };
    ReactNativePrivateInterface.RCTEventEmitter.register({
      receiveEvent: receiveEvent,
      receiveTouches: receiveTouches
    });
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromTag, getTagFromInstance);
    ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);

    function get(key) {
      return key._reactInternalFiber;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
      ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
      };
    }

    if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
      ReactSharedInternals.ReactCurrentBatchConfig = {
        suspense: null
      };
    }

    var hasSymbol = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for");
    var REACT_ELEMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fragment") : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.strict_mode") : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.profiler") : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.provider") : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.context") : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.concurrent_mode") : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.forward_ref") : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense") : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.suspense_list") : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.memo") : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.lazy") : 0xead4;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.fundamental") : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")("react.responder") : 0xead6;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator");
    var FAUX_ITERATOR_SYMBOL = "@@iterator";

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || (0, _typeof2["default"])(maybeIterable) !== "object") {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }

      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        return null;
      }

      {
        if (typeof type.tag === "number") {
          warningWithoutStack$1(false, "Received an unexpected object in getComponentName(). " + "This is likely a bug in React. Please file an issue.");
        }
      }

      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }

      if (typeof type === "string") {
        return type;
      }

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";

        case REACT_PORTAL_TYPE:
          return "Portal";

        case REACT_PROFILER_TYPE:
          return "Profiler";

        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";

        case REACT_SUSPENSE_TYPE:
          return "Suspense";

        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }

      if ((0, _typeof2["default"])(type) === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return "Context.Consumer";

          case REACT_PROVIDER_TYPE:
            return "Context.Provider";

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }

              break;
            }
        }
      }

      return null;
    }

    var NoEffect = 0;
    var PerformedWork = 1;
    var Placement = 2;
    var Update = 4;
    var PlacementAndUpdate = 6;
    var Deletion = 8;
    var ContentReset = 16;
    var Callback = 32;
    var DidCapture = 64;
    var Ref = 128;
    var Snapshot = 256;
    var Passive = 512;
    var LifecycleEffectMask = 932;
    var HostEffectMask = 1023;
    var Incomplete = 1024;
    var ShouldCapture = 2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node["return"]) {
          node = node["return"];

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node["return"]) {
          node = node["return"];
        }
      }

      if (node.tag === HostRoot) {
        return MOUNTED;
      }

      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;

        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component") : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      (function () {
        if (!(isFiberMountedImpl(fiber) === MOUNTED)) {
          throw ReactError(Error("Unable to find node on an unmounted component."));
        }
      })();
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        var state = isFiberMountedImpl(fiber);

        (function () {
          if (!(state !== UNMOUNTED)) {
            throw ReactError(Error("Unable to find node on an unmounted component."));
          }
        })();

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      }

      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a["return"];

        if (parentA === null) {
          break;
        }

        var parentB = parentA.alternate;

        if (parentB === null) {
          var nextParent = parentA["return"];

          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }

          break;
        }

        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          }

          (function () {
            {
              throw ReactError(Error("Unable to find node on an unmounted component."));
            }
          })();
        }

        if (a["return"] !== b["return"]) {
          a = parentA;
          b = parentB;
        } else {
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            (function () {
              if (!didFindChild) {
                throw ReactError(Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."));
              }
            })();
          }
        }

        (function () {
          if (!(a.alternate === b)) {
            throw ReactError(Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }

      (function () {
        if (!(a.tag === HostRoot)) {
          throw ReactError(Error("Unable to find node on an unmounted component."));
        }
      })();

      if (a.stateNode.current === a) {
        return fiber;
      }

      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      }

      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node["return"] || node["return"] === currentParent) {
            return null;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }

      return null;
    }

    var emptyObject = {};
    var removedKeys = null;
    var removedKeyCount = 0;

    function defaultDiffer(prevProp, nextProp) {
      if ((0, _typeof2["default"])(nextProp) !== "object" || nextProp === null) {
        return true;
      } else {
        return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp);
      }
    }

    function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
      if (Array.isArray(node)) {
        var i = node.length;

        while (i-- && removedKeyCount > 0) {
          restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
        }
      } else if (node && removedKeyCount > 0) {
        var obj = node;

        for (var propKey in removedKeys) {
          if (!removedKeys[propKey]) {
            continue;
          }

          var nextProp = obj[propKey];

          if (nextProp === undefined) {
            continue;
          }

          var attributeConfig = validAttributes[propKey];

          if (!attributeConfig) {
            continue;
          }

          if (typeof nextProp === "function") {
            nextProp = true;
          }

          if (typeof nextProp === "undefined") {
            nextProp = null;
          }

          if ((0, _typeof2["default"])(attributeConfig) !== "object") {
            updatePayload[propKey] = nextProp;
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
            updatePayload[propKey] = nextValue;
          }

          removedKeys[propKey] = false;
          removedKeyCount--;
        }
      }
    }

    function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
      var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
      var i = void 0;

      for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
      }

      for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
      }

      for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
      }

      return updatePayload;
    }

    function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
      if (!updatePayload && prevProp === nextProp) {
        return updatePayload;
      }

      if (!prevProp || !nextProp) {
        if (nextProp) {
          return addNestedProperty(updatePayload, nextProp, validAttributes);
        }

        if (prevProp) {
          return clearNestedProperty(updatePayload, prevProp, validAttributes);
        }

        return updatePayload;
      }

      if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
        return diffProperties(updatePayload, prevProp, nextProp, validAttributes);
      }

      if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
        return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
      }

      if (Array.isArray(prevProp)) {
        return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);
      }

      return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);
    }

    function addNestedProperty(updatePayload, nextProp, validAttributes) {
      if (!nextProp) {
        return updatePayload;
      }

      if (!Array.isArray(nextProp)) {
        return addProperties(updatePayload, nextProp, validAttributes);
      }

      for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
      }

      return updatePayload;
    }

    function clearNestedProperty(updatePayload, prevProp, validAttributes) {
      if (!prevProp) {
        return updatePayload;
      }

      if (!Array.isArray(prevProp)) {
        return clearProperties(updatePayload, prevProp, validAttributes);
      }

      for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
      }

      return updatePayload;
    }

    function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
      var attributeConfig = void 0;
      var nextProp = void 0;
      var prevProp = void 0;

      for (var propKey in nextProps) {
        attributeConfig = validAttributes[propKey];

        if (!attributeConfig) {
          continue;
        }

        prevProp = prevProps[propKey];
        nextProp = nextProps[propKey];

        if (typeof nextProp === "function") {
          nextProp = true;

          if (typeof prevProp === "function") {
            prevProp = true;
          }
        }

        if (typeof nextProp === "undefined") {
          nextProp = null;

          if (typeof prevProp === "undefined") {
            prevProp = null;
          }
        }

        if (removedKeys) {
          removedKeys[propKey] = false;
        }

        if (updatePayload && updatePayload[propKey] !== undefined) {
          if ((0, _typeof2["default"])(attributeConfig) !== "object") {
            updatePayload[propKey] = nextProp;
          } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
            var nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;
            updatePayload[propKey] = nextValue;
          }

          continue;
        }

        if (prevProp === nextProp) {
          continue;
        }

        if ((0, _typeof2["default"])(attributeConfig) !== "object") {
          if (defaultDiffer(prevProp, nextProp)) {
            (updatePayload || (updatePayload = {}))[propKey] = nextProp;
          }
        } else if (typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
          var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === "function" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));

          if (shouldUpdate) {
            var _nextValue = typeof attributeConfig.process === "function" ? attributeConfig.process(nextProp) : nextProp;

            (updatePayload || (updatePayload = {}))[propKey] = _nextValue;
          }
        } else {
          removedKeys = null;
          removedKeyCount = 0;
          updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);

          if (removedKeyCount > 0 && updatePayload) {
            restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
            removedKeys = null;
          }
        }
      }

      for (var _propKey in prevProps) {
        if (nextProps[_propKey] !== undefined) {
          continue;
        }

        attributeConfig = validAttributes[_propKey];

        if (!attributeConfig) {
          continue;
        }

        if (updatePayload && updatePayload[_propKey] !== undefined) {
          continue;
        }

        prevProp = prevProps[_propKey];

        if (prevProp === undefined) {
          continue;
        }

        if ((0, _typeof2["default"])(attributeConfig) !== "object" || typeof attributeConfig.diff === "function" || typeof attributeConfig.process === "function") {
          (updatePayload || (updatePayload = {}))[_propKey] = null;

          if (!removedKeys) {
            removedKeys = {};
          }

          if (!removedKeys[_propKey]) {
            removedKeys[_propKey] = true;
            removedKeyCount++;
          }
        } else {
          updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
        }
      }

      return updatePayload;
    }

    function addProperties(updatePayload, props, validAttributes) {
      return diffProperties(updatePayload, emptyObject, props, validAttributes);
    }

    function clearProperties(updatePayload, prevProps, validAttributes) {
      return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
    }

    function create(props, validAttributes) {
      return addProperties(null, props, validAttributes);
    }

    function diff(prevProps, nextProps, validAttributes) {
      return diffProperties(null, prevProps, nextProps, validAttributes);
    }

    function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {
      return function () {
        if (!callback) {
          return undefined;
        }

        if (typeof context.__isMounted === "boolean") {
          if (!context.__isMounted) {
            return undefined;
          }
        }

        return callback.apply(context, arguments);
      };
    }

    function throwOnStylesProp(component, props) {
      if (props.styles !== undefined) {
        var owner = component._owner || null;
        var name = component.constructor.displayName;
        var msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";

        if (owner && owner.constructor && owner.constructor.displayName) {
          msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component.";
        }

        throw new Error(msg);
      }
    }

    function warnForStyleProps(props, validAttributes) {
      for (var key in validAttributes.style) {
        if (!(validAttributes[key] || props[key] === undefined)) {
          console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
        }
      }
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var ReactNativeFiberHostComponent = function () {
      function ReactNativeFiberHostComponent(tag, viewConfig) {
        _classCallCheck(this, ReactNativeFiberHostComponent);

        this._nativeTag = tag;
        this._children = [];
        this.viewConfig = viewConfig;
      }

      ReactNativeFiberHostComponent.prototype.blur = function blur() {
        ReactNativePrivateInterface.TextInputState.blurTextInput(this._nativeTag);
      };

      ReactNativeFiberHostComponent.prototype.focus = function focus() {
        ReactNativePrivateInterface.TextInputState.focusTextInput(this._nativeTag);
      };

      ReactNativeFiberHostComponent.prototype.measure = function measure(callback) {
        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };

      ReactNativeFiberHostComponent.prototype.measureInWindow = function measureInWindow(callback) {
        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
      };

      ReactNativeFiberHostComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        var relativeNode = void 0;

        if (typeof relativeToNativeNode === "number") {
          relativeNode = relativeToNativeNode;
        } else if (relativeToNativeNode._nativeTag) {
          relativeNode = relativeToNativeNode._nativeTag;
        } else if (relativeToNativeNode.canonical && relativeToNativeNode.canonical._nativeTag) {
          relativeNode = relativeToNativeNode.canonical._nativeTag;
        }

        if (relativeNode == null) {
          warningWithoutStack$1(false, "Warning: ref.measureLayout must be called with a node handle or a ref to a native component.");
          return;
        }

        ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
      };

      ReactNativeFiberHostComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
        {
          if (warnAboutDeprecatedSetNativeProps) {
            warningWithoutStack$1(false, "Warning: Calling ref.setNativeProps(nativeProps) " + "is deprecated and will be removed in a future release. " + "Use the setNativeProps export from the react-native package instead." + "\n\timport {setNativeProps} from 'react-native';\n\tsetNativeProps(ref, nativeProps);\n");
          }

          warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
        }
        var updatePayload = create(nativeProps, this.viewConfig.validAttributes);

        if (updatePayload != null) {
          ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
        }
      };

      return ReactNativeFiberHostComponent;
    }();

    function shim() {
      (function () {
        {
          throw ReactError(Error("The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();
    }

    var supportsPersistence = false;
    var cloneInstance = shim;
    var cloneFundamentalInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneHiddenTextInstance = shim;

    function shim$1() {
      (function () {
        {
          throw ReactError(Error("The current renderer does not support hydration. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();
    }

    var supportsHydration = false;
    var canHydrateInstance = shim$1;
    var canHydrateTextInstance = shim$1;
    var canHydrateSuspenseInstance = shim$1;
    var isSuspenseInstancePending = shim$1;
    var isSuspenseInstanceFallback = shim$1;
    var registerSuspenseInstanceRetry = shim$1;
    var getNextHydratableSibling = shim$1;
    var getFirstHydratableChild = shim$1;
    var hydrateInstance = shim$1;
    var hydrateTextInstance = shim$1;
    var getNextHydratableInstanceAfterSuspenseInstance = shim$1;
    var clearSuspenseBoundary = shim$1;
    var clearSuspenseBoundaryFromContainer = shim$1;
    var didNotMatchHydratedContainerTextInstance = shim$1;
    var didNotMatchHydratedTextInstance = shim$1;
    var didNotHydrateContainerInstance = shim$1;
    var didNotHydrateInstance = shim$1;
    var didNotFindHydratableContainerInstance = shim$1;
    var didNotFindHydratableContainerTextInstance = shim$1;
    var didNotFindHydratableContainerSuspenseInstance = shim$1;
    var didNotFindHydratableInstance = shim$1;
    var didNotFindHydratableTextInstance = shim$1;
    var didNotFindHydratableSuspenseInstance = shim$1;
    var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;
    var UPDATE_SIGNAL = {};
    {
      Object.freeze(UPDATE_SIGNAL);
    }
    var nextReactTag = 3;

    function allocateTag() {
      var tag = nextReactTag;

      if (tag % 10 === 1) {
        tag += 2;
      }

      nextReactTag = tag + 2;
      return tag;
    }

    function recursivelyUncacheFiberNode(node) {
      if (typeof node === "number") {
        uncacheFiberNode(node);
      } else {
        uncacheFiberNode(node._nativeTag);

        node._children.forEach(recursivelyUncacheFiberNode);
      }
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance._children.push(child);
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var tag = allocateTag();
      var viewConfig = getViewConfigForType(type);
      {
        for (var key in viewConfig.validAttributes) {
          if (props.hasOwnProperty(key)) {
            ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);
          }
        }
      }
      var updatePayload = create(props, viewConfig.validAttributes);
      ReactNativePrivateInterface.UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
      var component = new ReactNativeFiberHostComponent(tag, viewConfig);
      precacheFiberNode(internalInstanceHandle, tag);
      updateFiberProps(tag, props);
      return component;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      (function () {
        if (!hostContext.isInAParentText) {
          throw ReactError(Error("Text strings must be rendered within a <Text> component."));
        }
      })();

      var tag = allocateTag();
      ReactNativePrivateInterface.UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
        text: text
      });
      precacheFiberNode(internalInstanceHandle, tag);
      return tag;
    }

    function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance, hostContext) {
      if (parentInstance._children.length === 0) {
        return false;
      }

      var nativeTags = parentInstance._children.map(function (child) {
        return typeof child === "number" ? child : child._nativeTag;
      });

      ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);
      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      return {
        isInAParentText: false
      };
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      var prevIsInAParentText = parentHostContext.isInAParentText;
      var isInAParentText = type === "AndroidTextInput" || type === "RCTMultilineTextInputView" || type === "RCTSinglelineTextInputView" || type === "RCTText" || type === "RCTVirtualText";

      if (prevIsInAParentText !== isInAParentText) {
        return {
          isInAParentText: isInAParentText
        };
      } else {
        return parentHostContext;
      }
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {}

    function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
      return UPDATE_SIGNAL;
    }

    function resetAfterCommit(containerInfo) {}

    var isPrimaryRenderer = true;
    var warnsIfNotActing = true;
    var scheduleTimeout = setTimeout;
    var cancelTimeout = clearTimeout;
    var noTimeout = -1;

    function shouldDeprioritizeSubtree(type, props) {
      return false;
    }

    function shouldSetTextContent(type, props) {
      return false;
    }

    var supportsMutation = true;

    function appendChild(parentInstance, child) {
      var childTag = typeof child === "number" ? child : child._nativeTag;
      var children = parentInstance._children;
      var index = children.indexOf(child);

      if (index >= 0) {
        children.splice(index, 1);
        children.push(child);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);
      } else {
        children.push(child);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);
      }
    }

    function appendChildToContainer(parentInstance, child) {
      var childTag = typeof child === "number" ? child : child._nativeTag;
      ReactNativePrivateInterface.UIManager.setChildren(parentInstance, [childTag]);
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      ReactNativePrivateInterface.UIManager.updateView(textInstance, "RCTRawText", {
        text: newText
      });
    }

    function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
      var viewConfig = instance.viewConfig;
      updateFiberProps(instance._nativeTag, newProps);
      var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);

      if (updatePayload != null) {
        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      var children = parentInstance._children;
      var index = children.indexOf(child);

      if (index >= 0) {
        children.splice(index, 1);
        var beforeChildIndex = children.indexOf(beforeChild);
        children.splice(beforeChildIndex, 0, child);
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
      } else {
        var _beforeChildIndex = children.indexOf(beforeChild);

        children.splice(_beforeChildIndex, 0, child);
        var childTag = typeof child === "number" ? child : child._nativeTag;
        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
      }
    }

    function insertInContainerBefore(parentInstance, child, beforeChild) {
      (function () {
        if (!(typeof parentInstance !== "number")) {
          throw ReactError(Error("Container does not support insertBefore operation"));
        }
      })();
    }

    function removeChild(parentInstance, child) {
      recursivelyUncacheFiberNode(child);
      var children = parentInstance._children;
      var index = children.indexOf(child);
      children.splice(index, 1);
      ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
    }

    function removeChildFromContainer(parentInstance, child) {
      recursivelyUncacheFiberNode(child);
      ReactNativePrivateInterface.UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
    }

    function resetTextContent(instance) {}

    function hideInstance(instance) {
      var viewConfig = instance.viewConfig;
      var updatePayload = create({
        style: {
          display: "none"
        }
      }, viewConfig.validAttributes);
      ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }

    function hideTextInstance(textInstance) {
      throw new Error("Not yet implemented.");
    }

    function unhideInstance(instance, props) {
      var viewConfig = instance.viewConfig;
      var updatePayload = diff((0, _extends2["default"])({}, props, {
        style: [props.style, {
          display: "none"
        }]
      }), props, viewConfig.validAttributes);
      ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }

    function unhideTextInstance(textInstance, text) {
      throw new Error("Not yet implemented.");
    }

    function mountResponderInstance(responder, responderInstance, props, state, instance, rootContainerInstance) {
      throw new Error("Not yet implemented.");
    }

    function unmountResponderInstance(responderInstance) {
      throw new Error("Not yet implemented.");
    }

    function getFundamentalComponentInstance(fundamentalInstance) {
      throw new Error("Not yet implemented.");
    }

    function mountFundamentalComponent(fundamentalInstance) {
      throw new Error("Not yet implemented.");
    }

    function shouldUpdateFundamentalComponent(fundamentalInstance) {
      throw new Error("Not yet implemented.");
    }

    function updateFundamentalComponent(fundamentalInstance) {
      throw new Error("Not yet implemented.");
    }

    function unmountFundamentalComponent(fundamentalInstance) {
      throw new Error("Not yet implemented.");
    }

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      var sourceInfo = "";

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, "");
        {
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                fileName = folderName + "/" + fileName;
              }
            }
          }
        }
        sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
      } else if (ownerName) {
        sourceInfo = " (created by " + ownerName + ")";
      }

      return "\n    in " + (name || "Unknown") + sourceInfo;
    };

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case HostRoot:
        case HostPortal:
        case HostText:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
          return "";

        default:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner.type);
          }

          return describeComponentFrame(name, source, ownerName);
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = "";
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node["return"];
      } while (node);

      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }

        var owner = current._debugOwner;

        if (owner !== null && typeof owner !== "undefined") {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return "";
        }

        return getStackByFiberInDevAndProd(current);
      }
      return "";
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }

    var reactEmoji = "\u269B";
    var warningEmoji = "\u26D4";
    var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
    var currentFiber = null;
    var currentPhase = null;
    var currentPhaseFiber = null;
    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false;
    var labelsInCurrentCommit = new Set();

    var formatMarkName = function formatMarkName(markName) {
      return reactEmoji + " " + markName;
    };

    var formatLabel = function formatLabel(label, warning) {
      var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
      var suffix = warning ? " Warning: " + warning : "";
      return "" + prefix + label + suffix;
    };

    var beginMark = function beginMark(markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function clearMark(markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function endMark(label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {}

      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function getFiberMarkName(label, debugID) {
      return label + " (#" + debugID + ")";
    };

    var getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
      if (phase === null) {
        return componentName + " [" + (isMounted ? "update" : "mount") + "]";
      } else {
        return componentName + "." + phase;
      }
    };

    var beginFiberMark = function beginFiberMark(fiber, phase) {
      var componentName = getComponentName(fiber.type) || "Unknown";
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function clearFiberMark(fiber, phase) {
      var componentName = getComponentName(fiber.type) || "Unknown";
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function endFiberMark(fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || "Unknown";
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function pauseTimers() {
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber["return"];
      }
    };

    var resumeTimersRecursively = function resumeTimersRecursively(fiber) {
      if (fiber["return"] !== null) {
        resumeTimersRecursively(fiber["return"]);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function resumeTimers() {
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark("(Waiting for async callback...)");
        }
      }
    }

    function stopRequestCallbackTimer(didExpire) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? "Update expired; will flush synchronously" : null;
          endMark("(Waiting for async callback...)", "(Waiting for async callback...)", warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }

        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }

        currentFiber = fiber["return"];

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        }

        currentFiber = fiber["return"];

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0;
        beginMark("(React Tree Reconciliation)");
        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = "A top-level update interrupted the previous render";
          } else {
            var componentName = getComponentName(interruptedBy.type) || "Unknown";
            warning = "An update to " + componentName + " interrupted the previous render";
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = "There were cascading updates";
        }

        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
        pauseTimers();
        endMark(label, "(React Tree Reconciliation)", warning);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark("(Committing Changes)");
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning = "Lifecycle hook scheduled a cascading update";
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = "Caused by a cascading update in earlier commit";
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark("(Committing Changes)", "(Committing Changes)", warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark("(Committing Snapshot Effects)");
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark("(Committing Host Effects)");
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark("(Calling Lifecycle Methods)");
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
      }
    }

    var valueStack = [];
    var fiberStack = void 0;
    {
      fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, "Unexpected pop.");
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, "Unexpected Fiber popped.");
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    var warnedAboutMissingGetChildContext = void 0;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (disableLegacyContext) {
        return emptyContextObject;
      } else {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          return previousContext;
        }

        return contextStackCursor.current;
      }
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      if (disableLegacyContext) {
        return;
      } else {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      if (disableLegacyContext) {
        return emptyContextObject;
      } else {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;

        if (!contextTypes) {
          return emptyContextObject;
        }

        var instance = workInProgress.stateNode;

        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }

        var context = {};

        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }

        {
          var name = getComponentName(type) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
        }

        if (instance) {
          cacheContext(workInProgress, unmaskedContext, context);
        }

        return context;
      }
    }

    function hasContextChanged() {
      if (disableLegacyContext) {
        return false;
      } else {
        return didPerformWorkStackCursor.current;
      }
    }

    function isContextProvider(type) {
      if (disableLegacyContext) {
        return false;
      } else {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
      }
    }

    function popContext(fiber) {
      if (disableLegacyContext) {
        return;
      } else {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }

    function popTopLevelContextObject(fiber) {
      if (disableLegacyContext) {
        return;
      } else {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      if (disableLegacyContext) {
        return;
      } else {
        (function () {
          if (!(contextStackCursor.current === emptyContextObject)) {
            throw ReactError(Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();

        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }

    function processChildContext(fiber, type, parentContext) {
      if (disableLegacyContext) {
        return parentContext;
      } else {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;

        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentName(type) || "Unknown";

            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              warningWithoutStack$1(false, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }

        var childContext = void 0;
        {
          setCurrentPhase("getChildContext");
        }
        startPhaseTimer(fiber, "getChildContext");
        childContext = instance.getChildContext();
        stopPhaseTimer();
        {
          setCurrentPhase(null);
        }

        for (var contextKey in childContext) {
          (function () {
            if (!(contextKey in childContextTypes)) {
              throw ReactError(Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.'));
            }
          })();
        }

        {
          var name = getComponentName(type) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
        }
        return (0, _extends2["default"])({}, parentContext, childContext);
      }
    }

    function pushContextProvider(workInProgress) {
      if (disableLegacyContext) {
        return false;
      } else {
        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
      }
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      if (disableLegacyContext) {
        return;
      } else {
        var instance = workInProgress.stateNode;

        (function () {
          if (!instance) {
            throw ReactError(Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();

        if (didChange) {
          var mergedContext = processChildContext(workInProgress, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress);
          pop(contextStackCursor, workInProgress);
          push(contextStackCursor, mergedContext, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
          pop(didPerformWorkStackCursor, workInProgress);
          push(didPerformWorkStackCursor, didChange, workInProgress);
        }
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      if (disableLegacyContext) {
        return emptyContextObject;
      } else {
        (function () {
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            throw ReactError(Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();

        var node = fiber;

        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;

            case ClassComponent:
              {
                var Component = node.type;

                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }

                break;
              }
          }

          node = node["return"];
        } while (node !== null);

        (function () {
          {
            throw ReactError(Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }
    }

    var LegacyRoot = 0;
    var BatchedRoot = 1;
    var ConcurrentRoot = 2;
    var warning = warningWithoutStack$1;
    {
      warning = function warning(condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + "%s"].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority;
    var Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback;
    var Scheduler_cancelCallback = Scheduler.unstable_cancelCallback;
    var Scheduler_shouldYield = Scheduler.unstable_shouldYield;
    var Scheduler_requestPaint = Scheduler.unstable_requestPaint;
    var Scheduler_now = Scheduler.unstable_now;
    var Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var Scheduler_NormalPriority = Scheduler.unstable_NormalPriority;
    var Scheduler_LowPriority = Scheduler.unstable_LowPriority;
    var Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

    if (enableSchedulerTracing) {
      (function () {
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
          throw ReactError(Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling"));
        }
      })();
    }

    var fakeCallbackNode = {};
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95;
    var NoPriority = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs = Scheduler_now();
    var now = initialTimeMs < 10000 ? Scheduler_now : function () {
      return Scheduler_now() - initialTimeMs;
    };

    function getCurrentPriorityLevel() {
      switch (Scheduler_getCurrentPriorityLevel()) {
        case Scheduler_ImmediatePriority:
          return ImmediatePriority;

        case Scheduler_UserBlockingPriority:
          return UserBlockingPriority;

        case Scheduler_NormalPriority:
          return NormalPriority;

        case Scheduler_LowPriority:
          return LowPriority;

        case Scheduler_IdlePriority:
          return IdlePriority;

        default:
          (function () {
            {
              throw ReactError(Error("Unknown priority level."));
            }
          })();

      }
    }

    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
      switch (reactPriorityLevel) {
        case ImmediatePriority:
          return Scheduler_ImmediatePriority;

        case UserBlockingPriority:
          return Scheduler_UserBlockingPriority;

        case NormalPriority:
          return Scheduler_NormalPriority;

        case LowPriority:
          return Scheduler_LowPriority;

        case IdlePriority:
          return Scheduler_IdlePriority;

        default:
          (function () {
            {
              throw ReactError(Error("Unknown priority level."));
            }
          })();

      }
    }

    function runWithPriority(reactPriorityLevel, fn) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_runWithPriority(priorityLevel, fn);
    }

    function scheduleCallback(reactPriorityLevel, callback, options) {
      var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
      return Scheduler_scheduleCallback(priorityLevel, callback, options);
    }

    function scheduleSyncCallback(callback) {
      if (syncQueue === null) {
        syncQueue = [callback];
        immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
      } else {
        syncQueue.push(callback);
      }

      return fakeCallbackNode;
    }

    function cancelCallback(callbackNode) {
      if (callbackNode !== fakeCallbackNode) {
        Scheduler_cancelCallback(callbackNode);
      }
    }

    function flushSyncCallbackQueue() {
      if (immediateQueueCallbackNode !== null) {
        Scheduler_cancelCallback(immediateQueueCallbackNode);
      }

      flushSyncCallbackQueueImpl();
    }

    function flushSyncCallbackQueueImpl() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = true;
        var i = 0;

        try {
          var _isSync = true;
          var queue = syncQueue;
          runWithPriority(ImmediatePriority, function () {
            for (; i < queue.length; i++) {
              var callback = queue[i];

              do {
                callback = callback(_isSync);
              } while (callback !== null);
            }
          });
          syncQueue = null;
        } catch (error) {
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i + 1);
          }

          Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
          throw error;
        } finally {
          isFlushingSyncQueue = false;
        }
      }
    }

    var NoMode = 0;
    var StrictMode = 1;
    var BatchedMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = MAX_SIGNED_31_BIT_INT;
    var Batched = Sync - 1;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = Batched - 1;

    function msToExpirationTime(ms) {
      return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }

    function expirationTimeToMs(expirationTime) {
      return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    }

    function computeSuspenseExpiration(currentTime, timeoutMs) {
      return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
    }

    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    function inferPriorityFromExpirationTime(currentTime, expirationTime) {
      if (expirationTime === Sync) {
        return ImmediatePriority;
      }

      if (expirationTime === Never) {
        return IdlePriority;
      }

      var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

      if (msUntil <= 0) {
        return ImmediatePriority;
      }

      if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
        return UserBlockingPriority;
      }

      if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
        return NormalPriority;
      }

      return IdlePriority;
    }

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if ((0, _typeof2["default"])(objA) !== "object" || objA === null || (0, _typeof2["default"])(objB) !== "object" || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }

      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }

    var lowPriorityWarning = function lowPriorityWarning() {};

    {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== "undefined") {
          console.warn(message);
        }

        try {
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function lowPriorityWarning(condition, format) {
        if (format === undefined) {
          throw new Error("`lowPriorityWarning(condition, format, ...args)` requires a warning " + "message argument");
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {},
      flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},
      recordLegacyContextWarning: function recordLegacyContextWarning(fiber, instance) {},
      flushLegacyContextWarning: function flushLegacyContextWarning() {},
      discardPendingWarnings: function discardPendingWarnings() {}
    };
    {
      var findStrictRoot = function findStrictRoot(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;

        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }

          node = node["return"];
        }

        return maybeStrictRoot;
      };

      var setToSortedString = function setToSortedString(set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(", ");
      };

      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      var didWarnAboutUnsafeLifecycles = new Set();

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }

        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }

        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }

        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }

        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }

        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        var componentWillMountUniqueNames = new Set();

        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }

        var UNSAFE_componentWillMountUniqueNames = new Set();

        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }

        var componentWillReceivePropsUniqueNames = new Set();

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }

        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }

        var componentWillUpdateUniqueNames = new Set();

        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }

        var UNSAFE_componentWillUpdateUniqueNames = new Set();

        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }

        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          warningWithoutStack$1(false, "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "\nPlease update the following components: %s", sortedNames);
        }

        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

          warningWithoutStack$1(false, "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "\nPlease update the following components: %s", _sortedNames);
        }

        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

          warningWithoutStack$1(false, "Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "\nPlease update the following components: %s", _sortedNames2);
        }

        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

          lowPriorityWarning$1(false, "componentWillMount has been renamed, and is not recommended for use. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move code with side effects to componentDidMount, and set initial state in the constructor.\n" + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames3);
        }

        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

          lowPriorityWarning$1(false, "componentWillReceiveProps has been renamed, and is not recommended for use. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + "static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n" + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames4);
        }

        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

          lowPriorityWarning$1(false, "componentWillUpdate has been renamed, and is not recommended for use. " + "See https://fb.me/react-async-component-lifecycle-hooks for details.\n\n" + "* Move data fetching code or side effects to componentDidUpdate.\n" + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + "\nPlease update the following components: %s", _sortedNames5);
        }
      };

      var pendingLegacyContextWarning = new Map();
      var didWarnAboutLegacyContext = new Set();

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, "Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
          return;
        }

        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }

          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
          warningWithoutStack$1(false, "Legacy context API has been detected within a strict-mode tree: %s" + "\n\nThe old API will be supported in all 16.x releases, but applications " + "using it should migrate to the new version." + "\n\nPlease update the following components: %s" + "\n\nLearn more about this warning here:" + "\nhttps://fb.me/react-legacy-context", strictRootComponentStack, sortedNames);
        });
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
      };
    }
    var resolveFamily = null;
    var failedBoundaries = null;

    var setRefreshHandler = function setRefreshHandler(handler) {
      {
        resolveFamily = handler;
      }
    };

    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }

        var family = resolveFamily(type);

        if (family === undefined) {
          return type;
        }

        return family.current;
      }
    }

    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }

    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }

        var family = resolveFamily(type);

        if (family === undefined) {
          if (type !== null && type !== undefined && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);

            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };

              if (type.displayName !== undefined) {
                syntheticType.displayName = type.displayName;
              }

              return syntheticType;
            }
          }

          return type;
        }

        return family.current;
      }
    }

    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          return false;
        }

        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = (0, _typeof2["default"])(nextType) === "object" && nextType !== null ? nextType.$$typeof : null;

        switch (fiber.tag) {
          case ClassComponent:
            {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }

              break;
            }

          case FunctionComponent:
            {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }

              break;
            }

          case ForwardRef:
            {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }

              break;
            }

          case MemoComponent:
          case SimpleMemoComponent:
            {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }

              break;
            }

          default:
            return false;
        }

        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);

          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }

        return false;
      }
    }

    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          return;
        }

        if (typeof WeakSet !== "function") {
          return;
        }

        if (failedBoundaries === null) {
          failedBoundaries = new WeakSet();
        }

        failedBoundaries.add(fiber);
      }
    }

    var scheduleRefresh = function scheduleRefresh(root, update) {
      {
        if (resolveFamily === null) {
          return;
        }

        var _staleFamilies = update.staleFamilies,
            _updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function () {
          scheduleFibersWithFamiliesRecursively(root.current, _updatedFamilies, _staleFamilies);
        });
      }
    };

    var scheduleRoot = function scheduleRoot(root, element) {
      {
        if (root.context !== emptyContextObject) {
          return;
        }

        flushPassiveEffects();
        updateContainerAtExpirationTime(element, root, null, Sync, null);
      }
    };

    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate,
            child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type;
        var candidateType = null;

        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;

          case ForwardRef:
            candidateType = type.render;
            break;

          default:
            break;
        }

        if (resolveFamily === null) {
          throw new Error("Expected resolveFamily to be set during hot reload.");
        }

        var needsRender = false;
        var needsRemount = false;

        if (candidateType !== null) {
          var family = resolveFamily(candidateType);

          if (family !== undefined) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }

        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }

        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }

        if (needsRemount || needsRender) {
          scheduleWork(fiber, Sync);
        }

        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }

        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }

    var findHostInstancesForRefresh = function findHostInstancesForRefresh(root, families) {
      {
        var hostInstances = new Set();
        var types = new Set(families.map(function (family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
      }
    };

    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type;
        var candidateType = null;

        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;

          case ForwardRef:
            candidateType = type.render;
            break;

          default:
            break;
        }

        var didMatch = false;

        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }

        if (didMatch) {
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }

        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }

    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

        if (foundHostInstances) {
          return;
        }

        var node = fiber;

        while (true) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;

            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;

            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }

          if (node["return"] === null) {
            throw new Error("Expected to reach root first.");
          }

          node = node["return"];
        }
      }
    }

    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber;
        var foundHostInstances = false;

        while (true) {
          if (node.tag === HostComponent) {
            foundHostInstances = true;
            hostInstances.add(node.stateNode);
          } else if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === fiber) {
            return foundHostInstances;
          }

          while (node.sibling === null) {
            if (node["return"] === null || node["return"] === fiber) {
              return foundHostInstances;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      }
      return false;
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = (0, _extends2["default"])({}, baseProps);
        var defaultProps = Component.defaultProps;

        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }

        return props;
      }

      return baseProps;
    }

    function readLazyComponentType(lazyComponent) {
      var status = lazyComponent._status;
      var result = lazyComponent._result;

      switch (status) {
        case Resolved:
          {
            var Component = result;
            return Component;
          }

        case Rejected:
          {
            var error = result;
            throw error;
          }

        case Pending:
          {
            var thenable = result;
            throw thenable;
          }

        default:
          {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;

            var _thenable = ctor();

            _thenable.then(function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject["default"];
                {
                  if (defaultExport === undefined) {
                    warning$1(false, "lazy: Expected the result of a dynamic import() call. " + "Instead received: %s\n\nYour code should look like: \n  " + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            });

            switch (lazyComponent._status) {
              case Resolved:
                return lazyComponent._result;

              case Rejected:
                throw lazyComponent._result;
            }

            lazyComponent._result = _thenable;
            throw _thenable;
          }
      }
    }

    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;

    function resetContextDependencies() {
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }

    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.") : void 0;
          context._currentRenderer = rendererSigil;
        }
      } else {
        push(valueCursor, context._currentValue2, providerFiber);
        context._currentValue2 = nextValue;
        {
          !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, "Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.") : void 0;
          context._currentRenderer2 = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        context._currentValue = currentValue;
      } else {
        context._currentValue2 = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      if (is(oldValue, newValue)) {
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
        {
          !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning$1(false, "calculateChangedBits: Expected the return value to be a " + "31-bit integer. Instead received: %s", changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
      var node = parent;

      while (node !== null) {
        var alternate = node.alternate;

        if (node.childExpirationTime < renderExpirationTime) {
          node.childExpirationTime = renderExpirationTime;

          if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          }
        } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
          alternate.childExpirationTime = renderExpirationTime;
        } else {
          break;
        }

        node = node["return"];
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      if (fiber !== null) {
        fiber["return"] = workInProgress;
      }

      while (fiber !== null) {
        var nextFiber = void 0;
        var list = fiber.dependencies;

        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;

          while (dependency !== null) {
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              if (fiber.tag === ClassComponent) {
                var update = createUpdate(renderExpirationTime, null);
                update.tag = ForceUpdate;
                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime < renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }

              var alternate = fiber.alternate;

              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }

              scheduleWorkOnParentPath(fiber["return"], renderExpirationTime);

              if (list.expirationTime < renderExpirationTime) {
                list.expirationTime = renderExpirationTime;
              }

              break;
            }

            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var _alternate = fiber.alternate;

          if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
            _alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber, renderExpirationTime);
          nextFiber = fiber.sibling;
        } else {
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          nextFiber["return"] = fiber;
        } else {
          nextFiber = fiber;

          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              nextFiber = null;
              break;
            }

            var sibling = nextFiber.sibling;

            if (sibling !== null) {
              sibling["return"] = nextFiber["return"];
              nextFiber = sibling;
              break;
            }

            nextFiber = nextFiber["return"];
          }
        }

        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var dependencies = workInProgress.dependencies;

      if (dependencies !== null) {
        var firstContext = dependencies.firstContext;

        if (firstContext !== null) {
          if (dependencies.expirationTime >= renderExpirationTime) {
            markWorkInProgressReceivedUpdate();
          }

          dependencies.firstContext = null;
        }
      }
    }

    function _readContext(context, observedBits) {
      {
        !!isDisallowedContextReadInDEV ? warning$1(false, "Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().") : void 0;
      }

      if (lastContextWithAllBitsObserved === context) {} else if (observedBits === false || observedBits === 0) {} else {
        var resolvedObservedBits = void 0;

        if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          (function () {
            if (!(currentlyRenderingFiber !== null)) {
              throw ReactError(Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."));
            }
          })();

          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            expirationTime: NoWork,
            firstContext: contextItem,
            responders: null
          };
        } else {
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }

      return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    }

    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime, suspenseConfig) {
      var update = {
        expirationTime: expirationTime,
        suspenseConfig: suspenseConfig,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null,
        nextEffect: null
      };
      {
        update.priority = getCurrentPriorityLevel();
      }
      return update;
    }

    function appendUpdateToQueue(queue, update) {
      if (queue.lastUpdate === null) {
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;

      if (alternate === null) {
        queue1 = fiber.updateQueue;
        queue2 = null;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;

        if (queue1 === null) {
          if (queue2 === null) {
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          } else {}
        }
      }

      if (queue2 === null || queue1 === queue2) {
        appendUpdateToQueue(queue1, update);
      } else {
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          appendUpdateToQueue(queue1, update);
          queue2.lastUpdate = update;
        }
      }

      {
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      var workInProgressQueue = workInProgress.updateQueue;

      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      }

      if (workInProgressQueue.lastCapturedUpdate === null) {
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;

      if (current !== null) {
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }

      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;

            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }

              var nextState = _payload.call(instance, prevState, nextProps);

              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }

            return _payload;
          }

        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }

        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;

            if (typeof _payload2 === "function") {
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload2;
            }

            if (partialState === null || partialState === undefined) {
              return prevState;
            }

            return (0, _extends2["default"])({}, prevState, partialState);
          }

        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }

      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;
      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
      {
        currentlyProcessingQueue = queue;
      }
      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork;
      var update = queue.firstUpdate;
      var resultState = newBaseState;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          if (newFirstUpdate === null) {
            newFirstUpdate = update;
            newBaseState = resultState;
          }

          if (newExpirationTime < updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;

          if (_callback !== null) {
            workInProgress.effectTag |= Callback;
            update.nextEffect = null;

            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        }

        update = update.next;
      }

      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;

      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;

        if (_updateExpirationTime < renderExpirationTime) {
          if (newFirstCapturedUpdate === null) {
            newFirstCapturedUpdate = update;

            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          }

          if (newExpirationTime < _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;

          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback;
            update.nextEffect = null;

            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }

        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }

      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }

      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate;
      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;
      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      (function () {
        if (!(typeof callback === "function")) {
          throw ReactError(Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback));
        }
      })();

      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      if (finishedQueue.firstCapturedUpdate !== null) {
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        }

        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      }

      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;
      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;

        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }

        effect = effect.nextEffect;
      }
    }

    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;

    function requestCurrentSuspenseConfig() {
      return ReactCurrentBatchConfig.suspense;
    }

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray;
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
        if (callback === null || typeof callback === "function") {
          return;
        }

        var key = callerName + "_" + callback;

        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function warnOnUndefinedDerivedState(type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || "Component";

          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
          }
        }
      };

      Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function value() {
          (function () {
            {
              throw ReactError(Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."));
            }
          })();
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          getDerivedStateFromProps(nextProps, prevState);
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === undefined ? prevState : (0, _extends2["default"])({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function enqueueSetState(inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = createUpdate(expirationTime, suspenseConfig);
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, "setState");
          }
          update.callback = callback;
        }

        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function enqueueReplaceState(inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = createUpdate(expirationTime, suspenseConfig);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, "replaceState");
          }
          update.callback = callback;
        }

        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function enqueueForceUpdate(inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var suspenseConfig = requestCurrentSuspenseConfig();
        var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
        var update = createUpdate(expirationTime, suspenseConfig);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback(callback, "forceUpdate");
          }
          update.callback = callback;
        }

        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;

      if (typeof instance.shouldComponentUpdate === "function") {
        startPhaseTimer(workInProgress, "shouldComponentUpdate");
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        stopPhaseTimer();
        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component") : void 0;
        }
        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || "Component";
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === "function") {
            warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
          } else {
            warningWithoutStack$1(false, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name) : void 0;
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType ? warningWithoutStack$1(false, "contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name) : void 0;

        if (disableLegacyContext) {
          if (ctor.childContextTypes) {
            warningWithoutStack$1(false, "%s uses the legacy childContextTypes API which is no longer supported. " + "Use React.createContext() instead.", name);
          }

          if (ctor.contextTypes) {
            warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. " + "Use React.createContext() with static contextType instead.", name);
          }
        } else {
          var noInstanceContextTypes = !instance.contextTypes;
          !noInstanceContextTypes ? warningWithoutStack$1(false, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name) : void 0;

          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            warningWithoutStack$1(false, "%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
          }
        }

        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== "function";
        !noComponentShouldUpdate ? warningWithoutStack$1(false, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name) : void 0;

        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
          warningWithoutStack$1(false, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
        }

        var noComponentDidUnmount = typeof instance.componentDidUnmount !== "function";
        !noComponentDidUnmount ? warningWithoutStack$1(false, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== "function";
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, "%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== "function";
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== "function";
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, "%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== "function";
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, "%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== "function";
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, "%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== "function";
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, "%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name) : void 0;
        var _state = instance.state;

        if (_state && ((0, _typeof2["default"])(_state) !== "object" || isArray$1(_state))) {
          warningWithoutStack$1(false, "%s.state: must be set to an object or null", name);
        }

        if (typeof instance.getChildContext === "function") {
          !((0, _typeof2["default"])(ctor.childContextTypes) === "object") ? warningWithoutStack$1(false, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance;
      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if ("contextType" in ctor) {
          var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";

            if (contextType === undefined) {
              addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
            } else if ((0, _typeof2["default"])(contextType) !== "object") {
              addendum = " However, it is set to a " + (0, _typeof2["default"])(contextType) + ".";
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = " Did you accidentally pass the Context.Provider instead?";
            } else if (contextType._context !== undefined) {
              addendum = " Did you accidentally pass the Context.Consumer instead?";
            } else {
              addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            }

            warningWithoutStack$1(false, "%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
          }
        }
      }

      if ((0, _typeof2["default"])(contextType) === "object" && contextType !== null) {
        context = _readContext(contextType);
      } else if (!disableLegacyContext) {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      }

      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          new ctor(props, context);
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName = getComponentName(ctor) || "Component";

          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, "`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
          }
        }

        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = "componentWillMount";
          } else if (typeof instance.UNSAFE_componentWillMount === "function") {
            foundWillMountName = "UNSAFE_componentWillMount";
          }

          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }

          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = "componentWillUpdate";
          } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }

          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || "Component";

            var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";

            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + "%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n" + "The above lifecycles should be removed. Learn more about this warning here:\n" + "https://fb.me/react-async-component-lifecycle-hooks", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
            }
          }
        }
      }

      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, "componentWillMount");
      var oldState = instance.state;

      if (typeof instance.componentWillMount === "function") {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === "function") {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName(workInProgress.type) || "Component");
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, "componentWillReceiveProps");

      if (typeof instance.componentWillReceiveProps === "function") {
        instance.componentWillReceiveProps(newProps, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }

      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || "Component";

          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      var contextType = ctor.contextType;

      if ((0, _typeof2["default"])(contextType) === "object" && contextType !== null) {
        instance.context = _readContext(contextType);
      } else if (disableLegacyContext) {
        instance.context = emptyContextObject;
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }

      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || "Component";

          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, "%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        }
      }
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      }

      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
        callComponentWillMount(workInProgress, instance);
        updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === "function") {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;

      if ((0, _typeof2["default"])(contextType) === "object" && contextType !== null) {
        nextContext = _readContext(contextType);
      } else if (!disableLegacyContext) {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance.componentDidMount === "function") {
          workInProgress.effectTag |= Update;
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          startPhaseTimer(workInProgress, "componentWillMount");

          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidMount === "function") {
          workInProgress.effectTag |= Update;
        }
      } else {
        if (typeof instance.componentDidMount === "function") {
          workInProgress.effectTag |= Update;
        }

        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }

      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }

    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;

      if ((0, _typeof2["default"])(contextType) === "object" && contextType !== null) {
        nextContext = _readContext(contextType);
      } else if (!disableLegacyContext) {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance.componentDidUpdate === "function") {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
          startPhaseTimer(workInProgress, "componentWillUpdate");

          if (typeof instance.componentWillUpdate === "function") {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidUpdate === "function") {
          workInProgress.effectTag |= Update;
        }

        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        if (typeof instance.componentDidUpdate === "function") {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      }

      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefs = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;

    var warnForMissingKey = function warnForMissingKey(child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function warnForMissingKey(child) {
        if (child === null || (0, _typeof2["default"])(child) !== "object") {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        (function () {
          if (!((0, _typeof2["default"])(child._store) === "object")) {
            throw ReactError(Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();

        child._store.validated = true;
        var currentComponentErrorInfo = "Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + getCurrentFiberStackInDev();

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, "Each child in a list should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.");
      };
    }
    var isArray = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== "function" && (0, _typeof2["default"])(mixedRef) !== "object") {
        {
          if (returnFiber.mode & StrictMode || warnAboutStringRefs) {
            var componentName = getComponentName(returnFiber.type) || "Component";

            if (!didWarnAboutStringRefs[componentName]) {
              if (warnAboutStringRefs) {
                warningWithoutStack$1(false, 'Component "%s" contains the string ref "%s". Support for string refs ' + "will be removed in a future major release. We recommend using " + "useRef() or createRef() instead." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-string-ref", componentName, mixedRef, getStackByFiberInDevAndProd(returnFiber));
              } else {
                warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + "String refs are a source of potential bugs and should be avoided. " + "We recommend using useRef() or createRef() instead." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-string-ref", mixedRef, getStackByFiberInDevAndProd(returnFiber));
              }

              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;

            (function () {
              if (!(ownerFiber.tag === ClassComponent)) {
                throw ReactError(Error("Function components cannot have refs. Did you mean to use React.forwardRef()?"));
              }
            })();

            inst = ownerFiber.stateNode;
          }

          (function () {
            if (!inst) {
              throw ReactError(Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue."));
            }
          })();

          var stringRef = "" + mixedRef;

          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === "function" && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }

          var ref = function ref(value) {
            var refs = inst.refs;

            if (refs === emptyRefsObject) {
              refs = inst.refs = {};
            }

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          (function () {
            if (!(typeof mixedRef === "string")) {
              throw ReactError(Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null."));
            }
          })();

          (function () {
            if (!element._owner) {
              throw ReactError(Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information."));
            }
          })();
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== "textarea") {
        var addendum = "";
        {
          addendum = " If you meant to render a collection of children, use an array " + "instead." + getCurrentFiberStackInDev();
        }

        (function () {
          {
            throw ReactError(Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum));
          }
        })();
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning$1(false, "Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
    }

    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          return;
        }

        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }

        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          return lastPlacedIndex;
        }

        var current$$1 = newFiber.alternate;

        if (current$$1 !== null) {
          var oldIndex = current$$1.index;

          if (oldIndex < lastPlacedIndex) {
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            return oldIndex;
          }
        } else {
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        } else {
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing["return"] = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && (current$$1.elementType === element.type || isCompatibleFamilyForHotReloading(current$$1, element))) {
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing["return"] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created["return"] = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        } else {
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing["return"] = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created["return"] = returnFiber;
          return created;
        } else {
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing["return"] = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === "string" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
          created["return"] = returnFiber;
          return created;
        }

        if ((0, _typeof2["default"])(newChild) === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                _created.ref = coerceRef(returnFiber, null, newChild);
                _created["return"] = returnFiber;
                return _created;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                _created2["return"] = returnFiber;
                return _created2;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

            _created3["return"] = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === "function") {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === "string" || typeof newChild === "number") {
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
        }

        if ((0, _typeof2["default"])(newChild) === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === "function") {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === "string" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
        }

        if ((0, _typeof2["default"])(newChild) === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === "function") {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function warnOnInvalidKey(child, knownKeys) {
        {
          if ((0, _typeof2["default"])(child) !== "object" || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== "string") {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning$1(false, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        {
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (_newFiber === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        }

        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                existingChildren["delete"](_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        var iteratorFn = getIteratorFn(newChildrenIterable);

        (function () {
          if (!(typeof iteratorFn === "function")) {
            throw ReactError(Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();

        {
          if (typeof Symbol === "function" && newChildrenIterable[typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag"] === "Generator") {
            !didWarnAboutGenerators ? warning$1(false, "Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.") : void 0;
            didWarnAboutGenerators = true;
          }

          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.") : void 0;
            didWarnAboutMaps = true;
          }

          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);

        (function () {
          if (!(newChildren != null)) {
            throw ReactError(Error("An iterable object provided no iterator."));
          }
        })();

        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        }

        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                existingChildren["delete"](_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing["return"] = returnFiber;
          return existing;
        }

        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created["return"] = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing["return"] = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created["return"] = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4["return"] = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing["return"] = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created["return"] = returnFiber;
        return created;
      }

      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        var isUnkeyedTopLevelFragment = (0, _typeof2["default"])(newChild) === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }

        var isObject = (0, _typeof2["default"])(newChild) === "object" && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === "string" || typeof newChild === "number") {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === "function") {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    break;
                  }
                }
              }

            case FunctionComponent:
              {
                var Component = returnFiber.type;

                (function () {
                  {
                    throw ReactError(Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."));
                  }
                })();
              }
          }
        }

        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      (function () {
        if (!(current$$1 === null || workInProgress.child === current$$1.child)) {
          throw ReactError(Error("Resuming work not yet implemented."));
        }
      })();

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild["return"] = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild["return"] = workInProgress;
      }

      newChild.sibling = null;
    }

    function resetChildFibers(workInProgress, renderExpirationTime) {
      var child = workInProgress.child;

      while (child !== null) {
        resetWorkInProgress(child, renderExpirationTime);
        child = child.sibling;
      }
    }

    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      (function () {
        if (!(c !== NO_CONTEXT)) {
          throw ReactError(Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();

      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance);

      if (context === nextContext) {
        return;
      }

      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);

    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }

    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }

    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }

    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }

    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }

    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }

    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
      var nextState = workInProgress.memoizedState;

      if (nextState !== null) {
        return false;
      }

      var props = workInProgress.memoizedProps;

      if (props.fallback === undefined) {
        return false;
      }

      if (props.unstable_avoidThisFallback !== true) {
        return true;
      }

      if (hasInvisibleParent) {
        return false;
      }

      return true;
    }

    function findFirstSuspended(row) {
      var node = row;

      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;

          if (state !== null) {
            return node;
          }
        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
          var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

          if (didSuspend) {
            return node;
          }
        } else if (node.child !== null) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }

        if (node === row) {
          return null;
        }

        while (node.sibling === null) {
          if (node["return"] === null || node["return"] === row) {
            return null;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }

      return null;
    }

    function createResponderListener(responder, props) {
      var eventResponderListener = {
        responder: responder,
        props: props
      };
      {
        Object.freeze(eventResponderListener);
      }
      return eventResponderListener;
    }

    function createResponderInstance(responder, responderProps, responderState, target, fiber) {
      return {
        fiber: fiber,
        props: responderProps,
        responder: responder,
        rootEventTypes: null,
        state: responderState,
        target: target
      };
    }

    var NoEffect$1 = 0;
    var UnmountSnapshot = 2;
    var UnmountMutation = 4;
    var MountMutation = 8;
    var UnmountLayout = 16;
    var MountLayout = 32;
    var MountPassive = 64;
    var UnmountPassive = 128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    {
      didWarnAboutMismatchedHooksForComponent = new Set();
    }
    var renderExpirationTime$1 = NoWork;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0;
    var didScheduleRenderPhaseUpdate = false;
    var renderPhaseUpdates = null;
    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;

    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }

    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;

          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }

    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
          warning$1(false, "%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, (0, _typeof2["default"])(deps));
        }
      }
    }

    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);

        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);

          if (hookTypesDev !== null) {
            var table = "";
            var secondColumnStart = 30;

            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;

              while (row.length < secondColumnStart) {
                row += " ";
              }

              row += newHookName + "\n";
              table += row;
            }

            warning$1(false, "React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + "For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n" + "   Previous render            Next render\n" + "   ------------------------------------------------------\n" + "%s" + "   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
          }
        }
      }
    }

    function throwInvalidHookError() {
      (function () {
        {
          throw ReactError(Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem."));
        }
      })();
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          return false;
        }
      }

      if (prevDeps === null) {
        {
          warning$1(false, "%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
        }
        return false;
      }

      {
        if (nextDeps.length !== prevDeps.length) {
          warning$1(false, "The final argument passed to %s changed size between renders. The " + "order and size of this array must remain constant.\n\n" + "Previous: %s\n" + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        }
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (is(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
      renderExpirationTime$1 = nextRenderExpirationTime;
      currentlyRenderingFiber$1 = workInProgress;
      nextCurrentHook = current !== null ? current.memoizedState : null;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
      }
      {
        if (nextCurrentHook !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, refOrContext);

      if (didScheduleRenderPhaseUpdate) {
        do {
          didScheduleRenderPhaseUpdate = false;
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          nextCurrentHook = current !== null ? current.memoizedState : null;
          nextWorkInProgressHook = firstWorkInProgressHook;
          currentHook = null;
          workInProgressHook = null;
          componentUpdateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          children = Component(props, refOrContext);
        } while (didScheduleRenderPhaseUpdate);

        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      }

      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      var renderedWork = currentlyRenderingFiber$1;
      renderedWork.memoizedState = firstWorkInProgressHook;
      renderedWork.expirationTime = remainingExpirationTime;
      renderedWork.updateQueue = componentUpdateQueue;
      renderedWork.effectTag |= sideEffectTag;
      {
        renderedWork._debugHookTypes = hookTypesDev;
      }
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderExpirationTime$1 = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0;

      (function () {
        if (!!didRenderTooFewHooks) {
          throw ReactError(Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement."));
        }
      })();

      return children;
    }

    function bailoutHooks(current, workInProgress, expirationTime) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.effectTag &= ~(Passive | Update);

      if (current.expirationTime <= expirationTime) {
        current.expirationTime = NoWork;
      }
    }

    function resetHooks() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      renderExpirationTime$1 = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0;
      didScheduleRenderPhaseUpdate = false;
      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        queue: null,
        baseUpdate: null,
        next: null
      };

      if (workInProgressHook === null) {
        firstWorkInProgressHook = workInProgressHook = hook;
      } else {
        workInProgressHook = workInProgressHook.next = hook;
      }

      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      if (nextWorkInProgressHook !== null) {
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
        nextCurrentHook = currentHook !== null ? currentHook.next : null;
      } else {
        (function () {
          if (!(nextCurrentHook !== null)) {
            throw ReactError(Error("Rendered more hooks than during the previous render."));
          }
        })();

        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          queue: currentHook.queue,
          baseUpdate: currentHook.baseUpdate,
          next: null
        };

        if (workInProgressHook === null) {
          workInProgressHook = firstWorkInProgressHook = newHook;
        } else {
          workInProgressHook = workInProgressHook.next = newHook;
        }

        nextCurrentHook = currentHook.next;
      }

      return workInProgressHook;
    }

    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }

    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }

    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState = void 0;

      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;

      (function () {
        if (!(queue !== null)) {
          throw ReactError(Error("Should have a queue. This is likely a bug in React. Please file an issue."));
        }
      })();

      queue.lastRenderedReducer = reducer;

      if (numberOfReRenders > 0) {
        var _dispatch = queue.dispatch;

        if (renderPhaseUpdates !== null) {
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate !== undefined) {
            renderPhaseUpdates["delete"](queue);
            var newState = hook.memoizedState;
            var update = firstRenderPhaseUpdate;

            do {
              var _action = update.action;
              newState = reducer(newState, _action);
              update = update.next;
            } while (update !== null);

            if (!is(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState;

            if (hook.baseUpdate === queue.last) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
            return [newState, _dispatch];
          }
        }

        return [hook.memoizedState, _dispatch];
      }

      var last = queue.last;
      var baseUpdate = hook.baseUpdate;
      var baseState = hook.baseState;
      var first = void 0;

      if (baseUpdate !== null) {
        if (last !== null) {
          last.next = null;
        }

        first = baseUpdate.next;
      } else {
        first = last !== null ? last.next : null;
      }

      if (first !== null) {
        var _newState = baseState;
        var newBaseState = null;
        var newBaseUpdate = null;
        var prevUpdate = baseUpdate;
        var _update = first;
        var didSkip = false;

        do {
          var updateExpirationTime = _update.expirationTime;

          if (updateExpirationTime < renderExpirationTime$1) {
            if (!didSkip) {
              didSkip = true;
              newBaseUpdate = prevUpdate;
              newBaseState = _newState;
            }

            if (updateExpirationTime > remainingExpirationTime) {
              remainingExpirationTime = updateExpirationTime;
            }
          } else {
            markRenderEventTimeAndConfig(updateExpirationTime, _update.suspenseConfig);

            if (_update.eagerReducer === reducer) {
              _newState = _update.eagerState;
            } else {
              var _action2 = _update.action;
              _newState = reducer(_newState, _action2);
            }
          }

          prevUpdate = _update;
          _update = _update.next;
        } while (_update !== null && _update !== first);

        if (!didSkip) {
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        }

        if (!is(_newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = _newState;
        hook.baseUpdate = newBaseUpdate;
        hook.baseState = newBaseState;
        queue.lastRenderedState = _newState;
      }

      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();

      if (typeof initialState === "function") {
        initialState = initialState();
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    }

    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        next: null
      };

      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var _lastEffect = componentUpdateQueue.lastEffect;

        if (_lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = _lastEffect.next;
          _lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }

      return effect;
    }

    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }

    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }

    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }

    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;

      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(NoEffect$1, create, destroy, nextDeps);
            return;
          }
        }
      }

      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }

    function mountEffect(create, deps) {
      {
        if ("undefined" !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function updateEffect(create, deps) {
      {
        if ("undefined" !== typeof jest) {
          warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        }
      }
      return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if (typeof ref === "function") {
        var refCallback = ref;

        var _inst = create();

        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          !refObject.hasOwnProperty("current") ? warning$1(false, "Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}") : void 0;
        }

        var _inst2 = create();

        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }

    function mountImperativeHandle(ref, create, deps) {
      {
        !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? (0, _typeof2["default"])(create) : "null") : void 0;
      }
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function updateImperativeHandle(ref, create, deps) {
      {
        !(typeof create === "function") ? warning$1(false, "Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create !== null ? (0, _typeof2["default"])(create) : "null") : void 0;
      }
      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function mountDebugValue(value, formatterFn) {}

    var updateDebugValue = mountDebugValue;

    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function dispatchAction(fiber, queue, action) {
      (function () {
        if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
          throw ReactError(Error("Too many re-renders. React limits the number of renders to prevent an infinite loop."));
        }
      })();

      {
        !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().") : void 0;
      }
      var alternate = fiber.alternate;

      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        didScheduleRenderPhaseUpdate = true;
        var update = {
          expirationTime: renderExpirationTime$1,
          suspenseConfig: null,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        {
          update.priority = getCurrentPriorityLevel();
        }

        if (renderPhaseUpdates === null) {
          renderPhaseUpdates = new Map();
        }

        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (firstRenderPhaseUpdate === undefined) {
          renderPhaseUpdates.set(queue, update);
        } else {
          var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

          while (lastRenderPhaseUpdate.next !== null) {
            lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          }

          lastRenderPhaseUpdate.next = update;
        }
      } else {
        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        var currentTime = requestCurrentTime();

        var _suspenseConfig = requestCurrentSuspenseConfig();

        var _expirationTime = computeExpirationForFiber(currentTime, fiber, _suspenseConfig);

        var _update2 = {
          expirationTime: _expirationTime,
          suspenseConfig: _suspenseConfig,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };
        {
          _update2.priority = getCurrentPriorityLevel();
        }
        var _last = queue.last;

        if (_last === null) {
          _update2.next = _update2;
        } else {
          var first = _last.next;

          if (first !== null) {
            _update2.next = first;
          }

          _last.next = _update2;
        }

        queue.last = _update2;

        if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
          var _lastRenderedReducer = queue.lastRenderedReducer;

          if (_lastRenderedReducer !== null) {
            var prevDispatcher = void 0;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }

            try {
              var currentState = queue.lastRenderedState;

              var _eagerState = _lastRenderedReducer(currentState, action);

              _update2.eagerReducer = _lastRenderedReducer;
              _update2.eagerState = _eagerState;

              if (is(_eagerState, currentState)) {
                return;
              }
            } catch (error) {} finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }

        {
          if ("undefined" !== typeof jest) {
            warnIfNotScopedWithMatchingAct(fiber);
            warnIfNotCurrentlyActingUpdatesInDev(fiber);
          }
        }
        scheduleWork(fiber, _expirationTime);
      }
    }

    var ContextOnlyDispatcher = {
      readContext: _readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useResponder: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    {
      var warnInvalidContextAccess = function warnInvalidContextAccess() {
        warning$1(false, "Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
      };

      var warnInvalidHookAccess = function warnInvalidHookAccess() {
        warning$1(false, "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://fb.me/rules-of-hooks");
      };

      HooksDispatcherOnMountInDEV = {
        readContext: function readContext(context, observedBits) {
          return _readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return _readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function useRef(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function useState(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        },
        useResponder: function useResponder(responder, props) {
          currentHookNameInDev = "useResponder";
          mountHookTypesDev();
          return createResponderListener(responder, props);
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function readContext(context, observedBits) {
          return _readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return _readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function useRef(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function useState(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return mountDebugValue(value, formatterFn);
        },
        useResponder: function useResponder(responder, props) {
          currentHookNameInDev = "useResponder";
          updateHookTypesDev();
          return createResponderListener(responder, props);
        }
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function readContext(context, observedBits) {
          return _readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return _readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function useRef(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function useState(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        },
        useResponder: function useResponder(responder, props) {
          currentHookNameInDev = "useResponder";
          updateHookTypesDev();
          return createResponderListener(responder, props);
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function readContext(context, observedBits) {
          warnInvalidContextAccess();
          return _readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return _readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function useRef(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function useState(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        },
        useResponder: function useResponder(responder, props) {
          currentHookNameInDev = "useResponder";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return createResponderListener(responder, props);
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function readContext(context, observedBits) {
          warnInvalidContextAccess();
          return _readContext(context, observedBits);
        },
        useCallback: function useCallback(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function useContext(context, observedBits) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return _readContext(context, observedBits);
        },
        useEffect: function useEffect(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function useImperativeHandle(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function useLayoutEffect(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function useMemo(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function useReducer(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function useRef(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function useState(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function useDebugValue(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        },
        useResponder: function useResponder(responder, props) {
          currentHookNameInDev = "useResponder";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return createResponderListener(responder, props);
        }
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      if (!enableProfilerTimer) {
        return;
      }

      commitTime = now$1();
    }

    function startProfilerTimer(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = now$1();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (!enableProfilerTimer) {
        return;
      }

      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;

        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }

        profilerStartTime = -1;
      }
    }

    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function warnIfHydrating() {
      {
        !!isHydrating ? warning$1(false, "We should not be hydrating here. This is a bug in React. Please file a bug.") : void 0;
      }
    }

    function enterHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var suspenseInstance = fiber.stateNode;
      nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
      popToNextHostParent(fiber);
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;

          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete["return"] = returnFiber;
      childToDelete.effectTag = Deletion;

      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;

                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;

                case SuspenseComponent:
                  didNotFindHydratableContainerSuspenseInstance(parentContainer);
                  break;
              }

              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;

                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;

                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                  break;
              }

              break;
            }

          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);

            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }

            return false;
          }

        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);

            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }

            return false;
          }

        case SuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

              if (suspenseInstance !== null) {
                fiber.tag = DehydratedSuspenseComponent;
                fiber.stateNode = suspenseInstance;
                return true;
              }
            }

            return false;
          }

        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }

      var nextInstance = nextHydratableInstance;

      if (!nextInstance) {
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }

      var firstAttemptedInstance = nextInstance;

      if (!tryHydrate(fiber, nextInstance)) {
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);

        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }

        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }

      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      if (!supportsHydration) {
        (function () {
          {
            throw ReactError(Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
      fiber.updateQueue = updatePayload;

      if (updatePayload !== null) {
        return true;
      }

      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {
      if (!supportsHydration) {
        (function () {
          {
            throw ReactError(Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;

          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function skipPastDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        (function () {
          {
            throw ReactError(Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."));
          }
        })();
      }

      var suspenseInstance = fiber.stateNode;

      (function () {
        if (!suspenseInstance) {
          throw ReactError(Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();

      nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }

    function popToNextHostParent(fiber) {
      var parent = fiber["return"];

      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
        parent = parent["return"];
      }

      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      if (fiber !== hydrationParentFiber) {
        return false;
      }

      if (!isHydrating) {
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type;

      if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;

        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {
      if (!supportsHydration) {
        return;
      }

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutModulePatternComponent = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    var didWarnAboutMaxDuration = void 0;
    var didWarnAboutRevealOrder = void 0;
    var didWarnAboutTailOptions = void 0;
    var didWarnAboutDefaultPropsOnFunctionComponent = void 0;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutMaxDuration = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
      didWarnAboutDefaultPropsOnFunctionComponent = {};
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }

    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref;
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase("render");
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 === null) {
        var type = Component.type;

        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
          }
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current$$1, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
        }

        {
          var innerPropTypes = type.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
        child.ref = workInProgress.ref;
        child["return"] = workInProgress;
        workInProgress.child = child;
        return child;
      }

      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;

        if (_innerPropTypes) {
          checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
        }
      }
      var currentChild = current$$1.child;

      if (updateExpirationTime < renderExpirationTime) {
        var prevProps = currentChild.memoizedProps;
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;

        if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      }

      workInProgress.effectTag |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
      newChild.ref = workInProgress.ref;
      newChild["return"] = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }

    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          var outerMemoType = workInProgress.elementType;

          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
          }

          var outerPropTypes = outerMemoType && outerMemoType.propTypes;

          if (outerPropTypes) {
            checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
          }
        }
      }

      if (current$$1 !== null) {
        var prevProps = current$$1.memoizedProps;

        if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref && workInProgress.type === current$$1.type) {
          didReceiveUpdate = false;

          if (updateExpirationTime < renderExpirationTime) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        }
      }

      return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      if (enableProfilerTimer) {
        workInProgress.effectTag |= Update;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;

      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var context = void 0;

      if (!disableLegacyContext) {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }

      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase("render");
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var instance = workInProgress.stateNode;
      var shouldUpdate = void 0;

      if (instance === null) {
        if (current$$1 !== null) {
          current$$1.alternate = null;
          workInProgress.alternate = null;
          workInProgress.effectTag |= Placement;
        }

        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        shouldUpdate = true;
      } else if (current$$1 === null) {
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }

      var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
      {
        var inst = workInProgress.stateNode;

        if (inst.props !== nextProps) {
          !didWarnAboutReassigningProps ? warning$1(false, "It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || "a component") : void 0;
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      markRef(current$$1, workInProgress);
      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode;
      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;

      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
        nextChildren = null;

        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase("render");
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            instance.render();
          }

          setCurrentPhase(null);
        }
      }

      workInProgress.effectTag |= PerformedWork;

      if (current$$1 !== null && didCaptureError) {
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      workInProgress.memoizedState = instance.state;

      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;

      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        pushTopLevelContextObject(workInProgress, root.context, false);
      }

      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;

      (function () {
        if (!(updateQueue !== null)) {
          throw ReactError(Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();

      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState;
      var nextChildren = nextState.element;

      if (nextChildren === prevChildren) {
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var root = workInProgress.stateNode;

      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        workInProgress.effectTag |= Placement;
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }

      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress);

      if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
        if (enableSchedulerTracing) {
          markSpawnedWork(Never);
        }

        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      return null;
    }

    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
      if (_current !== null) {
        _current.alternate = null;
        workInProgress.alternate = null;
        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      cancelWorkTimer(workInProgress);
      var Component = readLazyComponentType(elementType);
      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      startWorkTimer(workInProgress);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child = void 0;

      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
              workInProgress.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ClassComponent:
          {
            {
              workInProgress.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ForwardRef:
          {
            {
              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime);
            break;
          }

        default:
          {
            var hint = "";
            {
              if (Component !== null && (0, _typeof2["default"])(Component) === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }

            (function () {
              {
                throw ReactError(Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint));
              }
            })();
          }
      }

      return child;
    }

    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
      if (_current !== null) {
        _current.alternate = null;
        workInProgress.alternate = null;
        workInProgress.effectTag |= Placement;
      }

      workInProgress.tag = ClassComponent;
      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }

    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
      if (_current !== null) {
        _current.alternate = null;
        workInProgress.alternate = null;
        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      var context = void 0;

      if (!disableLegacyContext) {
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var value = void 0;
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName = getComponentName(Component) || "Unknown";

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
      }
      workInProgress.effectTag |= PerformedWork;

      if ((0, _typeof2["default"])(value) === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
        {
          var _componentName = getComponentName(Component) || "Unknown";

          if (!didWarnAboutModulePatternComponent[_componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
        workInProgress.tag = ClassComponent;
        resetHooks();
        var hasContext = false;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        workInProgress.tag = FunctionComponent;
        {
          if (disableLegacyContext && Component.contextTypes) {
            warningWithoutStack$1(false, "%s uses the legacy contextTypes API which is no longer supported. " + "Use React.createContext() with React.useContext() instead.", getComponentName(Component) || "Unknown");
          }

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            if (workInProgress.memoizedState !== null) {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderExpirationTime);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }

    function validateFunctionComponentInDev(workInProgress, Component) {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, "%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component") : void 0;
      }

      if (workInProgress.ref !== null) {
        var info = "";
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();

        if (ownerName) {
          info += "\n\nCheck the render method of `" + ownerName + "`.";
        }

        var warningKey = ownerName || workInProgress._debugID || "";
        var debugSource = workInProgress._debugSource;

        if (debugSource) {
          warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
        }

        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;
          warning$1(false, "Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info);
        }
      }

      if (warnAboutDefaultPropsOnFunctionComponents && Component.defaultProps !== undefined) {
        var componentName = getComponentName(Component) || "Unknown";

        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
          warningWithoutStack$1(false, "%s: Support for defaultProps will be removed from function components " + "in a future major release. Use JavaScript default parameters instead.", componentName);
          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
        }
      }

      if (typeof Component.getDerivedStateFromProps === "function") {
        var _componentName2 = getComponentName(Component) || "Unknown";

        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
          warningWithoutStack$1(false, "%s: Function components do not support getDerivedStateFromProps.", _componentName2);
          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
        }
      }

      if ((0, _typeof2["default"])(Component.contextType) === "object" && Component.contextType !== null) {
        var _componentName3 = getComponentName(Component) || "Unknown";

        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
          warningWithoutStack$1(false, "%s: Function components do not support contextType.", _componentName3);
          didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
        }
      }
    }

    var SUSPENDED_MARKER = {};

    function shouldRemainOnFallback(suspenseContext, current$$1, workInProgress) {
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current$$1 === null || current$$1.memoizedState !== null);
    }

    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      var mode = workInProgress.mode;
      var nextProps = workInProgress.pendingProps;
      {
        if (shouldSuspend(workInProgress)) {
          workInProgress.effectTag |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var nextState = null;
      var nextDidTimeout = false;

      if ((workInProgress.effectTag & DidCapture) !== NoEffect || shouldRemainOnFallback(suspenseContext, current$$1, workInProgress)) {
        nextState = SUSPENDED_MARKER;
        nextDidTimeout = true;
        workInProgress.effectTag &= ~DidCapture;
      } else {
        if (current$$1 === null || current$$1.memoizedState !== null) {
          if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }

      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress, suspenseContext);
      {
        if ("maxDuration" in nextProps) {
          if (!didWarnAboutMaxDuration) {
            didWarnAboutMaxDuration = true;
            warning$1(false, "maxDuration has been removed from React. " + "Remove the maxDuration prop.");
          }
        }
      }
      var child = void 0;
      var next = void 0;

      if (current$$1 === null) {
        if (enableSuspenseServerRenderer) {
          if (nextProps.fallback !== undefined) {
            tryToClaimNextHydratableInstance(workInProgress);

            if (workInProgress.tag === DehydratedSuspenseComponent) {
              popSuspenseContext(workInProgress);
              return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
            }
          }
        }

        if (nextDidTimeout) {
          var nextFallbackChildren = nextProps.fallback;
          var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
          primaryChildFragment["return"] = workInProgress;

          if ((workInProgress.mode & BatchedMode) === NoMode) {
            var progressedState = workInProgress.memoizedState;
            var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
            primaryChildFragment.child = progressedPrimaryChild;
            var progressedChild = progressedPrimaryChild;

            while (progressedChild !== null) {
              progressedChild["return"] = primaryChildFragment;
              progressedChild = progressedChild.sibling;
            }
          }

          var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
          fallbackChildFragment["return"] = workInProgress;
          primaryChildFragment.sibling = fallbackChildFragment;
          child = primaryChildFragment;
          next = fallbackChildFragment;
        } else {
          var nextPrimaryChildren = nextProps.children;
          child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
        }
      } else {
        var prevState = current$$1.memoizedState;
        var prevDidTimeout = prevState !== null;

        if (prevDidTimeout) {
          var currentPrimaryChildFragment = current$$1.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

          if (nextDidTimeout) {
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

            _primaryChildFragment["return"] = workInProgress;

            if ((workInProgress.mode & BatchedMode) === NoMode) {
              var _progressedState = workInProgress.memoizedState;

              var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

              if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                _primaryChildFragment.child = _progressedPrimaryChild;
                var _progressedChild = _progressedPrimaryChild;

                while (_progressedChild !== null) {
                  _progressedChild["return"] = _primaryChildFragment;
                  _progressedChild = _progressedChild.sibling;
                }
              }
            }

            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            }

            var _fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);

            _fallbackChildFragment["return"] = workInProgress;
            _primaryChildFragment.sibling = _fallbackChildFragment;
            child = _primaryChildFragment;
            _primaryChildFragment.childExpirationTime = NoWork;
            next = _fallbackChildFragment;
          } else {
            var _nextPrimaryChildren = nextProps.children;
            var currentPrimaryChild = currentPrimaryChildFragment.child;
            var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);
            child = next = primaryChild;
          }
        } else {
          var _currentPrimaryChild = current$$1.child;

          if (nextDidTimeout) {
            var _nextFallbackChildren2 = nextProps.fallback;

            var _primaryChildFragment2 = createFiberFromFragment(null, mode, NoWork, null);

            _primaryChildFragment2["return"] = workInProgress;
            _primaryChildFragment2.child = _currentPrimaryChild;

            if (_currentPrimaryChild !== null) {
              _currentPrimaryChild["return"] = _primaryChildFragment2;
            }

            if ((workInProgress.mode & BatchedMode) === NoMode) {
              var _progressedState2 = workInProgress.memoizedState;

              var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

              _primaryChildFragment2.child = _progressedPrimaryChild2;
              var _progressedChild2 = _progressedPrimaryChild2;

              while (_progressedChild2 !== null) {
                _progressedChild2["return"] = _primaryChildFragment2;
                _progressedChild2 = _progressedChild2.sibling;
              }
            }

            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              var _treeBaseDuration = 0;
              var _hiddenChild = _primaryChildFragment2.child;

              while (_hiddenChild !== null) {
                _treeBaseDuration += _hiddenChild.treeBaseDuration;
                _hiddenChild = _hiddenChild.sibling;
              }

              _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
            }

            var _fallbackChildFragment2 = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);

            _fallbackChildFragment2["return"] = workInProgress;
            _primaryChildFragment2.sibling = _fallbackChildFragment2;
            _fallbackChildFragment2.effectTag |= Placement;
            child = _primaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = NoWork;
            next = _fallbackChildFragment2;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
          }
        }

        workInProgress.stateNode = current$$1.stateNode;
      }

      workInProgress.memoizedState = nextState;
      workInProgress.child = child;
      return next;
    }

    function retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime) {
      current$$1.alternate = null;
      workInProgress.alternate = null;
      var returnFiber = workInProgress["return"];

      (function () {
        if (!(returnFiber !== null)) {
          throw ReactError(Error("Suspense boundaries are never on the root. This is probably a bug in React."));
        }
      })();

      var last = returnFiber.lastEffect;

      if (last !== null) {
        last.nextEffect = current$$1;
        returnFiber.lastEffect = current$$1;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
      }

      current$$1.nextEffect = null;
      current$$1.effectTag = Deletion;
      popSuspenseContext(workInProgress);
      workInProgress.tag = SuspenseComponent;
      workInProgress.stateNode = null;
      workInProgress.memoizedState = null;
      workInProgress.effectTag |= Placement;
      return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
    }

    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
      var suspenseInstance = workInProgress.stateNode;

      if (current$$1 === null) {
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var serverDisplayTime = requestCurrentTime();
          workInProgress.expirationTime = computeAsyncExpiration(serverDisplayTime);
        } else {
          workInProgress.expirationTime = Never;
        }

        return null;
      }

      if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
        workInProgress.child = null;
        return null;
      }

      warnIfHydrating();

      if (isSuspenseInstanceFallback(suspenseInstance)) {
        return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
      }

      var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

      if (didReceiveUpdate || hasContextChanged$$1) {
        return retrySuspenseComponentWithoutHydrating(current$$1, workInProgress, renderExpirationTime);
      } else if (isSuspenseInstancePending(suspenseInstance)) {
        workInProgress.effectTag |= DidCapture;
        workInProgress.child = null;
        registerSuspenseInstanceRetry(suspenseInstance, retryTimedOutBoundary.bind(null, current$$1));
        return null;
      } else {
        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        return workInProgress.child;
      }
    }

    function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
      var node = firstChild;

      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;

          if (state !== null) {
            if (node.expirationTime < renderExpirationTime) {
              node.expirationTime = renderExpirationTime;
            }

            var alternate = node.alternate;

            if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
              alternate.expirationTime = renderExpirationTime;
            }

            scheduleWorkOnParentPath(node["return"], renderExpirationTime);
          }
        } else if (node.child !== null) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }

        if (node === workInProgress) {
          return;
        }

        while (node.sibling === null) {
          if (node["return"] === null || node["return"] === workInProgress) {
            return;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    function findLastContentRow(firstChild) {
      var row = firstChild;
      var lastContentRow = null;

      while (row !== null) {
        var currentRow = row.alternate;

        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }

        row = row.sibling;
      }

      return lastContentRow;
    }

    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;

          if (typeof revealOrder === "string") {
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards":
                {
                  warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }

              case "forward":
              case "backward":
                {
                  warning$1(false, '"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }

              default:
                warning$1(false, '"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            warning$1(false, "%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }

    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== "collapsed" && tailMode !== "hidden") {
            didWarnAboutTailOptions[tailMode] = true;
            warning$1(false, '"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
            didWarnAboutTailOptions[tailMode] = true;
            warning$1(false, '<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }

    function validateSuspenseListNestedChild(childSlot, index) {
      {
        var isArray = Array.isArray(childSlot);
        var isIterable = !isArray && typeof getIteratorFn(childSlot) === "function";

        if (isArray || isIterable) {
          var type = isArray ? "array" : "iterable";
          warning$1(false, "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index, type);
          return false;
        }
      }
      return true;
    }

    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);

            if (typeof iteratorFn === "function") {
              var childrenIterator = iteratorFn.call(children);

              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;

                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }

                  _i++;
                }
              }
            } else {
              warning$1(false, 'A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
            }
          }
        }
      }
    }

    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress.memoizedState;

      if (renderState === null) {
        workInProgress.memoizedState = {
          isBackwards: isBackwards,
          rendering: null,
          last: lastContentRow,
          tail: tail,
          tailExpiration: 0,
          tailMode: tailMode
        };
      } else {
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailExpiration = 0;
        renderState.tailMode = tailMode;
      }
    }

    function updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime) {
      var nextProps = workInProgress.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress.effectTag |= DidCapture;
      } else {
        var didSuspendBefore = current$$1 !== null && (current$$1.effectTag & DidCapture) !== NoEffect;

        if (didSuspendBefore) {
          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }

      pushSuspenseContext(workInProgress, suspenseContext);

      if ((workInProgress.mode & BatchedMode) === NoMode) {
        workInProgress.memoizedState = null;
      } else {
        switch (revealOrder) {
          case "forwards":
            {
              var lastContentRow = findLastContentRow(workInProgress.child);
              var tail = void 0;

              if (lastContentRow === null) {
                tail = workInProgress.child;
                workInProgress.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }

              initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
              break;
            }

          case "backwards":
            {
              var _tail = null;
              var row = workInProgress.child;
              workInProgress.child = null;

              while (row !== null) {
                var currentRow = row.alternate;

                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress.child = row;
                  break;
                }

                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }

              initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
              break;
            }

          case "together":
            {
              initSuspenseListRenderState(workInProgress, false, null, null, undefined);
              break;
            }

          default:
            {
              workInProgress.memoizedState = null;
            }
        }
      }

      return workInProgress.child;
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;

      if (current$$1 === null) {
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
        }
      }
      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);

        if (changedBits === 0) {
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    var hasWarnedAboutUsingContextAsConsumer = false;

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type;
      {
        if (context._context === undefined) {
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              warning$1(false, "Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        !(typeof render === "function") ? warningWithoutStack$1(false, "A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.") : void 0;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);

      var newValue = _readContext(context, newProps.unstable_observedBits);

      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase("render");
        newChildren = render(newValue);
        setCurrentPhase(null);
      }
      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime) {
      var fundamentalImpl = workInProgress.type.impl;

      if (fundamentalImpl.reconcileChildren === false) {
        return null;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }

    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        workInProgress.dependencies = current$$1.dependencies;
      }

      if (enableProfilerTimer) {
        stopProfilerTimerIfRunning(workInProgress);
      }

      var childExpirationTime = workInProgress.childExpirationTime;

      if (childExpirationTime < renderExpirationTime) {
        return null;
      } else {
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    }

    function remountFiber(current$$1, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress["return"];

        if (returnFiber === null) {
          throw new Error("Cannot swap the root fiber.");
        }

        current$$1.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress["return"] = oldWorkInProgress["return"];
        newWorkInProgress.ref = oldWorkInProgress.ref;

        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;

          if (prevSibling === null) {
            throw new Error("Expected parent to have a child.");
          }

          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;

            if (prevSibling === null) {
              throw new Error("Expected to find the previous sibling.");
            }
          }

          prevSibling.sibling = newWorkInProgress;
        }

        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = current$$1;
          returnFiber.lastEffect = current$$1;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
        }

        current$$1.nextEffect = null;
        current$$1.effectTag = Deletion;
        newWorkInProgress.effectTag |= Placement;
        return newWorkInProgress;
      }
    }

    function beginWork$1(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;
      {
        if (workInProgress._debugNeedsRemount && current$$1 !== null) {
          return remountFiber(current$$1, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
        }
      }

      if (current$$1 !== null) {
        var oldProps = current$$1.memoizedProps;
        var newProps = workInProgress.pendingProps;

        if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current$$1.type) {
          didReceiveUpdate = true;
        } else if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false;

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;

            case HostComponent:
              pushHostContext(workInProgress);

              if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
                if (enableSchedulerTracing) {
                  markSpawnedWork(Never);
                }

                workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
                return null;
              }

              break;

            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }

                break;
              }

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }

            case Profiler:
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }

              break;

            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                var didTimeout = state !== null;

                if (didTimeout) {
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }

                break;
              }

            case DehydratedSuspenseComponent:
              {
                if (enableSuspenseServerRenderer) {
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress.effectTag |= DidCapture;
                }

                break;
              }

            case SuspenseListComponent:
              {
                var didSuspendBefore = (current$$1.effectTag & DidCapture) !== NoEffect;
                var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

                if (didSuspendBefore) {
                  if (hasChildWork) {
                    return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
                  }

                  workInProgress.effectTag |= DidCapture;
                }

                var renderState = workInProgress.memoizedState;

                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                }

                pushSuspenseContext(workInProgress, suspenseStackCursor.current);

                if (hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } else {
        didReceiveUpdate = false;
      }

      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            return mountIndeterminateComponent(current$$1, workInProgress, workInProgress.type, renderExpirationTime);
          }

        case LazyComponent:
          {
            var elementType = workInProgress.elementType;
            return mountLazyComponent(current$$1, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
          }

        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }

        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;

            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }

        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

        case HostText:
          return updateHostText(current$$1, workInProgress);

        case SuspenseComponent:
          return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;

            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }

        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);

        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);

        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);

        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps;

            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
          }

        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
          }

        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;

            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

            return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            }

            break;
          }

        case SuspenseListComponent:
          {
            return updateSuspenseListComponent(current$$1, workInProgress, renderExpirationTime);
          }

        case FundamentalComponent:
          {
            if (enableFundamentalAPI) {
              return updateFundamentalComponent$1(current$$1, workInProgress, renderExpirationTime);
            }

            break;
          }
      }

      (function () {
        {
          throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();
    }

    function createFundamentalStateInstance(currentFiber, props, impl, state) {
      return {
        currentFiber: currentFiber,
        impl: impl,
        instance: null,
        prevProps: null,
        props: props,
        state: state
      };
    }

    var emptyObject$1 = {};
    var isArray$2 = Array.isArray;

    function markUpdate(workInProgress) {
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    var _appendAllChildren = void 0;

    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;

    if (supportsMutation) {
      _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
            appendInitialChild(parent, node.stateNode.instance);
          } else if (node.tag === HostPortal) {} else if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node["return"] === null || node["return"] === workInProgress) {
              return;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      };

      updateHostContainer = function updateHostContainer(workInProgress) {};

      updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
        var oldProps = current.memoizedProps;

        if (oldProps === newProps) {
          return;
        }

        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress.updateQueue = updatePayload;

        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };

      updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else if (supportsPersistence) {
      _appendAllChildren = function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {
        var node = workInProgress.child;

        while (node !== null) {
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle && isHidden) {
              var props = node.memoizedProps;
              var type = node.type;
              instance = cloneHiddenInstance(instance, type, props, node);
            }

            appendInitialChild(parent, instance);
          } else if (node.tag === HostText) {
            var _instance = node.stateNode;

            if (needsVisibilityToggle && isHidden) {
              var text = node.memoizedProps;
              _instance = cloneHiddenTextInstance(_instance, text, node);
            }

            appendInitialChild(parent, _instance);
          } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
            var _instance2 = node.stateNode.instance;

            if (needsVisibilityToggle && isHidden) {
              var _props = node.memoizedProps;
              var _type = node.type;
              _instance2 = cloneHiddenInstance(_instance2, _type, _props, node);
            }

            appendInitialChild(parent, _instance2);
          } else if (node.tag === HostPortal) {} else if (node.tag === SuspenseComponent) {
            if ((node.effectTag & Update) !== NoEffect) {
              var newIsHidden = node.memoizedState !== null;

              if (newIsHidden) {
                var primaryChildParent = node.child;

                if (primaryChildParent !== null) {
                  if (primaryChildParent.child !== null) {
                    primaryChildParent.child["return"] = primaryChildParent;

                    _appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                  }

                  var fallbackChildParent = primaryChildParent.sibling;

                  if (fallbackChildParent !== null) {
                    fallbackChildParent["return"] = node;
                    node = fallbackChildParent;
                    continue;
                  }
                }
              }
            }

            if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node["return"] === null || node["return"] === workInProgress) {
              return;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      };

      var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
        var node = workInProgress.child;

        while (node !== null) {
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle && isHidden) {
              var props = node.memoizedProps;
              var type = node.type;
              instance = cloneHiddenInstance(instance, type, props, node);
            }

            appendChildToContainerChildSet(containerChildSet, instance);
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;

            if (needsVisibilityToggle && isHidden) {
              var text = node.memoizedProps;
              _instance3 = cloneHiddenTextInstance(_instance3, text, node);
            }

            appendChildToContainerChildSet(containerChildSet, _instance3);
          } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
            var _instance4 = node.stateNode.instance;

            if (needsVisibilityToggle && isHidden) {
              var _props2 = node.memoizedProps;
              var _type2 = node.type;
              _instance4 = cloneHiddenInstance(_instance4, _type2, _props2, node);
            }

            appendChildToContainerChildSet(containerChildSet, _instance4);
          } else if (node.tag === HostPortal) {} else if (node.tag === SuspenseComponent) {
            if ((node.effectTag & Update) !== NoEffect) {
              var newIsHidden = node.memoizedState !== null;

              if (newIsHidden) {
                var primaryChildParent = node.child;

                if (primaryChildParent !== null) {
                  if (primaryChildParent.child !== null) {
                    primaryChildParent.child["return"] = primaryChildParent;
                    appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                  }

                  var fallbackChildParent = primaryChildParent.sibling;

                  if (fallbackChildParent !== null) {
                    fallbackChildParent["return"] = node;
                    node = fallbackChildParent;
                    continue;
                  }
                }
              }
            }

            if (node.child !== null) {
              node.child["return"] = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node["return"] === null || node["return"] === workInProgress) {
              return;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      };

      updateHostContainer = function updateHostContainer(workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged) {} else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container);
          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
          portalOrRoot.pendingChildren = newChildSet;
          markUpdate(workInProgress);
          finalizeContainerChildren(container, newChildSet);
        }
      };

      updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {
        var currentInstance = current.stateNode;
        var oldProps = current.memoizedProps;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged && oldProps === newProps) {
          workInProgress.stateNode = currentInstance;
          return;
        }

        var recyclableInstance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = null;

        if (oldProps !== newProps) {
          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        }

        if (childrenUnchanged && updatePayload === null) {
          workInProgress.stateNode = currentInstance;
          return;
        }

        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }

        workInProgress.stateNode = newInstance;

        if (childrenUnchanged) {
          markUpdate(workInProgress);
        } else {
          _appendAllChildren(newInstance, workInProgress, false, false);
        }
      };

      updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
          markUpdate(workInProgress);
        }
      };
    } else {
      updateHostContainer = function updateHostContainer(workInProgress) {};

      updateHostComponent$1 = function updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance) {};

      updateHostText$1 = function updateHostText$1(current, workInProgress, oldText, newText) {};
    }

    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      switch (renderState.tailMode) {
        case "hidden":
          {
            var tailNode = renderState.tail;
            var lastTailNode = null;

            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }

              tailNode = tailNode.sibling;
            }

            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }

            break;
          }

        case "collapsed":
          {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;

            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }

              _tailNode = _tailNode.sibling;
            }

            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }

            break;
          }
      }
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          break;

        case LazyComponent:
          break;

        case SimpleMemoComponent:
        case FunctionComponent:
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }

            if (current === null || current.child === null) {
              popHydrationState(workInProgress);
              workInProgress.effectTag &= ~Placement;
            }

            updateHostContainer(workInProgress);
            break;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (enableFlareAPI) {
                var prevListeners = current.memoizedProps.listeners;
                var nextListeners = newProps.listeners;
                var instance = workInProgress.stateNode;

                if (prevListeners !== nextListeners) {
                  updateEventListeners(nextListeners, instance, rootContainerInstance, workInProgress);
                }
              }

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                (function () {
                  if (!(workInProgress.stateNode !== null)) {
                    throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                  }
                })();

                break;
              }

              var currentHostContext = getHostContext();
              var wasHydrated = popHydrationState(workInProgress);

              if (wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                if (enableFlareAPI) {
                  var _instance5 = workInProgress.stateNode;
                  var listeners = newProps.listeners;

                  if (listeners != null) {
                    updateEventListeners(listeners, _instance5, rootContainerInstance, workInProgress);
                  }
                }
              } else {
                var _instance6 = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

                _appendAllChildren(_instance6, workInProgress, false, false);

                if (enableFlareAPI) {
                  var _listeners = newProps.listeners;

                  if (_listeners != null) {
                    updateEventListeners(_listeners, _instance6, rootContainerInstance, workInProgress);
                  }
                }

                if (finalizeInitialChildren(_instance6, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = _instance6;
              }

              if (workInProgress.ref !== null) {
                markRef$1(workInProgress);
              }
            }

            break;
          }

        case HostText:
          {
            var newText = newProps;

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps;
              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                (function () {
                  if (!(workInProgress.stateNode !== null)) {
                    throw ReactError(Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."));
                  }
                })();
              }

              var _rootContainerInstance = getRootHostContainer();

              var _currentHostContext = getHostContext();

              var _wasHydrated = popHydrationState(workInProgress);

              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }

            break;
          }

        case ForwardRef:
          break;

        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var nextState = workInProgress.memoizedState;

            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              workInProgress.expirationTime = renderExpirationTime;
              return workInProgress;
            }

            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = false;

            if (current === null) {
              popHydrationState(workInProgress);
            } else {
              var prevState = current.memoizedState;
              prevDidTimeout = prevState !== null;

              if (!nextDidTimeout && prevState !== null) {
                var currentFallbackChild = current.child.sibling;

                if (currentFallbackChild !== null) {
                  var first = workInProgress.firstEffect;

                  if (first !== null) {
                    workInProgress.firstEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = first;
                  } else {
                    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                    currentFallbackChild.nextEffect = null;
                  }

                  currentFallbackChild.effectTag = Deletion;
                }
              }
            }

            if (nextDidTimeout && !prevDidTimeout) {
              if ((workInProgress.mode & BatchedMode) !== NoMode) {
                var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }

            if (supportsPersistence) {
              if (nextDidTimeout) {
                workInProgress.effectTag |= Update;
              }
            }

            if (supportsMutation) {
              if (nextDidTimeout || prevDidTimeout) {
                workInProgress.effectTag |= Update;
              }
            }

            if (enableSuspenseCallback && workInProgress.updateQueue !== null && workInProgress.memoizedProps.suspenseCallback != null) {
              workInProgress.effectTag |= Update;
            }

            break;
          }

        case Fragment:
          break;

        case Mode:
          break;

        case Profiler:
          break;

        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;

        case ContextProvider:
          popProvider(workInProgress);
          break;

        case ContextConsumer:
          break;

        case MemoComponent:
          break;

        case IncompleteClassComponent:
          {
            var _Component = workInProgress.type;

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              popSuspenseContext(workInProgress);

              if (current === null) {
                var _wasHydrated2 = popHydrationState(workInProgress);

                (function () {
                  if (!_wasHydrated2) {
                    throw ReactError(Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."));
                  }
                })();

                if (enableSchedulerTracing) {
                  markSpawnedWork(Never);
                }

                skipPastDehydratedSuspenseInstance(workInProgress);
              } else {
                resetHydrationState();

                if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                  current.alternate = null;
                  workInProgress.alternate = null;
                  workInProgress.tag = SuspenseComponent;
                  workInProgress.memoizedState = null;
                  workInProgress.stateNode = null;
                }
              }
            }

            break;
          }

        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            var renderState = workInProgress.memoizedState;

            if (renderState === null) {
              break;
            }

            var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
            var renderedTail = renderState.rendering;

            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

                if (!cannotBeSuspended) {
                  var row = workInProgress.child;

                  while (row !== null) {
                    var suspended = findFirstSuspended(row);

                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress.effectTag |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThennables = suspended.updateQueue;

                      if (newThennables !== null) {
                        workInProgress.updateQueue = newThennables;
                        workInProgress.effectTag |= Update;
                      }

                      workInProgress.firstEffect = workInProgress.lastEffect = null;
                      resetChildFibers(workInProgress, renderExpirationTime);
                      pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress.child;
                    }

                    row = row.sibling;
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);

                if (_suspended !== null) {
                  workInProgress.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, true);

                  if (renderState.tail === null && renderState.tailMode === "hidden") {
                    var _newThennables = _suspended.updateQueue;

                    if (_newThennables !== null) {
                      workInProgress.updateQueue = _newThennables;
                      workInProgress.effectTag |= Update;
                    }

                    var lastEffect = workInProgress.lastEffect = renderState.lastEffect;

                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    }

                    return null;
                  }
                } else if (now() > renderState.tailExpiration && renderExpirationTime > Never) {
                  workInProgress.effectTag |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  var nextPriority = renderExpirationTime - 1;
                  workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

                  if (enableSchedulerTracing) {
                    markSpawnedWork(nextPriority);
                  }
                }
              }

              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress.child;
                workInProgress.child = renderedTail;
              } else {
                var previousSibling = renderState.last;

                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress.child = renderedTail;
                }

                renderState.last = renderedTail;
              }
            }

            if (renderState.tail !== null) {
              if (renderState.tailExpiration === 0) {
                var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
              }

              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.lastEffect = workInProgress.lastEffect;
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;

              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }

              pushSuspenseContext(workInProgress, suspenseContext);
              return next;
            }

            break;
          }

        case FundamentalComponent:
          {
            if (enableFundamentalAPI) {
              var fundamentalImpl = workInProgress.type.impl;
              var fundamentalInstance = workInProgress.stateNode;

              if (fundamentalInstance === null) {
                var getInitialState = fundamentalImpl.getInitialState;
                var fundamentalState = void 0;

                if (getInitialState !== undefined) {
                  fundamentalState = getInitialState(newProps);
                }

                fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(workInProgress, newProps, fundamentalImpl, fundamentalState || {});

                var _instance7 = getFundamentalComponentInstance(fundamentalInstance);

                fundamentalInstance.instance = _instance7;

                if (fundamentalImpl.reconcileChildren === false) {
                  return null;
                }

                _appendAllChildren(_instance7, workInProgress, false, false);

                mountFundamentalComponent(fundamentalInstance);
              } else {
                var prevProps = fundamentalInstance.props;
                fundamentalInstance.prevProps = prevProps;
                fundamentalInstance.props = newProps;
                fundamentalInstance.currentFiber = workInProgress;

                if (supportsPersistence) {
                  var _instance8 = cloneFundamentalInstance(fundamentalInstance);

                  fundamentalInstance.instance = _instance8;

                  _appendAllChildren(_instance8, workInProgress, false, false);
                }

                var shouldUpdate = shouldUpdateFundamentalComponent(fundamentalInstance);

                if (shouldUpdate) {
                  markUpdate(workInProgress);
                }
              }
            }

            break;
          }

        default:
          (function () {
            {
              throw ReactError(Error("Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue."));
            }
          })();

      }

      return null;
    }

    function mountEventResponder(responder, responderProps, instance, rootContainerInstance, fiber, respondersMap) {
      var responderState = emptyObject$1;
      var getInitialState = responder.getInitialState;

      if (getInitialState !== null) {
        responderState = getInitialState(responderProps);
      }

      var responderInstance = createResponderInstance(responder, responderProps, responderState, instance, fiber);
      mountResponderInstance(responder, responderInstance, responderProps, responderState, instance, rootContainerInstance);
      respondersMap.set(responder, responderInstance);
    }

    function updateEventListener(listener, fiber, visistedResponders, respondersMap, instance, rootContainerInstance) {
      var responder = void 0;
      var props = void 0;

      if (listener) {
        responder = listener.responder;
        props = listener.props;
      }

      (function () {
        if (!(responder && responder.$$typeof === REACT_RESPONDER_TYPE)) {
          throw ReactError(Error("An invalid value was used as an event listener. Expect one or many event listeners created via React.unstable_useResponer()."));
        }
      })();

      var listenerProps = props;

      if (visistedResponders.has(responder)) {
        {
          warning$1(false, 'Duplicate event responder "%s" found in event listeners. ' + "Event listeners passed to elements cannot use the same event responder more than once.", responder.displayName);
        }
        return;
      }

      visistedResponders.add(responder);
      var responderInstance = respondersMap.get(responder);

      if (responderInstance === undefined) {
        mountEventResponder(responder, listenerProps, instance, rootContainerInstance, fiber, respondersMap);
      } else {
        responderInstance.props = listenerProps;
        responderInstance.fiber = fiber;
      }
    }

    function updateEventListeners(listeners, instance, rootContainerInstance, fiber) {
      var visistedResponders = new Set();
      var dependencies = fiber.dependencies;

      if (listeners != null) {
        if (dependencies === null) {
          dependencies = fiber.dependencies = {
            expirationTime: NoWork,
            firstContext: null,
            responders: new Map()
          };
        }

        var respondersMap = dependencies.responders;

        if (respondersMap === null) {
          respondersMap = new Map();
        }

        if (isArray$2(listeners)) {
          for (var i = 0, length = listeners.length; i < length; i++) {
            var listener = listeners[i];
            updateEventListener(listener, fiber, visistedResponders, respondersMap, instance, rootContainerInstance);
          }
        } else {
          updateEventListener(listeners, fiber, visistedResponders, respondersMap, instance, rootContainerInstance);
        }
      }

      if (dependencies !== null) {
        var _respondersMap = dependencies.responders;

        if (_respondersMap !== null) {
          var mountedResponders = Array.from(_respondersMap.keys());

          for (var _i = 0, _length = mountedResponders.length; _i < _length; _i++) {
            var mountedResponder = mountedResponders[_i];

            if (!visistedResponders.has(mountedResponder)) {
              var responderInstance = _respondersMap.get(mountedResponder);

              unmountResponderInstance(responderInstance);

              _respondersMap["delete"](mountedResponder);
            }
          }
        }
      }
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;

            (function () {
              if (!((_effectTag & DidCapture) === NoEffect)) {
                throw ReactError(Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue."));
              }
            })();

            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            return null;
          }

        case SuspenseComponent:
          {
            popSuspenseContext(workInProgress);
            var _effectTag2 = workInProgress.effectTag;

            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              popSuspenseContext(workInProgress);

              if (workInProgress.alternate === null) {} else {
                resetHydrationState();
              }

              var _effectTag3 = workInProgress.effectTag;

              if (_effectTag3 & ShouldCapture) {
                workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
                return workInProgress;
              }
            }

            return null;
          }

        case SuspenseListComponent:
          {
            popSuspenseContext(workInProgress);
            return null;
          }

        case HostPortal:
          popHostContainer(workInProgress);
          return null;

        case ContextProvider:
          popProvider(workInProgress);
          return null;

        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }

        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }

        case HostPortal:
          popHostContainer(interruptedWork);
          break;

        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;

        case DehydratedSuspenseComponent:
          if (enableSuspenseServerRenderer) {
            popSuspenseContext(interruptedWork);
          }

          break;

        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;

        case ContextProvider:
          popProvider(interruptedWork);
          break;

        default:
          break;
      }
    }

    function createCapturedValue(value, source) {
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    (function () {
      if (!(typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog === "function")) {
        throw ReactError(Error("Expected ReactFiberErrorDialog.showErrorDialog to be a function."));
      }
    })();

    function showErrorDialog(capturedError) {
      return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);
    }

    function logCapturedError(capturedError) {
      var logError = showErrorDialog(capturedError);

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry;

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            return;
          }

          console.error(error);
        }

        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
        var errorBoundaryMessage = void 0;

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          } else {
            errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
          }
        } else {
          errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\n" + "Visit https://fb.me/react-error-boundaries to learn more about error boundaries.";
        }

        var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
        console.error(combinedMessage);
      }
    }

    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet$1 = typeof WeakSet === "function" ? WeakSet : Set;

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;

      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : "",
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current$$1, instance) {
      startPhaseTimer(current$$1, "componentWillUnmount");
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    };

    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;

      if (ref !== null) {
        if (typeof ref === "function") {
          {
            invokeGuardedCallback(null, ref, null, null);

            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function safelyCallDestroy(current$$1, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);

        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current$$1, error);
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }

        case ClassComponent:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }

            return;
          }

        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          return;

        default:
          {
            (function () {
              {
                throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();
          }
      }
    }

    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;

        do {
          if ((effect.tag & unmountTag) !== NoEffect$1) {
            var destroy = effect.destroy;
            effect.destroy = undefined;

            if (destroy !== undefined) {
              destroy();
            }
          }

          if ((effect.tag & mountTag) !== NoEffect$1) {
            var create = effect.create;
            effect.destroy = create();
            {
              var _destroy = effect.destroy;

              if (_destroy !== undefined && typeof _destroy !== "function") {
                var addendum = void 0;

                if (_destroy === null) {
                  addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                } else if (typeof _destroy.then === "function") {
                  addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + "useEffect(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                } else {
                  addendum = " You returned: " + _destroy;
                }

                warningWithoutStack$1(false, "An effect function must not return anything besides a function, " + "which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
              }
            }
          }

          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }

    function commitPassiveHookEffects(finishedWork) {
      if ((finishedWork.effectTag & Passive) !== NoEffect) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            {
              commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
              commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
              break;
            }

          default:
            break;
        }
      }
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }

        case ClassComponent:
          {
            var instance = finishedWork.stateNode;

            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, "componentDidMount");
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, "componentDidUpdate");
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }

            var updateQueue = finishedWork.updateQueue;

            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance.props === finishedWork.memoizedProps) ? warning$1(false, "Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                  !(instance.state === finishedWork.memoizedState) ? warning$1(false, "Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentName(finishedWork.type) || "instance") : void 0;
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }

            return;
          }

        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;

            if (_updateQueue !== null) {
              var _instance = null;

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;

                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }

            return;
          }

        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode;

            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
            }

            return;
          }

        case HostText:
          {
            return;
          }

        case HostPortal:
          {
            return;
          }

        case Profiler:
          {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;

              if (typeof onRender === "function") {
                if (enableSchedulerTracing) {
                  onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                } else {
                  onRender(finishedWork.memoizedProps.id, current$$1 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
                }
              }
            }

            return;
          }

        case SuspenseComponent:
        case SuspenseListComponent:
        case IncompleteClassComponent:
        case FundamentalComponent:
          return;

        default:
          {
            (function () {
              {
                throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();
          }
      }
    }

    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      if (supportsMutation) {
        var node = finishedWork;

        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
            var fallbackChildFragment = node.child.sibling;
            fallbackChildFragment["return"] = node;
            node = fallbackChildFragment;
            continue;
          } else if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }

          if (node === finishedWork) {
            return;
          }

          while (node.sibling === null) {
            if (node["return"] === null || node["return"] === finishedWork) {
              return;
            }

            node = node["return"];
          }

          node.sibling["return"] = node["return"];
          node = node.sibling;
        }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;

      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;

        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;

          default:
            instanceToUse = instance;
        }

        if (typeof ref === "function") {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty("current")) {
              warningWithoutStack$1(false, "Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;

      if (currentRef !== null) {
        if (typeof currentRef === "function") {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    }

    function commitUnmount(current$$1, renderPriorityLevel) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            var updateQueue = current$$1.updateQueue;

            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                runWithPriority(priorityLevel, function () {
                  var effect = firstEffect;

                  do {
                    var destroy = effect.destroy;

                    if (destroy !== undefined) {
                      safelyCallDestroy(current$$1, destroy);
                    }

                    effect = effect.next;
                  } while (effect !== firstEffect);
                });
              }
            }

            break;
          }

        case ClassComponent:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;

            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(current$$1, instance);
            }

            return;
          }

        case HostComponent:
          {
            if (enableFlareAPI) {
              var dependencies = current$$1.dependencies;

              if (dependencies !== null) {
                var respondersMap = dependencies.responders;

                if (respondersMap !== null) {
                  var responderInstances = Array.from(respondersMap.values());

                  for (var i = 0, length = responderInstances.length; i < length; i++) {
                    var responderInstance = responderInstances[i];
                    unmountResponderInstance(responderInstance);
                  }

                  dependencies.responders = null;
                }
              }
            }

            safelyDetachRef(current$$1);
            return;
          }

        case HostPortal:
          {
            if (supportsMutation) {
              unmountHostComponents(current$$1, renderPriorityLevel);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }

            return;
          }

        case FundamentalComponent:
          {
            if (enableFundamentalAPI) {
              var fundamentalInstance = current$$1.stateNode;

              if (fundamentalInstance !== null) {
                unmountFundamentalComponent(fundamentalInstance);
                current$$1.stateNode = null;
              }
            }
          }
      }
    }

    function commitNestedUnmounts(root, renderPriorityLevel) {
      var node = root;

      while (true) {
        commitUnmount(node, renderPriorityLevel);

        if (node.child !== null && (!supportsMutation || node.tag !== HostPortal)) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }

        if (node === root) {
          return;
        }

        while (node.sibling === null) {
          if (node["return"] === null || node["return"] === root) {
            return;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      var alternate = current$$1.alternate;
      current$$1["return"] = null;
      current$$1.child = null;
      current$$1.memoizedState = null;
      current$$1.updateQueue = null;
      current$$1.dependencies = null;
      current$$1.alternate = null;
      current$$1.firstEffect = null;
      current$$1.lastEffect = null;
      current$$1.pendingProps = null;
      current$$1.memoizedProps = null;

      if (alternate !== null) {
        detachFiber(alternate);
      }
    }

    function emptyPortalContainer(current$$1) {
      if (!supportsPersistence) {
        return;
      }

      var portal = current$$1.stateNode;
      var containerInfo = portal.containerInfo;
      var emptyChildSet = createContainerChildSet(containerInfo);
      replaceContainerChildren(containerInfo, emptyChildSet);
    }

    function commitContainer(finishedWork) {
      if (!supportsPersistence) {
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
        case HostComponent:
        case HostText:
        case FundamentalComponent:
          {
            return;
          }

        case HostRoot:
        case HostPortal:
          {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo,
                _pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, _pendingChildren);
            return;
          }

        default:
          {
            (function () {
              {
                throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();
          }
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber["return"];

      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }

        parent = parent["return"];
      }

      (function () {
        {
          throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      var node = fiber;

      siblings: while (true) {
        while (node.sibling === null) {
          if (node["return"] === null || isHostParent(node["return"])) {
            return null;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;

        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
          if (node.effectTag & Placement) {
            continue siblings;
          }

          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child["return"] = node;
            node = node.child;
          }
        }

        if (!(node.effectTag & Placement)) {
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {
      if (!supportsMutation) {
        return;
      }

      var parentFiber = getHostParentFiber(finishedWork);
      var parent = void 0;
      var isContainer = void 0;
      var parentStateNode = parentFiber.stateNode;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentStateNode;
          isContainer = false;
          break;

        case HostRoot:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;

        case HostPortal:
          parent = parentStateNode.containerInfo;
          isContainer = true;
          break;

        case FundamentalComponent:
          if (enableFundamentalAPI) {
            parent = parentStateNode.instance;
            isContainer = false;
          }

        default:
          (function () {
            {
              throw ReactError(Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."));
            }
          })();

      }

      if (parentFiber.effectTag & ContentReset) {
        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork);
      var node = finishedWork;

      while (true) {
        var isHost = node.tag === HostComponent || node.tag === HostText;

        if (isHost || enableFundamentalAPI && node.tag === FundamentalComponent) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance;

          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              insertBefore(parent, stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, stateNode);
            } else {
              appendChild(parent, stateNode);
            }
          }
        } else if (node.tag === HostPortal) {} else if (node.child !== null) {
          node.child["return"] = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node["return"] === null || node["return"] === finishedWork) {
            return;
          }

          node = node["return"];
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1, renderPriorityLevel) {
      var node = current$$1;
      var currentParentIsValid = false;
      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node["return"];

          findParent: while (true) {
            (function () {
              if (!(parent !== null)) {
                throw ReactError(Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();

            var parentStateNode = parent.stateNode;

            switch (parent.tag) {
              case HostComponent:
                currentParent = parentStateNode;
                currentParentIsContainer = false;
                break findParent;

              case HostRoot:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case HostPortal:
                currentParent = parentStateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case FundamentalComponent:
                if (enableFundamentalAPI) {
                  currentParent = parentStateNode.instance;
                  currentParentIsContainer = false;
                }

            }

            parent = parent["return"];
          }

          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node, renderPriorityLevel);

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          }
        } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {
          var fundamentalNode = node.stateNode.instance;
          commitNestedUnmounts(node, renderPriorityLevel);

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, fundamentalNode);
          } else {
            removeChild(currentParent, fundamentalNode);
          }
        } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
          if (currentParentIsContainer) {
            clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
          } else {
            clearSuspenseBoundary(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true;
            node.child["return"] = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node, renderPriorityLevel);

          if (node.child !== null) {
            node.child["return"] = node;
            node = node.child;
            continue;
          }
        }

        if (node === current$$1) {
          return;
        }

        while (node.sibling === null) {
          if (node["return"] === null || node["return"] === current$$1) {
            return;
          }

          node = node["return"];

          if (node.tag === HostPortal) {
            currentParentIsValid = false;
          }
        }

        node.sibling["return"] = node["return"];
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1, renderPriorityLevel) {
      if (supportsMutation) {
        unmountHostComponents(current$$1, renderPriorityLevel);
      } else {
        commitNestedUnmounts(current$$1, renderPriorityLevel);
      }

      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {
      if (!supportsMutation) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
            {
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }

          case Profiler:
            {
              return;
            }

          case SuspenseComponent:
            {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }

          case SuspenseListComponent:
            {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
        }

        commitContainer(finishedWork);
        return;
      }

      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }

        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            var instance = finishedWork.stateNode;

            if (instance != null) {
              var newProps = finishedWork.memoizedProps;
              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type;
              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }

            return;
          }

        case HostText:
          {
            (function () {
              if (!(finishedWork.stateNode !== null)) {
                throw ReactError(Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();

            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps;
            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }

        case HostRoot:
          {
            return;
          }

        case Profiler:
          {
            return;
          }

        case SuspenseComponent:
          {
            commitSuspenseComponent(finishedWork);
            attachSuspenseRetryListeners(finishedWork);
            return;
          }

        case SuspenseListComponent:
          {
            attachSuspenseRetryListeners(finishedWork);
            return;
          }

        case IncompleteClassComponent:
          {
            return;
          }

        case FundamentalComponent:
          {
            if (enableFundamentalAPI) {
              var fundamentalInstance = finishedWork.stateNode;
              updateFundamentalComponent(fundamentalInstance);
            }

            return;
          }

        default:
          {
            (function () {
              {
                throw ReactError(Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."));
              }
            })();
          }
      }
    }

    function commitSuspenseComponent(finishedWork) {
      var newState = finishedWork.memoizedState;
      var newDidTimeout = void 0;
      var primaryChildParent = finishedWork;

      if (newState === null) {
        newDidTimeout = false;
      } else {
        newDidTimeout = true;
        primaryChildParent = finishedWork.child;
        markCommitTimeOfFallback();
      }

      if (supportsMutation && primaryChildParent !== null) {
        hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
      }

      if (enableSuspenseCallback && newState !== null) {
        var suspenseCallback = finishedWork.memoizedProps.suspenseCallback;

        if (typeof suspenseCallback === "function") {
          var thenables = finishedWork.updateQueue;

          if (thenables !== null) {
            suspenseCallback(new Set(thenables));
          }
        } else {
          if (suspenseCallback !== undefined) {
            warning$1(false, "Unexpected type for suspenseCallback.");
          }
        }
      }
    }

    function attachSuspenseRetryListeners(finishedWork) {
      var thenables = finishedWork.updateQueue;

      if (thenables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;

        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
        }

        thenables.forEach(function (thenable) {
          var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

          if (!retryCache.has(thenable)) {
            if (enableSchedulerTracing) {
              retry = tracing.unstable_wrap(retry);
            }

            retryCache.add(thenable);
            thenable.then(retry, retry);
          }
        });
      }
    }

    function commitResetTextContent(current$$1) {
      if (!supportsMutation) {
        return;
      }

      resetTextContent(current$$1.stateNode);
    }

    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime, null);
      update.tag = CaptureUpdate;
      update.payload = {
        element: null
      };
      var error = errorInfo.value;

      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };

      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime, null);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if (typeof getDerivedStateFromError === "function") {
        var error = errorInfo.value;

        update.payload = function () {
          logError(fiber, errorInfo);
          return getDerivedStateFromError(error);
        };
      }

      var inst = fiber.stateNode;

      if (inst !== null && typeof inst.componentDidCatch === "function") {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }

          if (typeof getDerivedStateFromError !== "function") {
            markLegacyErrorBoundaryAsFailed(this);
            logError(fiber, errorInfo);
          }

          var error = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ""
          });
          {
            if (typeof getDerivedStateFromError !== "function") {
              !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, "%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown") : void 0;
            }
          }
        };
      } else {
        update.callback = function () {
          markFailedErrorBoundaryForHotReloading(fiber);
        };
      }

      return update;
    }

    function attachPingListener(root, renderExpirationTime, thenable) {
      var pingCache = root.pingCache;
      var threadIDs = void 0;

      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        threadIDs = new Set();
        pingCache.set(thenable, threadIDs);
      } else {
        threadIDs = pingCache.get(thenable);

        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        }
      }

      if (!threadIDs.has(renderExpirationTime)) {
        threadIDs.add(renderExpirationTime);
        var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);

        if (enableSchedulerTracing) {
          ping = tracing.unstable_wrap(ping);
        }

        thenable.then(ping, ping);
      }
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      sourceFiber.effectTag |= Incomplete;
      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (value !== null && (0, _typeof2["default"])(value) === "object" && typeof value.then === "function") {
        var thenable = value;
        checkForWrongSuspensePriorityInDEV(sourceFiber);
        var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
        var _workInProgress = returnFiber;

        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
            var thenables = _workInProgress.updateQueue;

            if (thenables === null) {
              var updateQueue = new Set();
              updateQueue.add(thenable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              thenables.add(thenable);
            }

            if ((_workInProgress.mode & BatchedMode) === NoMode) {
              _workInProgress.effectTag |= DidCapture;
              sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;

                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(Sync, null);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              }

              sourceFiber.expirationTime = Sync;
              return;
            }

            attachPingListener(root, renderExpirationTime, thenable);
            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
            attachPingListener(root, renderExpirationTime, thenable);
            var retryCache = _workInProgress.memoizedState;

            if (retryCache === null) {
              retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
              var current$$1 = _workInProgress.alternate;

              (function () {
                if (!current$$1) {
                  throw ReactError(Error("A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React."));
                }
              })();

              current$$1.memoizedState = retryCache;
            }

            if (!retryCache.has(thenable)) {
              retryCache.add(thenable);
              var retry = resolveRetryThenable.bind(null, _workInProgress, thenable);

              if (enableSchedulerTracing) {
                retry = tracing.unstable_wrap(retry);
              }

              thenable.then(retry, retry);
            }

            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          }

          _workInProgress = _workInProgress["return"];
        } while (_workInProgress !== null);

        value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n" + "\n" + "Add a <Suspense fallback=...> component higher in the tree to " + "provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
      }

      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;

      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;

              var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }

          case ClassComponent:
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;

            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;

              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }

            break;

          default:
            break;
        }

        workInProgress = workInProgress["return"];
      } while (workInProgress !== null);
    }

    var ceil = Math.ceil;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = 0;
    var BatchedContext = 1;
    var EventContext = 2;
    var DiscreteEventContext = 4;
    var LegacyUnbatchedContext = 8;
    var RenderContext = 16;
    var CommitContext = 32;
    var RootIncomplete = 0;
    var RootErrored = 1;
    var RootSuspended = 2;
    var RootSuspendedWithDelay = 3;
    var RootCompleted = 4;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var renderExpirationTime = NoWork;
    var workInProgressRootExitStatus = RootIncomplete;
    var workInProgressRootLatestProcessedExpirationTime = Sync;
    var workInProgressRootLatestSuspenseTimeout = Sync;
    var workInProgressRootCanSuspendUsingConfig = null;
    var workInProgressRootHasPendingPing = false;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority;
    var pendingPassiveEffectsExpirationTime = NoWork;
    var rootsWithPendingDiscreteUpdates = null;
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var interruptedBy = null;
    var spawnedWorkDuringRender = null;
    var currentEventTime = NoWork;

    function requestCurrentTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        return msToExpirationTime(now());
      }

      if (currentEventTime !== NoWork) {
        return currentEventTime;
      }

      currentEventTime = msToExpirationTime(now());
      return currentEventTime;
    }

    function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
      var mode = fiber.mode;

      if ((mode & BatchedMode) === NoMode) {
        return Sync;
      }

      var priorityLevel = getCurrentPriorityLevel();

      if ((mode & ConcurrentMode) === NoMode) {
        return priorityLevel === ImmediatePriority ? Sync : Batched;
      }

      if ((executionContext & RenderContext) !== NoContext) {
        return renderExpirationTime;
      }

      var expirationTime = void 0;

      if (suspenseConfig !== null) {
        expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
      } else {
        switch (priorityLevel) {
          case ImmediatePriority:
            expirationTime = Sync;
            break;

          case UserBlockingPriority:
            expirationTime = computeInteractiveExpiration(currentTime);
            break;

          case NormalPriority:
          case LowPriority:
            expirationTime = computeAsyncExpiration(currentTime);
            break;

          case IdlePriority:
            expirationTime = Never;
            break;

          default:
            (function () {
              {
                throw ReactError(Error("Expected a valid priority level"));
              }
            })();

        }
      }

      if (workInProgressRoot !== null && expirationTime === renderExpirationTime) {
        expirationTime -= 1;
      }

      return expirationTime;
    }

    function scheduleUpdateOnFiber(fiber, expirationTime) {
      checkForNestedUpdates();
      warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber);
      var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

      if (root === null) {
        warnAboutUpdateOnUnmountedFiberInDEV(fiber);
        return;
      }

      root.pingTime = NoWork;
      checkForInterruption(fiber, expirationTime);
      recordScheduleUpdate();
      var priorityLevel = getCurrentPriorityLevel();

      if (expirationTime === Sync) {
        if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          schedulePendingInteractions(root, expirationTime);
          var callback = renderRoot(root, Sync, true);

          while (callback !== null) {
            callback = callback(true);
          }
        } else {
          scheduleCallbackForRoot(root, ImmediatePriority, Sync);

          if (executionContext === NoContext) {
            flushSyncCallbackQueue();
          }
        }
      } else {
        scheduleCallbackForRoot(root, priorityLevel, expirationTime);
      }

      if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
        if (rootsWithPendingDiscreteUpdates === null) {
          rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
        } else {
          var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

          if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
            rootsWithPendingDiscreteUpdates.set(root, expirationTime);
          }
        }
      }
    }

    var scheduleWork = scheduleUpdateOnFiber;

    function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
      if (fiber.expirationTime < expirationTime) {
        fiber.expirationTime = expirationTime;
      }

      var alternate = fiber.alternate;

      if (alternate !== null && alternate.expirationTime < expirationTime) {
        alternate.expirationTime = expirationTime;
      }

      var node = fiber["return"];
      var root = null;

      if (node === null && fiber.tag === HostRoot) {
        root = fiber.stateNode;
      } else {
        while (node !== null) {
          alternate = node.alternate;

          if (node.childExpirationTime < expirationTime) {
            node.childExpirationTime = expirationTime;

            if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }

          if (node["return"] === null && node.tag === HostRoot) {
            root = node.stateNode;
            break;
          }

          node = node["return"];
        }
      }

      if (root !== null) {
        var firstPendingTime = root.firstPendingTime;

        if (expirationTime > firstPendingTime) {
          root.firstPendingTime = expirationTime;
        }

        var lastPendingTime = root.lastPendingTime;

        if (lastPendingTime === NoWork || expirationTime < lastPendingTime) {
          root.lastPendingTime = expirationTime;
        }
      }

      return root;
    }

    function scheduleCallbackForRoot(root, priorityLevel, expirationTime) {
      var existingCallbackExpirationTime = root.callbackExpirationTime;

      if (existingCallbackExpirationTime < expirationTime) {
        var existingCallbackNode = root.callbackNode;

        if (existingCallbackNode !== null) {
          cancelCallback(existingCallbackNode);
        }

        root.callbackExpirationTime = expirationTime;

        if (expirationTime === Sync) {
          root.callbackNode = scheduleSyncCallback(runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)));
        } else {
          var options = null;

          if (!disableSchedulerTimeoutBasedOnReactExpirationTime && expirationTime !== Never) {
            var timeout = expirationTimeToMs(expirationTime) - now();
            options = {
              timeout: timeout
            };
          }

          root.callbackNode = scheduleCallback(priorityLevel, runRootCallback.bind(null, root, renderRoot.bind(null, root, expirationTime)), options);

          if (enableUserTimingAPI && expirationTime !== Sync && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            startRequestCallbackTimer();
          }
        }
      }

      schedulePendingInteractions(root, expirationTime);
    }

    function runRootCallback(root, callback, isSync) {
      var prevCallbackNode = root.callbackNode;
      var continuation = null;

      try {
        continuation = callback(isSync);

        if (continuation !== null) {
          return runRootCallback.bind(null, root, continuation);
        } else {
          return null;
        }
      } finally {
        if (continuation === null && prevCallbackNode === root.callbackNode) {
          root.callbackNode = null;
          root.callbackExpirationTime = NoWork;
        }
      }
    }

    function flushDiscreteUpdates() {
      if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
        if (true && (executionContext & RenderContext) !== NoContext) {
          warning$1(false, "unstable_flushDiscreteUpdates: Cannot flush updates when React is " + "already rendering.");
        }

        return;
      }

      flushPendingDiscreteUpdates();

      if (!revertPassiveEffectsChange) {
        flushPassiveEffects();
      }
    }

    function resolveLocksOnRoot(root, expirationTime) {
      var firstBatch = root.firstBatch;

      if (firstBatch !== null && firstBatch._defer && firstBatch._expirationTime >= expirationTime) {
        scheduleCallback(NormalPriority, function () {
          firstBatch._onComplete();

          return null;
        });
        return true;
      } else {
        return false;
      }
    }

    function flushPendingDiscreteUpdates() {
      if (rootsWithPendingDiscreteUpdates !== null) {
        var roots = rootsWithPendingDiscreteUpdates;
        rootsWithPendingDiscreteUpdates = null;
        roots.forEach(function (expirationTime, root) {
          scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
        });
        flushSyncCallbackQueue();
      }
    }

    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;

      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;

        if (executionContext === NoContext) {
          flushSyncCallbackQueue();
        }
      }
    }

    function batchedEventUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= EventContext;

      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;

        if (executionContext === NoContext) {
          flushSyncCallbackQueue();
        }
      }
    }

    function discreteUpdates$1(fn, a, b, c) {
      var prevExecutionContext = executionContext;
      executionContext |= DiscreteEventContext;

      try {
        return runWithPriority(UserBlockingPriority, fn.bind(null, a, b, c));
      } finally {
        executionContext = prevExecutionContext;

        if (executionContext === NoContext) {
          flushSyncCallbackQueue();
        }
      }
    }

    function flushSync(fn, a) {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        (function () {
          {
            throw ReactError(Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering."));
          }
        })();
      }

      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;

      try {
        return runWithPriority(ImmediatePriority, fn.bind(null, a));
      } finally {
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue();
      }
    }

    function prepareFreshStack(root, expirationTime) {
      root.finishedWork = null;
      root.finishedExpirationTime = NoWork;
      var timeoutHandle = root.timeoutHandle;

      if (timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        cancelTimeout(timeoutHandle);
      }

      if (workInProgress !== null) {
        var interruptedWork = workInProgress["return"];

        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork["return"];
        }
      }

      workInProgressRoot = root;
      workInProgress = createWorkInProgress(root.current, null, expirationTime);
      renderExpirationTime = expirationTime;
      workInProgressRootExitStatus = RootIncomplete;
      workInProgressRootLatestProcessedExpirationTime = Sync;
      workInProgressRootLatestSuspenseTimeout = Sync;
      workInProgressRootCanSuspendUsingConfig = null;
      workInProgressRootHasPendingPing = false;

      if (enableSchedulerTracing) {
        spawnedWorkDuringRender = null;
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        componentsThatTriggeredHighPriSuspend = null;
      }
    }

    function renderRoot(root, expirationTime, isSync) {
      (function () {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw ReactError(Error("Should not already be working."));
        }
      })();

      if (enableUserTimingAPI && expirationTime !== Sync) {
        var didExpire = isSync;
        stopRequestCallbackTimer(didExpire);
      }

      if (root.firstPendingTime < expirationTime) {
        return null;
      }

      if (isSync && root.finishedExpirationTime === expirationTime) {
        return commitRoot.bind(null, root);
      }

      flushPassiveEffects();

      if (root !== workInProgressRoot || expirationTime !== renderExpirationTime) {
        prepareFreshStack(root, expirationTime);
        startWorkOnPendingInteractions(root, expirationTime);
      } else if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        if (workInProgressRootHasPendingPing) {
          prepareFreshStack(root, expirationTime);
        } else {
          var lastPendingTime = root.lastPendingTime;

          if (lastPendingTime < expirationTime) {
            return renderRoot.bind(null, root, lastPendingTime);
          }
        }
      }

      if (workInProgress !== null) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = ReactCurrentDispatcher.current;

        if (prevDispatcher === null) {
          prevDispatcher = ContextOnlyDispatcher;
        }

        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        var prevInteractions = null;

        if (enableSchedulerTracing) {
          prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
        }

        startWorkLoopTimer(workInProgress);

        if (isSync) {
          if (expirationTime !== Sync) {
            var currentTime = requestCurrentTime();

            if (currentTime < expirationTime) {
              executionContext = prevExecutionContext;
              resetContextDependencies();
              ReactCurrentDispatcher.current = prevDispatcher;

              if (enableSchedulerTracing) {
                tracing.__interactionsRef.current = prevInteractions;
              }

              return renderRoot.bind(null, root, currentTime);
            }
          }
        } else {
          currentEventTime = NoWork;
        }

        do {
          try {
            if (isSync) {
              workLoopSync();
            } else {
              workLoop();
            }

            break;
          } catch (thrownValue) {
            resetContextDependencies();
            resetHooks();
            var sourceFiber = workInProgress;

            if (sourceFiber === null || sourceFiber["return"] === null) {
              prepareFreshStack(root, expirationTime);
              executionContext = prevExecutionContext;
              throw thrownValue;
            }

            if (enableProfilerTimer && sourceFiber.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(sourceFiber, true);
            }

            var returnFiber = sourceFiber["return"];
            throwException(root, returnFiber, sourceFiber, thrownValue, renderExpirationTime);
            workInProgress = completeUnitOfWork(sourceFiber);
          }
        } while (true);

        executionContext = prevExecutionContext;
        resetContextDependencies();
        ReactCurrentDispatcher.current = prevDispatcher;

        if (enableSchedulerTracing) {
          tracing.__interactionsRef.current = prevInteractions;
        }

        if (workInProgress !== null) {
          stopInterruptedWorkLoopTimer();

          if (expirationTime !== Sync) {
            startRequestCallbackTimer();
          }

          return renderRoot.bind(null, root, expirationTime);
        }
      }

      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      var isLocked = resolveLocksOnRoot(root, expirationTime);

      if (isLocked) {
        return null;
      }

      workInProgressRoot = null;

      switch (workInProgressRootExitStatus) {
        case RootIncomplete:
          {
            (function () {
              {
                throw ReactError(Error("Should have a work-in-progress."));
              }
            })();
          }

        case RootErrored:
          {
            var _lastPendingTime = root.lastPendingTime;

            if (_lastPendingTime < expirationTime) {
              return renderRoot.bind(null, root, _lastPendingTime);
            }

            if (!isSync) {
              prepareFreshStack(root, expirationTime);
              scheduleSyncCallback(renderRoot.bind(null, root, expirationTime));
              return null;
            }

            return commitRoot.bind(null, root);
          }

        case RootSuspended:
          {
            flushSuspensePriorityWarningInDEV();
            var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

            if (hasNotProcessedNewUpdates && !isSync && !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();

              if (msUntilTimeout > 10) {
                if (workInProgressRootHasPendingPing) {
                  prepareFreshStack(root, expirationTime);
                  return renderRoot.bind(null, root, expirationTime);
                }

                var _lastPendingTime2 = root.lastPendingTime;

                if (_lastPendingTime2 < expirationTime) {
                  return renderRoot.bind(null, root, _lastPendingTime2);
                }

                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
                return null;
              }
            }

            return commitRoot.bind(null, root);
          }

        case RootSuspendedWithDelay:
          {
            flushSuspensePriorityWarningInDEV();

            if (!isSync && !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current)) {
              if (workInProgressRootHasPendingPing) {
                prepareFreshStack(root, expirationTime);
                return renderRoot.bind(null, root, expirationTime);
              }

              var _lastPendingTime3 = root.lastPendingTime;

              if (_lastPendingTime3 < expirationTime) {
                return renderRoot.bind(null, root, _lastPendingTime3);
              }

              var _msUntilTimeout = void 0;

              if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
              } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                _msUntilTimeout = 0;
              } else {
                var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                var currentTimeMs = now();
                var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                var timeElapsed = currentTimeMs - eventTimeMs;

                if (timeElapsed < 0) {
                  timeElapsed = 0;
                }

                _msUntilTimeout = jnd(timeElapsed) - timeElapsed;

                if (timeUntilExpirationMs < _msUntilTimeout) {
                  _msUntilTimeout = timeUntilExpirationMs;
                }
              }

              if (_msUntilTimeout > 10) {
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
                return null;
              }
            }

            return commitRoot.bind(null, root);
          }

        case RootCompleted:
          {
            if (!isSync && !(true && flushSuspenseFallbacksInTests && IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
              var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

              if (_msUntilTimeout2 > 10) {
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
                return null;
              }
            }

            return commitRoot.bind(null, root);
          }

        default:
          {
            (function () {
              {
                throw ReactError(Error("Unknown root exit status."));
              }
            })();
          }
      }
    }

    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }

    function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
      if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Never) {
        workInProgressRootLatestProcessedExpirationTime = expirationTime;
      }

      if (suspenseConfig !== null) {
        if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Never) {
          workInProgressRootLatestSuspenseTimeout = expirationTime;
          workInProgressRootCanSuspendUsingConfig = suspenseConfig;
        }
      }
    }

    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }

    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
    }

    function renderDidError() {
      if (workInProgressRootExitStatus !== RootCompleted) {
        workInProgressRootExitStatus = RootErrored;
      }
    }

    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootIncomplete;
    }

    function inferTimeFromExpirationTime(expirationTime) {
      var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
      return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
    }

    function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
      var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
      return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
    }

    function workLoopSync() {
      while (workInProgress !== null) {
        workInProgress = performUnitOfWork(workInProgress);
      }
    }

    function workLoop() {
      while (workInProgress !== null && !shouldYield()) {
        workInProgress = performUnitOfWork(workInProgress);
      }
    }

    function performUnitOfWork(unitOfWork) {
      var current$$1 = unitOfWork.alternate;
      startWorkTimer(unitOfWork);
      setCurrentFiber(unitOfWork);
      var next = void 0;

      if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next = beginWork$$1(current$$1, unitOfWork, renderExpirationTime);
      }

      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;

      if (next === null) {
        next = completeUnitOfWork(unitOfWork);
      }

      ReactCurrentOwner$2.current = null;
      return next;
    }

    function completeUnitOfWork(unitOfWork) {
      workInProgress = unitOfWork;

      do {
        var current$$1 = workInProgress.alternate;
        var returnFiber = workInProgress["return"];

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          setCurrentFiber(workInProgress);
          var next = void 0;

          if (!enableProfilerTimer || (workInProgress.mode & ProfileMode) === NoMode) {
            next = completeWork(current$$1, workInProgress, renderExpirationTime);
          } else {
            startProfilerTimer(workInProgress);
            next = completeWork(current$$1, workInProgress, renderExpirationTime);
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
          }

          stopWorkTimer(workInProgress);
          resetCurrentFiber();
          resetChildExpirationTime(workInProgress);

          if (next !== null) {
            return next;
          }

          if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }
        } else {
          var _next = unwindWork(workInProgress, renderExpirationTime);

          if (enableProfilerTimer && (workInProgress.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            var actualDuration = workInProgress.actualDuration;
            var child = workInProgress.child;

            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }

            workInProgress.actualDuration = actualDuration;
          }

          if (_next !== null) {
            stopFailedWorkTimer(workInProgress);
            _next.effectTag &= HostEffectMask;
            return _next;
          }

          stopWorkTimer(workInProgress);

          if (returnFiber !== null) {
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }
        }

        var siblingFiber = workInProgress.sibling;

        if (siblingFiber !== null) {
          return siblingFiber;
        }

        workInProgress = returnFiber;
      } while (workInProgress !== null);

      if (workInProgressRootExitStatus === RootIncomplete) {
        workInProgressRootExitStatus = RootCompleted;
      }

      return null;
    }

    function resetChildExpirationTime(completedWork) {
      if (renderExpirationTime !== Never && completedWork.childExpirationTime === Never) {
        return;
      }

      var newChildExpirationTime = NoWork;

      if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {
        var actualDuration = completedWork.actualDuration;
        var treeBaseDuration = completedWork.selfBaseDuration;
        var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
        var child = completedWork.child;

        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;

          if (childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }

          if (childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }

          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }

          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
        completedWork.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = completedWork.child;

        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;

          if (_childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }

          if (_childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }

          _child = _child.sibling;
        }
      }

      completedWork.childExpirationTime = newChildExpirationTime;
    }

    function commitRoot(root) {
      var renderPriorityLevel = getCurrentPriorityLevel();
      runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));

      if (rootWithPendingPassiveEffects !== null) {
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }

      return null;
    }

    function commitRootImpl(root, renderPriorityLevel) {
      flushPassiveEffects();
      flushRenderPhaseStrictModeWarningsInDEV();

      (function () {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw ReactError(Error("Should not already be working."));
        }
      })();

      var finishedWork = root.finishedWork;
      var expirationTime = root.finishedExpirationTime;

      if (finishedWork === null) {
        return null;
      }

      root.finishedWork = null;
      root.finishedExpirationTime = NoWork;

      (function () {
        if (!(finishedWork !== root.current)) {
          throw ReactError(Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."));
        }
      })();

      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      startCommitTimer();
      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var firstPendingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      root.firstPendingTime = firstPendingTimeBeforeCommit;

      if (firstPendingTimeBeforeCommit < root.lastPendingTime) {
        root.lastPendingTime = firstPendingTimeBeforeCommit;
      }

      if (root === workInProgressRoot) {
        workInProgressRoot = null;
        workInProgress = null;
        renderExpirationTime = NoWork;
      } else {}

      var firstEffect = void 0;

      if (finishedWork.effectTag > PerformedWork) {
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        firstEffect = finishedWork.firstEffect;
      }

      if (firstEffect !== null) {
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = null;

        if (enableSchedulerTracing) {
          prevInteractions = tracing.__interactionsRef.current;
          tracing.__interactionsRef.current = root.memoizedInteractions;
        }

        ReactCurrentOwner$2.current = null;
        startCommitSnapshotEffectsTimer();
        prepareForCommit(root.containerInfo);
        nextEffect = firstEffect;

        do {
          {
            invokeGuardedCallback(null, commitBeforeMutationEffects, null);

            if (hasCaughtError()) {
              (function () {
                if (!(nextEffect !== null)) {
                  throw ReactError(Error("Should be working on an effect."));
                }
              })();

              var error = clearCaughtError();
              captureCommitPhaseError(nextEffect, error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);

        stopCommitSnapshotEffectsTimer();

        if (enableProfilerTimer) {
          recordCommitTime();
        }

        startCommitHostEffectsTimer();
        nextEffect = firstEffect;

        do {
          {
            invokeGuardedCallback(null, commitMutationEffects, null, renderPriorityLevel);

            if (hasCaughtError()) {
              (function () {
                if (!(nextEffect !== null)) {
                  throw ReactError(Error("Should be working on an effect."));
                }
              })();

              var _error = clearCaughtError();

              captureCommitPhaseError(nextEffect, _error);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);

        stopCommitHostEffectsTimer();
        resetAfterCommit(root.containerInfo);
        root.current = finishedWork;
        startCommitLifeCyclesTimer();
        nextEffect = firstEffect;

        do {
          {
            invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

            if (hasCaughtError()) {
              (function () {
                if (!(nextEffect !== null)) {
                  throw ReactError(Error("Should be working on an effect."));
                }
              })();

              var _error2 = clearCaughtError();

              captureCommitPhaseError(nextEffect, _error2);
              nextEffect = nextEffect.nextEffect;
            }
          }
        } while (nextEffect !== null);

        stopCommitLifeCyclesTimer();
        nextEffect = null;
        requestPaint();

        if (enableSchedulerTracing) {
          tracing.__interactionsRef.current = prevInteractions;
        }

        executionContext = prevExecutionContext;
      } else {
        root.current = finishedWork;
        startCommitSnapshotEffectsTimer();
        stopCommitSnapshotEffectsTimer();

        if (enableProfilerTimer) {
          recordCommitTime();
        }

        startCommitHostEffectsTimer();
        stopCommitHostEffectsTimer();
        startCommitLifeCyclesTimer();
        stopCommitLifeCyclesTimer();
      }

      stopCommitTimer();
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

      if (rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root;
        pendingPassiveEffectsExpirationTime = expirationTime;
        pendingPassiveEffectsRenderPriority = renderPriorityLevel;
      } else {
        nextEffect = firstEffect;

        while (nextEffect !== null) {
          var nextNextEffect = nextEffect.nextEffect;
          nextEffect.nextEffect = null;
          nextEffect = nextNextEffect;
        }
      }

      var remainingExpirationTime = root.firstPendingTime;

      if (remainingExpirationTime !== NoWork) {
        var currentTime = requestCurrentTime();
        var priorityLevel = inferPriorityFromExpirationTime(currentTime, remainingExpirationTime);

        if (enableSchedulerTracing) {
          if (spawnedWorkDuringRender !== null) {
            var expirationTimes = spawnedWorkDuringRender;
            spawnedWorkDuringRender = null;

            for (var i = 0; i < expirationTimes.length; i++) {
              scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
            }
          }
        }

        scheduleCallbackForRoot(root, priorityLevel, remainingExpirationTime);
      } else {
        legacyErrorBoundariesThatAlreadyFailed = null;
      }

      if (enableSchedulerTracing) {
        if (!rootDidHavePassiveEffects) {
          finishPendingInteractions(root, expirationTime);
        }
      }

      onCommitRoot(finishedWork.stateNode, expirationTime);

      if (remainingExpirationTime === Sync) {
        if (root === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root;
        }
      } else {
        nestedUpdateCount = 0;
      }

      if (hasUncaughtError) {
        hasUncaughtError = false;
        var _error3 = firstUncaughtError;
        firstUncaughtError = null;
        throw _error3;
      }

      if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
        return null;
      }

      flushSyncCallbackQueue();
      return null;
    }

    function commitBeforeMutationEffects() {
      while (nextEffect !== null) {
        if ((nextEffect.effectTag & Snapshot) !== NoEffect) {
          setCurrentFiber(nextEffect);
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
          resetCurrentFiber();
        }

        nextEffect = nextEffect.nextEffect;
      }
    }

    function commitMutationEffects(renderPriorityLevel) {
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;

          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        }

        var primaryEffectTag = effectTag & (Placement | Update | Deletion);

        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              break;
            }

          case PlacementAndUpdate:
            {
              commitPlacement(nextEffect);
              nextEffect.effectTag &= ~Placement;
              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }

          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }

          case Deletion:
            {
              commitDeletion(nextEffect, renderPriorityLevel);
              break;
            }
        }

        recordEffect();
        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }

    function commitLayoutEffects(root, committedExpirationTime) {
      while (nextEffect !== null) {
        setCurrentFiber(nextEffect);
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(root, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        if (effectTag & Passive) {
          rootDoesHavePassiveEffects = true;
        }

        resetCurrentFiber();
        nextEffect = nextEffect.nextEffect;
      }
    }

    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }

      var root = rootWithPendingPassiveEffects;
      var expirationTime = pendingPassiveEffectsExpirationTime;
      var renderPriorityLevel = pendingPassiveEffectsRenderPriority;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsExpirationTime = NoWork;
      pendingPassiveEffectsRenderPriority = NoPriority;
      var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
      return runWithPriority(priorityLevel, flushPassiveEffectsImpl.bind(null, root, expirationTime));
    }

    function flushPassiveEffectsImpl(root, expirationTime) {
      var prevInteractions = null;

      if (enableSchedulerTracing) {
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      }

      (function () {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
          throw ReactError(Error("Cannot flush passive effects while already rendering."));
        }
      })();

      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      var effect = root.current.firstEffect;

      while (effect !== null) {
        {
          setCurrentFiber(effect);
          invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

          if (hasCaughtError()) {
            (function () {
              if (!(effect !== null)) {
                throw ReactError(Error("Should be working on an effect."));
              }
            })();

            var error = clearCaughtError();
            captureCommitPhaseError(effect, error);
          }

          resetCurrentFiber();
        }
        var nextNextEffect = effect.nextEffect;
        effect.nextEffect = null;
        effect = nextNextEffect;
      }

      if (enableSchedulerTracing) {
        tracing.__interactionsRef.current = prevInteractions;
        finishPendingInteractions(root, expirationTime);
      }

      executionContext = prevExecutionContext;
      flushSyncCallbackQueue();
      nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
      return true;
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function prepareToThrowUncaughtError(error) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error;
      }
    }

    var onUncaughtError = prepareToThrowUncaughtError;

    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      var errorInfo = createCapturedValue(error, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
      enqueueUpdate(rootFiber, update);
      var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

      if (root !== null) {
        scheduleCallbackForRoot(root, ImmediatePriority, Sync);
      }
    }

    function captureCommitPhaseError(sourceFiber, error) {
      if (sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        return;
      }

      var fiber = sourceFiber["return"];

      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance = fiber.stateNode;

          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValue(error, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, Sync);
            enqueueUpdate(fiber, update);
            var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

            if (root !== null) {
              scheduleCallbackForRoot(root, ImmediatePriority, Sync);
            }

            return;
          }
        }

        fiber = fiber["return"];
      }
    }

    function pingSuspendedRoot(root, thenable, suspendedTime) {
      var pingCache = root.pingCache;

      if (pingCache !== null) {
        pingCache["delete"](thenable);
      }

      if (workInProgressRoot === root && renderExpirationTime === suspendedTime) {
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          prepareFreshStack(root, renderExpirationTime);
        } else {
          workInProgressRootHasPendingPing = true;
        }

        return;
      }

      var lastPendingTime = root.lastPendingTime;

      if (lastPendingTime < suspendedTime) {
        return;
      }

      var pingTime = root.pingTime;

      if (pingTime !== NoWork && pingTime < suspendedTime) {
        return;
      }

      root.pingTime = suspendedTime;

      if (root.finishedExpirationTime === suspendedTime) {
        root.finishedExpirationTime = NoWork;
        root.finishedWork = null;
      }

      var currentTime = requestCurrentTime();
      var priorityLevel = inferPriorityFromExpirationTime(currentTime, suspendedTime);
      scheduleCallbackForRoot(root, priorityLevel, suspendedTime);
    }

    function retryTimedOutBoundary(boundaryFiber) {
      var currentTime = requestCurrentTime();
      var suspenseConfig = null;
      var retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
      var priorityLevel = inferPriorityFromExpirationTime(currentTime, retryTime);
      var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

      if (root !== null) {
        scheduleCallbackForRoot(root, priorityLevel, retryTime);
      }
    }

    function resolveRetryThenable(boundaryFiber, thenable) {
      var retryCache = void 0;

      if (enableSuspenseServerRenderer) {
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            break;

          case DehydratedSuspenseComponent:
            retryCache = boundaryFiber.memoizedState;
            break;

          default:
            (function () {
              {
                throw ReactError(Error("Pinged unknown suspense boundary type. This is probably a bug in React."));
              }
            })();

        }
      } else {
        retryCache = boundaryFiber.stateNode;
      }

      if (retryCache !== null) {
        retryCache["delete"](thenable);
      }

      retryTimedOutBoundary(boundaryFiber);
    }

    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }

    function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
      var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

      if (busyMinDurationMs <= 0) {
        return 0;
      }

      var busyDelayMs = suspenseConfig.busyDelayMs | 0;
      var currentTimeMs = now();
      var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
      var timeElapsed = currentTimeMs - eventTimeMs;

      if (timeElapsed <= busyDelayMs) {
        return 0;
      }

      var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
      return msUntilTimeout;
    }

    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;

        (function () {
          {
            throw ReactError(Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."));
          }
        })();
      }

      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          warning$1(false, "Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
        }
      }
    }

    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }

    function stopFinishedWorkLoopTimer() {
      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
    }

    function stopInterruptedWorkLoopTimer() {
      var didCompleteRoot = false;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
    }

    function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
      if (enableUserTimingAPI && workInProgressRoot !== null && updateExpirationTime > renderExpirationTime) {
        interruptedBy = fiberThatReceivedUpdate;
      }
    }

    var didWarnStateUpdateForUnmountedComponent = null;

    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
      {
        var tag = fiber.tag;

        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
          return;
        }

        var componentName = getComponentName(fiber.type) || "ReactComponent";

        if (didWarnStateUpdateForUnmountedComponent !== null) {
          if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
            return;
          }

          didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
        }

        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + "is a no-op, but it indicates a memory leak in your application. To " + "fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
      }
    }

    var beginWork$$1 = void 0;

    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      var dummyFiber = null;

      beginWork$$1 = function beginWork$$1(current$$1, unitOfWork, expirationTime) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

        try {
          return beginWork$1(current$$1, unitOfWork, expirationTime);
        } catch (originalError) {
          if (originalError !== null && (0, _typeof2["default"])(originalError) === "object" && typeof originalError.then === "function") {
            throw originalError;
          }

          resetContextDependencies();
          resetHooks();
          unwindInterruptedWork(unitOfWork);
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

          if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {
            startProfilerTimer(unitOfWork);
          }

          invokeGuardedCallback(null, beginWork$1, null, current$$1, unitOfWork, expirationTime);

          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            throw replayError;
          } else {
            throw originalError;
          }
        }
      };
    } else {
      beginWork$$1 = beginWork$1;
    }

    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInGetChildContext = false;

    function warnAboutInvalidUpdatesOnClassComponentsInDEV(fiber) {
      {
        if (fiber.tag === ClassComponent) {
          switch (phase) {
            case "getChildContext":
              if (didWarnAboutUpdateInGetChildContext) {
                return;
              }

              warningWithoutStack$1(false, "setState(...): Cannot call setState() inside getChildContext()");
              didWarnAboutUpdateInGetChildContext = true;
              break;

            case "render":
              if (didWarnAboutUpdateInRender) {
                return;
              }

              warningWithoutStack$1(false, "Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure function of " + "props and state.");
              didWarnAboutUpdateInRender = true;
              break;
          }
        }
      }
    }

    var IsThisRendererActing = {
      current: false
    };

    function warnIfNotScopedWithMatchingAct(fiber) {
      {
        if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
          warningWithoutStack$1(false, "It looks like you're using the wrong act() around your test interactions.\n" + "Be sure to use the matching version of act() corresponding to your renderer:\n\n" + "// for react-dom:\n" + "import {act} from 'react-dom/test-utils';\n" + "// ...\n" + "act(() => ...);\n\n" + "// for react-test-renderer:\n" + "import TestRenderer from 'react-test-renderer';\n" + "const {act} = TestRenderer;\n" + "// ...\n" + "act(() => ...);" + "%s", getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
      {
        if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          warningWithoutStack$1(false, "An update to %s ran an effect, but was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://fb.me/react-wrap-tests-with-act" + "%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
      {
        if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
          warningWithoutStack$1(false, "An update to %s inside a test was not wrapped in act(...).\n\n" + "When testing, code that causes React state updates should be " + "wrapped into act(...):\n\n" + "act(() => {\n" + "  /* fire events that update state */\n" + "});\n" + "/* assert on the output */\n\n" + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://fb.me/react-wrap-tests-with-act" + "%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
    var didWarnAboutUnmockedScheduler = false;

    function warnIfUnmockedScheduler(fiber) {
      {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
          if (fiber.mode & BatchedMode || fiber.mode & ConcurrentMode) {
            didWarnAboutUnmockedScheduler = true;
            warningWithoutStack$1(false, 'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + "For more info, visit https://fb.me/react-mock-scheduler");
          } else if (warnAboutUnmockedScheduler === true) {
            didWarnAboutUnmockedScheduler = true;
            warningWithoutStack$1(false, 'Starting from React v17, the "scheduler" module will need to be mocked ' + "to guarantee consistent behaviour across tests and browsers. " + "For example, with jest: \n" + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + "For more info, visit https://fb.me/react-mock-scheduler");
          }
        }
      }
    }

    var componentsThatTriggeredHighPriSuspend = null;

    function checkForWrongSuspensePriorityInDEV(sourceFiber) {
      {
        var currentPriorityLevel = getCurrentPriorityLevel();

        if ((sourceFiber.mode & ConcurrentMode) !== NoEffect && (currentPriorityLevel === UserBlockingPriority || currentPriorityLevel === ImmediatePriority)) {
          var workInProgressNode = sourceFiber;

          while (workInProgressNode !== null) {
            var current$$1 = workInProgressNode.alternate;

            if (current$$1 !== null) {
              switch (workInProgressNode.tag) {
                case ClassComponent:
                  var updateQueue = current$$1.updateQueue;

                  if (updateQueue !== null) {
                    var update = updateQueue.firstUpdate;

                    while (update !== null) {
                      var priorityLevel = update.priority;

                      if (priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority) {
                        if (componentsThatTriggeredHighPriSuspend === null) {
                          componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                        } else {
                          componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                        }

                        break;
                      }

                      update = update.next;
                    }
                  }

                  break;

                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  if (workInProgressNode.memoizedState !== null && workInProgressNode.memoizedState.baseUpdate !== null) {
                    var _update = workInProgressNode.memoizedState.baseUpdate;

                    while (_update !== null) {
                      var priority = _update.priority;

                      if (priority === UserBlockingPriority || priority === ImmediatePriority) {
                        if (componentsThatTriggeredHighPriSuspend === null) {
                          componentsThatTriggeredHighPriSuspend = new Set([getComponentName(workInProgressNode.type)]);
                        } else {
                          componentsThatTriggeredHighPriSuspend.add(getComponentName(workInProgressNode.type));
                        }

                        break;
                      }

                      if (_update.next === workInProgressNode.memoizedState.baseUpdate) {
                        break;
                      }

                      _update = _update.next;
                    }
                  }

                  break;

                default:
                  break;
              }
            }

            workInProgressNode = workInProgressNode["return"];
          }
        }
      }
    }

    function flushSuspensePriorityWarningInDEV() {
      {
        if (componentsThatTriggeredHighPriSuspend !== null) {
          var componentNames = [];
          componentsThatTriggeredHighPriSuspend.forEach(function (name) {
            return componentNames.push(name);
          });
          componentsThatTriggeredHighPriSuspend = null;

          if (componentNames.length > 0) {
            warningWithoutStack$1(false, "%s triggered a user-blocking update that suspended." + "\n\n" + "The fix is to split the update into multiple parts: a user-blocking " + "update to provide immediate feedback, and another update that " + "triggers the bulk of the changes." + "\n\n" + "Refer to the documentation for useSuspenseTransition to learn how " + "to implement this pattern.", componentNames.sort().join(", "));
          }
        }
      }
    }

    function computeThreadID(root, expirationTime) {
      return expirationTime * 1000 + root.interactionThreadID;
    }

    function markSpawnedWork(expirationTime) {
      if (!enableSchedulerTracing) {
        return;
      }

      if (spawnedWorkDuringRender === null) {
        spawnedWorkDuringRender = [expirationTime];
      } else {
        spawnedWorkDuringRender.push(expirationTime);
      }
    }

    function scheduleInteractions(root, expirationTime, interactions) {
      if (!enableSchedulerTracing) {
        return;
      }

      if (interactions.size > 0) {
        var pendingInteractionMap = root.pendingInteractionMap;
        var pendingInteractions = pendingInteractionMap.get(expirationTime);

        if (pendingInteractions != null) {
          interactions.forEach(function (interaction) {
            if (!pendingInteractions.has(interaction)) {
              interaction.__count++;
            }

            pendingInteractions.add(interaction);
          });
        } else {
          pendingInteractionMap.set(expirationTime, new Set(interactions));
          interactions.forEach(function (interaction) {
            interaction.__count++;
          });
        }

        var subscriber = tracing.__subscriberRef.current;

        if (subscriber !== null) {
          var threadID = computeThreadID(root, expirationTime);
          subscriber.onWorkScheduled(interactions, threadID);
        }
      }
    }

    function schedulePendingInteractions(root, expirationTime) {
      if (!enableSchedulerTracing) {
        return;
      }

      scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
    }

    function startWorkOnPendingInteractions(root, expirationTime) {
      if (!enableSchedulerTracing) {
        return;
      }

      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        if (scheduledExpirationTime >= expirationTime) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });
      root.memoizedInteractions = interactions;

      if (interactions.size > 0) {
        var subscriber = tracing.__subscriberRef.current;

        if (subscriber !== null) {
          var threadID = computeThreadID(root, expirationTime);

          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            scheduleCallback(ImmediatePriority, function () {
              throw error;
            });
          }
        }
      }
    }

    function finishPendingInteractions(root, committedExpirationTime) {
      if (!enableSchedulerTracing) {
        return;
      }

      var earliestRemainingTimeAfterCommit = root.firstPendingTime;
      var subscriber = void 0;

      try {
        subscriber = tracing.__subscriberRef.current;

        if (subscriber !== null && root.memoizedInteractions.size > 0) {
          var threadID = computeThreadID(root, committedExpirationTime);
          subscriber.onWorkStopped(root.memoizedInteractions, threadID);
        }
      } catch (error) {
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      } finally {
        var pendingInteractionMap = root.pendingInteractionMap;
        pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
          if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
            pendingInteractionMap["delete"](scheduledExpirationTime);
            scheduledInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                try {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                } catch (error) {
                  scheduleCallback(ImmediatePriority, function () {
                    throw error;
                  });
                }
              }
            });
          }
        });
      }
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, "The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://fb.me/react-devtools");
        }
        return true;
      }

      try {
        var rendererID = hook.inject(internals);

        onCommitFiberRoot = function onCommitFiberRoot(root, expirationTime) {
          try {
            var didError = (root.current.effectTag & DidCapture) === DidCapture;

            if (enableProfilerTimer) {
              var currentTime = requestCurrentTime();
              var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
              hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
            } else {
              hook.onCommitFiberRoot(rendererID, root, undefined, didError);
            }
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
            }
          }
        };

        onCommitFiberUnmount = function onCommitFiberUnmount(fiber) {
          try {
            hook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;
              warningWithoutStack$1(false, "React DevTools encountered an error: %s", err);
            }
          }
        };
      } catch (err) {
        {
          warningWithoutStack$1(false, "React DevTools encountered an error: %s.", err);
        }
      }

      return true;
    }

    function onCommitRoot(root, expirationTime) {
      if (typeof onCommitFiberRoot === "function") {
        onCommitFiberRoot(root, expirationTime);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === "function") {
        onCommitFiberUnmount(fiber);
      }
    }

    var hasBadMapPolyfill = void 0;
    {
      hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]);
        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        hasBadMapPolyfill = true;
      }
    }
    var debugCounter = void 0;
    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      this["return"] = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;
      this.alternate = null;

      if (enableProfilerTimer) {
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
          Object.preventExtensions(this);
        }
      }
    }

    var createFiber = function createFiber(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
    }

    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function") {
        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;

        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }

        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }

      return IndeterminateComponent;
    }

    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps;
        workInProgress.effectTag = NoEffect;
        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        if (enableProfilerTimer) {
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }

      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      var currentDependencies = current.dependencies;
      workInProgress.dependencies = currentDependencies === null ? null : {
        expirationTime: currentDependencies.expirationTime,
        firstContext: currentDependencies.firstContext,
        responders: currentDependencies.responders
      };
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      if (enableProfilerTimer) {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      {
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress.type = resolveFunctionForHotReloading(current.type);
            break;

          case ClassComponent:
            workInProgress.type = resolveClassForHotReloading(current.type);
            break;

          case ForwardRef:
            workInProgress.type = resolveForwardRefForHotReloading(current.type);
            break;

          default:
            break;
        }
      }
      return workInProgress;
    }

    function resetWorkInProgress(workInProgress, renderExpirationTime) {
      workInProgress.effectTag &= Placement;
      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;
      var current = workInProgress.alternate;

      if (current === null) {
        workInProgress.childExpirationTime = NoWork;
        workInProgress.expirationTime = renderExpirationTime;
        workInProgress.child = null;
        workInProgress.memoizedProps = null;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.dependencies = null;

        if (enableProfilerTimer) {
          workInProgress.selfBaseDuration = 0;
          workInProgress.treeBaseDuration = 0;
        }
      } else {
        workInProgress.childExpirationTime = current.childExpirationTime;
        workInProgress.expirationTime = current.expirationTime;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
          expirationTime: currentDependencies.expirationTime,
          firstContext: currentDependencies.firstContext,
          responders: currentDependencies.responders
        };

        if (enableProfilerTimer) {
          workInProgress.selfBaseDuration = current.selfBaseDuration;
          workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
      }

      return workInProgress;
    }

    function createHostRootFiber(tag) {
      var mode = void 0;

      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode | BatchedMode | StrictMode;
      } else if (tag === BatchedRoot) {
        mode = BatchedMode | StrictMode;
      } else {
        mode = NoMode;
      }

      if (enableProfilerTimer && isDevToolsPresent) {
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
      var fiber = void 0;
      var fiberTag = IndeterminateComponent;
      var resolvedType = type;

      if (typeof type === "function") {
        if (shouldConstruct(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === "string") {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

          case REACT_CONCURRENT_MODE_TYPE:
            fiberTag = Mode;
            mode |= ConcurrentMode | BatchedMode | StrictMode;
            break;

          case REACT_STRICT_MODE_TYPE:
            fiberTag = Mode;
            mode |= StrictMode;
            break;

          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

          case REACT_SUSPENSE_LIST_TYPE:
            return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

          default:
            {
              if ((0, _typeof2["default"])(type) === "object" && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;

                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;

                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;

                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;

                  case REACT_FUNDAMENTAL_TYPE:
                    if (enableFundamentalAPI) {
                      return createFiberFromFundamental(type, pendingProps, mode, expirationTime, key);
                    }

                    break;
                }
              }

              var info = "";
              {
                if (type === undefined || (0, _typeof2["default"])(type) === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                }

                var ownerName = owner ? getComponentName(owner.type) : null;

                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
              }

              (function () {
                {
                  throw ReactError(Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : (0, _typeof2["default"])(type)) + "." + info));
                }
              })();
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromFundamental(fundamentalComponent, pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(FundamentalComponent, pendingProps, key, mode);
      fiber.elementType = fundamentalComponent;
      fiber.type = fundamentalComponent;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      fiber.type = REACT_SUSPENSE_TYPE;
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      {
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
      }
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      fiber.elementType = "DELETED";
      fiber.type = "DELETED";
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        implementation: portal.implementation
      };
      return fiber;
    }

    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }

      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target["return"] = source["return"];
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;

      if (enableProfilerTimer) {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }

      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }

    function FiberRootNode(containerInfo, tag, hydrate) {
      this.tag = tag;
      this.current = null;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.pingCache = null;
      this.finishedExpirationTime = NoWork;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.hydrate = hydrate;
      this.firstBatch = null;
      this.callbackNode = null;
      this.callbackExpirationTime = NoWork;
      this.firstPendingTime = NoWork;
      this.lastPendingTime = NoWork;
      this.pingTime = NoWork;

      if (enableSchedulerTracing) {
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
      }
    }

    function createFiberRoot(containerInfo, tag, hydrate) {
      var root = new FiberRootNode(containerInfo, tag, hydrate);
      var uninitializedFiber = createHostRootFiber(tag);
      root.current = uninitializedFiber;
      uninitializedFiber.stateNode = root;
      return root;
    }

    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;

        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, suspenseConfig, callback) {
      {
        if (phase === "render" && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(current.type) || "Unknown");
        }
      }
      var update = createUpdate(expirationTime, suspenseConfig);
      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;

      if (callback !== null) {
        !(typeof callback === "function") ? warningWithoutStack$1(false, "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback) : void 0;
        update.callback = callback;
      }

      if (revertPassiveEffectsChange) {
        flushPassiveEffects();
      }

      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);
      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, suspenseConfig, callback) {
      var current$$1 = container.current;
      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current$$1.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }
      var context = getContextForSubtree(parentComponent);

      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, suspenseConfig, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === "function") {
          (function () {
            {
              throw ReactError(Error("Unable to find node on an unmounted component."));
            }
          })();
        } else {
          (function () {
            {
              throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
            }
          })();
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);

        if (fiber === undefined) {
          if (typeof component.render === "function") {
            (function () {
              {
                throw ReactError(Error("Unable to find node on an unmounted component."));
              }
            })();
          } else {
            (function () {
              {
                throw ReactError(Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component)));
              }
            })();
          }
        }

        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || "Component";

          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;

            if (fiber.mode & StrictMode) {
              warningWithoutStack$1(false, "%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-find-node", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            } else {
              warningWithoutStack$1(false, "%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference." + "\n%s" + "\n\nLearn more about using refs safely here:" + "\nhttps://fb.me/react-strict-mode-find-node", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
          }
        }

        return hostFiber.stateNode;
      }
      return findHostInstance(component);
    }

    function createContainer(containerInfo, tag, hydrate) {
      return createFiberRoot(containerInfo, tag, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      {
        if ("undefined" !== typeof jest) {
          warnIfUnmockedScheduler(current$$1);
          warnIfNotScopedWithMatchingAct(current$$1);
        }
      }
      var suspenseConfig = requestCurrentSuspenseConfig();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1, suspenseConfig);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, suspenseConfig, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;

      if (!containerFiber.child) {
        return null;
      }

      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);

        default:
          return containerFiber.child.stateNode;
      }
    }

    var shouldSuspendImpl = function shouldSuspendImpl(fiber) {
      return false;
    };

    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }

    var overrideHookState = null;
    var overrideProps = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    {
      var copyWithSetImpl = function copyWithSetImpl(obj, path, idx, value) {
        if (idx >= path.length) {
          return value;
        }

        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : (0, _extends2["default"])({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
      };

      var copyWithSet = function copyWithSet(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      };

      overrideHookState = function overrideHookState(fiber, id, path, value) {
        var currentHook = fiber.memoizedState;

        while (currentHook !== null && id > 0) {
          currentHook = currentHook.next;
          id--;
        }

        if (currentHook !== null) {
          if (revertPassiveEffectsChange) {
            flushPassiveEffects();
          }

          var newState = copyWithSet(currentHook.memoizedState, path, value);
          currentHook.memoizedState = newState;
          currentHook.baseState = newState;
          fiber.memoizedProps = (0, _extends2["default"])({}, fiber.memoizedProps);
          scheduleWork(fiber, Sync);
        }
      };

      overrideProps = function overrideProps(fiber, path, value) {
        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }

        scheduleWork(fiber, Sync);
      };

      scheduleUpdate = function scheduleUpdate(fiber) {
        if (revertPassiveEffectsChange) {
          flushPassiveEffects();
        }

        scheduleWork(fiber, Sync);
      };

      setSuspenseHandler = function setSuspenseHandler(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }

    function injectIntoDevTools(devToolsConfig) {
      var _findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals((0, _extends2["default"])({}, devToolsConfig, {
        overrideHookState: overrideHookState,
        overrideProps: overrideProps,
        setSuspenseHandler: setSuspenseHandler,
        scheduleUpdate: scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function findFiberByHostInstance(instance) {
          if (!_findFiberByHostInstance) {
            return null;
          }

          return _findFiberByHostInstance(instance);
        },
        findHostInstancesForRefresh: findHostInstancesForRefresh,
        scheduleRefresh: scheduleRefresh,
        scheduleRoot: scheduleRoot,
        setRefreshHandler: setRefreshHandler,
        getCurrentFiber: function getCurrentFiber() {
          return current;
        }
      }));
    }

    function _createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    }

    var ReactVersion = "16.8.6";

    var NativeMethodsMixin = function NativeMethodsMixin(findNodeHandle, findHostInstance) {
      var NativeMethodsMixin = {
        measure: function measure(callback) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          } else {
            ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          }
        },
        measureInWindow: function measureInWindow(callback) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          } else {
            ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          }
        },
        measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            warningWithoutStack$1(false, "Warning: measureLayout on components using NativeMethodsMixin " + "or ReactNative.NativeComponent is not currently supported in Fabric. " + "measureLayout must be called on a native ref. Consider using forwardRef.");
            return;
          } else {
            var relativeNode = void 0;

            if (typeof relativeToNativeNode === "number") {
              relativeNode = relativeToNativeNode;
            } else if (relativeToNativeNode._nativeTag) {
              relativeNode = relativeToNativeNode._nativeTag;
            }

            if (relativeNode == null) {
              warningWithoutStack$1(false, "Warning: ref.measureLayout must be called with a node handle or a ref to a native component.");
              return;
            }

            ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          }
        },
        setNativeProps: function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            warningWithoutStack$1(false, "Warning: setNativeProps is not currently supported in Fabric");
            return;
          }

          {
            if (warnAboutDeprecatedSetNativeProps) {
              warningWithoutStack$1(false, "Warning: Calling ref.setNativeProps(nativeProps) " + "is deprecated and will be removed in a future release. " + "Use the setNativeProps export from the react-native package instead." + "\n\timport {setNativeProps} from 'react-native';\n\tsetNativeProps(ref, nativeProps);\n");
            }
          }
          var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
          var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
          {
            warnForStyleProps(nativeProps, viewConfig.validAttributes);
          }
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            ReactNativePrivateInterface.UIManager.updateView(nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        },
        focus: function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        },
        blur: function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        }
      };
      {
        var NativeMethodsMixin_DEV = NativeMethodsMixin;

        (function () {
          if (!(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps && !NativeMethodsMixin_DEV.UNSAFE_componentWillMount && !NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps)) {
            throw ReactError(Error("Do not override existing functions."));
          }
        })();

        NativeMethodsMixin_DEV.componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillMount = function () {
          throwOnStylesProp(this, this.props);
        };

        NativeMethodsMixin_DEV.UNSAFE_componentWillReceiveProps = function (newProps) {
          throwOnStylesProp(this, newProps);
        };

        NativeMethodsMixin_DEV.componentWillMount.__suppressDeprecationWarning = true;
        NativeMethodsMixin_DEV.componentWillReceiveProps.__suppressDeprecationWarning = true;
      }
      return NativeMethodsMixin;
    };

    function _classCallCheck$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }

      return call && ((0, _typeof2["default"])(call) === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + (0, _typeof2["default"])(superClass));
      }

      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var ReactNativeComponent = function ReactNativeComponent(findNodeHandle, findHostInstance) {
      var ReactNativeComponent = function (_React$Component) {
        _inherits(ReactNativeComponent, _React$Component);

        function ReactNativeComponent() {
          _classCallCheck$1(this, ReactNativeComponent);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        ReactNativeComponent.prototype.blur = function blur() {
          ReactNativePrivateInterface.TextInputState.blurTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.focus = function focus() {
          ReactNativePrivateInterface.TextInputState.focusTextInput(findNodeHandle(this));
        };

        ReactNativeComponent.prototype.measure = function measure(callback) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            nativeFabricUIManager.measure(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          } else {
            ReactNativePrivateInterface.UIManager.measure(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          }
        };

        ReactNativeComponent.prototype.measureInWindow = function measureInWindow(callback) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            nativeFabricUIManager.measureInWindow(maybeInstance.node, mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          } else {
            ReactNativePrivateInterface.UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback_NOT_REALLY_SAFE(this, callback));
          }
        };

        ReactNativeComponent.prototype.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            warningWithoutStack$1(false, "Warning: measureLayout on components using NativeMethodsMixin " + "or ReactNative.NativeComponent is not currently supported in Fabric. " + "measureLayout must be called on a native ref. Consider using forwardRef.");
            return;
          } else {
            var relativeNode = void 0;

            if (typeof relativeToNativeNode === "number") {
              relativeNode = relativeToNativeNode;
            } else if (relativeToNativeNode._nativeTag) {
              relativeNode = relativeToNativeNode._nativeTag;
            }

            if (relativeNode == null) {
              warningWithoutStack$1(false, "Warning: ref.measureLayout must be called with a node handle or a ref to a native component.");
              return;
            }

            ReactNativePrivateInterface.UIManager.measureLayout(findNodeHandle(this), relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));
          }
        };

        ReactNativeComponent.prototype.setNativeProps = function setNativeProps(nativeProps) {
          var maybeInstance = void 0;

          try {
            maybeInstance = findHostInstance(this);
          } catch (error) {}

          if (maybeInstance == null) {
            return;
          }

          if (maybeInstance.canonical) {
            warningWithoutStack$1(false, "Warning: setNativeProps is not currently supported in Fabric");
            return;
          }

          {
            if (warnAboutDeprecatedSetNativeProps) {
              warningWithoutStack$1(false, "Warning: Calling ref.setNativeProps(nativeProps) " + "is deprecated and will be removed in a future release. " + "Use the setNativeProps export from the react-native package instead." + "\n\timport {setNativeProps} from 'react-native';\n\tsetNativeProps(ref, nativeProps);\n");
            }
          }
          var nativeTag = maybeInstance._nativeTag || maybeInstance.canonical._nativeTag;
          var viewConfig = maybeInstance.viewConfig || maybeInstance.canonical.viewConfig;
          var updatePayload = create(nativeProps, viewConfig.validAttributes);

          if (updatePayload != null) {
            ReactNativePrivateInterface.UIManager.updateView(nativeTag, viewConfig.uiViewClassName, updatePayload);
          }
        };

        return ReactNativeComponent;
      }(React.Component);

      return ReactNativeComponent;
    };

    var emptyObject$2 = {};
    {
      Object.freeze(emptyObject$2);
    }
    var getInspectorDataForViewTag = void 0;
    {
      var traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
        if (instance) {
          hierarchy.unshift(instance);
          traverseOwnerTreeUp(hierarchy, instance._debugOwner);
        }
      };

      var getOwnerHierarchy = function getOwnerHierarchy(instance) {
        var hierarchy = [];
        traverseOwnerTreeUp(hierarchy, instance);
        return hierarchy;
      };

      var lastNonHostInstance = function lastNonHostInstance(hierarchy) {
        for (var i = hierarchy.length - 1; i > 1; i--) {
          var instance = hierarchy[i];

          if (instance.tag !== HostComponent) {
            return instance;
          }
        }

        return hierarchy[0];
      };

      var getHostProps = function getHostProps(fiber) {
        var host = findCurrentHostFiber(fiber);

        if (host) {
          return host.memoizedProps || emptyObject$2;
        }

        return emptyObject$2;
      };

      var getHostNode = function getHostNode(fiber, findNodeHandle) {
        var hostNode = void 0;

        while (fiber) {
          if (fiber.stateNode !== null && fiber.tag === HostComponent) {
            hostNode = findNodeHandle(fiber.stateNode);
          }

          if (hostNode) {
            return hostNode;
          }

          fiber = fiber.child;
        }

        return null;
      };

      var createHierarchy = function createHierarchy(fiberHierarchy) {
        return fiberHierarchy.map(function (fiber) {
          return {
            name: getComponentName(fiber.type),
            getInspectorData: function getInspectorData(findNodeHandle) {
              return {
                measure: function measure(callback) {
                  return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                },
                props: getHostProps(fiber),
                source: fiber._debugSource
              };
            }
          };
        });
      };

      getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
        var closestInstance = getInstanceFromTag(viewTag);

        if (!closestInstance) {
          return {
            hierarchy: [],
            props: emptyObject$2,
            selection: null,
            source: null
          };
        }

        var fiber = findCurrentFiberUsingSlowPath(closestInstance);
        var fiberHierarchy = getOwnerHierarchy(fiber);
        var instance = lastNonHostInstance(fiberHierarchy);
        var hierarchy = createHierarchy(fiberHierarchy);
        var props = getHostProps(instance);
        var source = instance._debugSource;
        var selection = fiberHierarchy.indexOf(instance);
        return {
          hierarchy: hierarchy,
          props: props,
          selection: selection,
          source: source
        };
      };
    }

    function setNativeProps(handle, nativeProps) {
      if (handle._nativeTag == null) {
        !(handle._nativeTag != null) ? warningWithoutStack$1(false, "setNativeProps was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component") : void 0;
        return;
      }

      {
        warnForStyleProps(nativeProps, handle.viewConfig.validAttributes);
      }
      var updatePayload = create(nativeProps, handle.viewConfig.validAttributes);

      if (updatePayload != null) {
        ReactNativePrivateInterface.UIManager.updateView(handle._nativeTag, handle.viewConfig.uiViewClassName, updatePayload);
      }
    }

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

    function findNodeHandle(componentOrHandle) {
      {
        var owner = ReactCurrentOwner.current;

        if (owner !== null && owner.stateNode !== null) {
          !owner.stateNode._warnedAboutRefsInRender ? warningWithoutStack$1(false, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName(owner.type) || "A component") : void 0;
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }

      if (componentOrHandle == null) {
        return null;
      }

      if (typeof componentOrHandle === "number") {
        return componentOrHandle;
      }

      if (componentOrHandle._nativeTag) {
        return componentOrHandle._nativeTag;
      }

      if (componentOrHandle.canonical && componentOrHandle.canonical._nativeTag) {
        return componentOrHandle.canonical._nativeTag;
      }

      var hostInstance = void 0;
      {
        hostInstance = findHostInstanceWithWarning(componentOrHandle, "findNodeHandle");
      }

      if (hostInstance == null) {
        return hostInstance;
      }

      if (hostInstance.canonical) {
        return hostInstance.canonical._nativeTag;
      }

      return hostInstance._nativeTag;
    }

    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

    function computeComponentStackForErrorReporting(reactTag) {
      var fiber = getInstanceFromTag(reactTag);

      if (!fiber) {
        return "";
      }

      return getStackByFiberInDevAndProd(fiber);
    }

    var roots = new Map();
    var ReactNativeRenderer = {
      NativeComponent: ReactNativeComponent(findNodeHandle, findHostInstance),
      findNodeHandle: findNodeHandle,
      dispatchCommand: function dispatchCommand(handle, command, args) {
        if (handle._nativeTag == null) {
          !(handle._nativeTag != null) ? warningWithoutStack$1(false, "dispatchCommand was called with a ref that isn't a " + "native component. Use React.forwardRef to get access to the underlying native component") : void 0;
          return;
        }

        ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(handle._nativeTag, command, args);
      },
      setNativeProps: setNativeProps,
      render: function render(element, containerTag, callback) {
        var root = roots.get(containerTag);

        if (!root) {
          root = createContainer(containerTag, LegacyRoot, false);
          roots.set(containerTag, root);
        }

        updateContainer(element, root, null, callback);
        return getPublicRootInstance(root);
      },
      unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);

        if (root) {
          updateContainer(null, root, null, function () {
            roots["delete"](containerTag);
          });
        }
      },
      unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeRenderer.unmountComponentAtNode(containerTag);
        ReactNativePrivateInterface.UIManager.removeRootView(containerTag);
      },
      createPortal: function createPortal(children, containerTag) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        return _createPortal(children, containerTag, null, key);
      },
      unstable_batchedUpdates: batchedUpdates,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin(findNodeHandle, findHostInstance),
        computeComponentStackForErrorReporting: computeComponentStackForErrorReporting
      }
    };
    injectIntoDevTools({
      findFiberByHostInstance: getInstanceFromTag,
      getInspectorDataForViewTag: getInspectorDataForViewTag,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-native-renderer"
    });
    var ReactNativeRenderer$2 = Object.freeze({
      "default": ReactNativeRenderer
    });
    var ReactNativeRenderer$3 = ReactNativeRenderer$2 && ReactNativeRenderer || ReactNativeRenderer$2;
    var reactNativeRenderer = ReactNativeRenderer$3["default"] || ReactNativeRenderer$3;
    module.exports = reactNativeRenderer;
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,