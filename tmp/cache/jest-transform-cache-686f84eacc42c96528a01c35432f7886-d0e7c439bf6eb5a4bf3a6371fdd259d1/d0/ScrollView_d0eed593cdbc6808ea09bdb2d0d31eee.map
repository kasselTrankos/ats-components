{"version":3,"sources":["ScrollView.js"],"names":["AnimatedImplementation","require","Platform","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","View","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","resolveAssetSource","splitLayoutProps","AndroidScrollView","AndroidHorizontalScrollContentView","AndroidHorizontalScrollView","RCTScrollView","RCTScrollContentView","OS","createScrollResponder","node","scrollResponder","Mixin","key","bind","Context","createContext","standardHorizontalContext","Object","freeze","horizontal","standardVerticalContext","ScrollView","props","_scrollResponder","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","state","layoutHeight","scrollResponderMixinGetInitialState","_handleScroll","e","__DEV__","onScroll","scrollEventThrottle","console","log","keyboardDismissMode","isTouching","scrollResponderHandleScroll","_handleLayout","invertStickyHeaders","setState","nativeEvent","layout","height","onLayout","_handleContentOnLayout","width","onContentSizeChange","_scrollViewRef","_setScrollViewRef","ref","_innerViewRef","_setInnerViewRef","startsWith","keys","filter","forEach","UNSAFE_componentWillMount","contentOffset","y","setOffset","contentInset","top","nextProps","currentContentInsetTop","nextContentInsetTop","_updateAnimatedNodeAttachment","componentWillUnmount","detach","setNativeProps","findNodeHandle","options","deprecatedX","deprecatedAnimated","x","animated","warn","scrollResponderScrollTo","scrollResponderScrollToEnd","scrollTo","scrollResponderFlashScrollIndicators","index","childArray","child","stickyHeaderIndices","length","attachNativeEvent","set","event","Children","toArray","children","_getKeyForIndex","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","ScrollViewClass","ScrollContentContainerViewClass","undefined","contentContainerStyle","styles","contentContainerHorizontal","style","childLayoutProps","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","_setStickyHeaderRef","_onStickyHeaderLayout","hasStickyHeaders","Array","isArray","contentContainer","removeClippedSubviews","alwaysBounceHorizontal","alwaysBounceVertical","DEPRECATED_sendUpdatedChildFrames","baseStyle","baseHorizontal","baseVertical","onMomentumScrollBegin","scrollResponderHandleMomentumScrollBegin","onMomentumScrollEnd","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","onTouchCancel","scrollResponderHandleTouchCancel","scrollBarThumbImage","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","refreshControl","isTV","outer","inner","cloneElement","Component","create","flexGrow","flexShrink","flexDirection","overflow","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,2CAAD,CAAtC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,kCAAD,CAA3B;;AACA,IAAMI,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAMK,sBAAsB,GAAGL,OAAO,CAAC,0BAAD,CAAtC;;AACA,IAAMM,UAAU,GAAGN,OAAO,CAAC,6BAAD,CAA1B;;AACA,IAAMO,IAAI,GAAGP,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAMQ,eAAe,GAAGR,OAAO,CAAC,iCAAD,CAA/B;;AACA,IAAMS,YAAY,GAAGT,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAMU,SAAS,GAAGV,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMW,uBAAuB,GAAGX,OAAO,CAAC,2BAAD,CAAvC;;AACA,IAAMY,sBAAsB,GAAGZ,OAAO,CAAC,0CAAD,CAAtC;;AACA,IAAMa,kBAAkB,GAAGb,OAAO,CAAC,gCAAD,CAAlC;;AACA,IAAMc,gBAAgB,GAAGd,OAAO,CAAC,mCAAD,CAAhC;;AAgBA,IAAIe,iBAAJ;AACA,IAAIC,kCAAJ;AACA,IAAIC,2BAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,oBAAJ;;AAEA,IAAIlB,QAAQ,CAACmB,EAAT,KAAgB,SAApB,EAA+B;AAC7BL,EAAAA,iBAAiB,GAAGH,sBAAsB,CAAC,eAAD,CAA1C;AACAK,EAAAA,2BAA2B,GAAGL,sBAAsB,CAClD,6BADkD,CAApD;AAGAI,EAAAA,kCAAkC,GAAGJ,sBAAsB,CACzD,oCADyD,CAA3D;AAGD,CARD,MAQO,IAAIX,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;AAChCF,EAAAA,aAAa,GAAGN,sBAAsB,CAAC,eAAD,CAAtC;AACAO,EAAAA,oBAAoB,GAAGP,sBAAsB,CAAC,sBAAD,CAA7C;AACD,CAHM,MAGA;AACLM,EAAAA,aAAa,GAAGN,sBAAsB,CAAC,eAAD,CAAtC;AACAO,EAAAA,oBAAoB,GAAGP,sBAAsB,CAAC,sBAAD,CAA7C;AACD;;AA6fD,SAASS,qBAAT,CACEC,IADF,EAEgC;AAC9B,MAAMC,eAAe,qBAAOnB,eAAe,CAACoB,KAAvB,CAArB;;AAEA,OAAK,IAAMC,IAAX,IAAkBF,eAAlB,EAAmC;AACjC,QAAI,OAAOA,eAAe,CAACE,IAAD,CAAtB,KAAgC,UAApC,EAAgD;AAC9CF,MAAAA,eAAe,CAACE,IAAD,CAAf,GAAuBF,eAAe,CAACE,IAAD,CAAf,CAAqBC,IAArB,CAA0BJ,IAA1B,CAAvB;AACD;AACF;;AAED,SAAOC,eAAP;AACD;;AAGD,IAAMI,OAAO,GAAGzB,KAAK,CAAC0B,aAAN,CAAiC,IAAjC,CAAhB;AACA,IAAMC,yBAAsC,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC3DC,EAAAA,UAAU,EAAE;AAD+C,CAAd,CAA/C;AAGA,IAAMC,uBAAoC,GAAGH,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,UAAU,EAAE;AAAb,CAAd,CAA7C;;IAqCME,U;;;AAgBJ,sBAAYC,KAAZ,EAA0B;AAAA;;AAAA;AACxB,sHAAMA,KAAN;AADwB,UAF1BC,gBAE0B,GAFuBf,qBAAqB,gDAE5C;AAAA,UAsC1BgB,oBAtC0B,GAsC2B,IAAItC,sBAAsB,CAACuC,KAA3B,CACnD,CADmD,CAtC3B;AAAA,UAyC1BC,8BAzC0B,GAyC8B,IAzC9B;AAAA,UA0C1BC,iBA1C0B,GA0CkC,IAAIC,GAAJ,EA1ClC;AAAA,UA2C1BC,eA3C0B,GA2Ca,IAAID,GAAJ,EA3Cb;AAAA,UA6C1BE,KA7C0B;AA8CxBC,MAAAA,YAAY,EAAE;AA9CU,OA+CrBxC,eAAe,CAACoB,KAAhB,CAAsBqB,mCAAtB,EA/CqB;;AAAA,UAsP1BC,aAtP0B,GAsPV,UAACC,CAAD,EAAoB;AAClC,UAAIC,OAAJ,EAAa;AACX,YACE,MAAKb,KAAL,CAAWc,QAAX,IACA,MAAKd,KAAL,CAAWe,mBAAX,IAAkC,IADlC,IAEAjD,QAAQ,CAACmB,EAAT,KAAgB,KAHlB,EAIE;AACA+B,UAAAA,OAAO,CAACC,GAAR,CACE,wDACE,0DADF,GAEE,6DAFF,GAGE,8DAHF,GAIE,iBALJ;AAOD;AACF;;AACD,UAAInD,QAAQ,CAACmB,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YACE,MAAKe,KAAL,CAAWkB,mBAAX,KAAmC,SAAnC,IACA,MAAKV,KAAL,CAAWW,UAFb,EAGE;AACA9C,UAAAA,eAAe;AAChB;AACF;;AACD,YAAK4B,gBAAL,CAAsBmB,2BAAtB,CAAkDR,CAAlD;AACD,KA/QyB;;AAAA,UAiR1BS,aAjR0B,GAiRV,UAACT,CAAD,EAAoB;AAClC,UAAI,MAAKZ,KAAL,CAAWsB,mBAAX,KAAmC,IAAvC,EAA6C;AAC3C,cAAKC,QAAL,CAAc;AAACd,UAAAA,YAAY,EAAEG,CAAC,CAACY,WAAF,CAAcC,MAAd,CAAqBC;AAApC,SAAd;AACD;;AACD,UAAI,MAAK1B,KAAL,CAAW2B,QAAf,EAAyB;AACvB,cAAK3B,KAAL,CAAW2B,QAAX,CAAoBf,CAApB;AACD;AACF,KAxRyB;;AAAA,UA0R1BgB,sBA1R0B,GA0RD,UAAChB,CAAD,EAAoB;AAAA,kCACnBA,CAAC,CAACY,WAAF,CAAcC,MADK;AAAA,UACpCI,KADoC,yBACpCA,KADoC;AAAA,UAC7BH,MAD6B,yBAC7BA,MAD6B;AAE3C,YAAK1B,KAAL,CAAW8B,mBAAX,IACE,MAAK9B,KAAL,CAAW8B,mBAAX,CAA+BD,KAA/B,EAAsCH,MAAtC,CADF;AAED,KA9RyB;;AAAA,UAgS1BK,cAhS0B,GAgSI,IAhSJ;;AAAA,UAiS1BC,iBAjS0B,GAiSN,UAACC,GAAD,EAAsB;AACxC,YAAKF,cAAL,GAAsBE,GAAtB;AACD,KAnSyB;;AAAA,UAqS1BC,aArS0B,GAqSe,IArSf;;AAAA,UAsS1BC,gBAtS0B,GAsSP,UAACF,GAAD,EAAkC;AACnD,YAAKC,aAAL,GAAqBD,GAArB;AACD,KAxSyB;;AAcxB,SAAK,IAAM3C,KAAX,IAAkBrB,eAAe,CAACoB,KAAlC,EAAyC;AACvC,UACE,OAAOpB,eAAe,CAACoB,KAAhB,CAAsBC,KAAtB,CAAP,KAAsC,UAAtC,IACAA,KAAG,CAAC8C,UAAJ,CAAe,iBAAf,CAFF,EAGE;AAEA,uDAAY9C,KAAZ,IAAmBrB,eAAe,CAACoB,KAAhB,CAAsBC,KAAtB,EAA2BC,IAA3B,gDAAnB;AACD;AACF;;AAQDI,IAAAA,MAAM,CAAC0C,IAAP,CAAYpE,eAAe,CAACoB,KAA5B,EACGiD,MADH,CACU,UAAAhD,GAAG;AAAA,aAAI,OAAOrB,eAAe,CAACoB,KAAhB,CAAsBC,GAAtB,CAAP,KAAsC,UAA1C;AAAA,KADb,EAEGiD,OAFH,CAEW,UAAAjD,GAAG,EAAI;AAEd,qDAAYA,GAAZ,IAAmBrB,eAAe,CAACoB,KAAhB,CAAsBC,GAAtB,CAAnB;AACD,KALH;AA9BwB;AAoCzB;;;;gDAc2B;AAC1B,WAAKW,gBAAL,CAAsBuC,yBAAtB;;AACA,WAAKtC,oBAAL,GAA4B,IAAItC,sBAAsB,CAACuC,KAA3B,CAC1B,KAAKH,KAAL,CAAWyC,aAAX,GAA2B,KAAKzC,KAAL,CAAWyC,aAAX,CAAyBC,CAApD,GAAwD,CAD9B,CAA5B;;AAGA,WAAKxC,oBAAL,CAA0ByC,SAA1B,CAIE,KAAK3C,KAAL,CAAW4C,YAAX,GAA0B,KAAK5C,KAAL,CAAW4C,YAAX,CAAwBC,GAAlD,GAAwD,CAJ1D;;AAMA,WAAKxC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACA,WAAKC,eAAL,GAAuB,IAAID,GAAJ,EAAvB;AACD;;;qDAEgCwC,S,EAAkB;AACjD,UAAMC,sBAAsB,GAAG,KAAK/C,KAAL,CAAW4C,YAAX,GAC3B,KAAK5C,KAAL,CAAW4C,YAAX,CAAwBC,GADG,GAE3B,CAFJ;AAGA,UAAMG,mBAAmB,GAAGF,SAAS,CAACF,YAAV,GACxBE,SAAS,CAACF,YAAV,CAAuBC,GADC,GAExB,CAFJ;;AAGA,UAAIE,sBAAsB,KAAKC,mBAA/B,EAAoD;AAClD,aAAK9C,oBAAL,CAA0ByC,SAA1B,CAAoCK,mBAAmB,IAAI,CAA3D;AACD;AACF;;;wCAEmB;AAClB,WAAKC,6BAAL;AACD;;;yCAEoB;AACnB,WAAKA,6BAAL;AACD;;;2CAEsB;AACrB,WAAKhD,gBAAL,CAAsBiD,oBAAtB;;AACA,UAAI,KAAK9C,8BAAT,EAAyC;AACvC,aAAKA,8BAAL,CAAoC+C,MAApC;AACD;AACF;;;mCAEcnD,K,EAA+B;AAC5C,WAAK+B,cAAL,IAAuB,KAAKA,cAAL,CAAoBqB,cAApB,CAAmCpD,KAAnC,CAAvB;AACD;;;yCAQyC;AAExC,aAAS,IAAT;AACD;;;wCAE4B;AAC3B,aAAOhC,WAAW,CAACqF,cAAZ,CAA2B,KAAKtB,cAAhC,CAAP;AACD;;;uCAE2B;AAC1B,aAAO/D,WAAW,CAACqF,cAAZ,CAA2B,KAAKnB,aAAhC,CAAP;AACD;;;yCAEiC;AAChC,aAAO,KAAKH,cAAZ;AACD;;;6BAcCuB,O,EACAC,W,EACAC,kB,EACA;AACA,UAAIC,CAAJ,EAAOf,CAAP,EAAUgB,QAAV;;AACA,UAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;AAC/BtC,QAAAA,OAAO,CAAC2C,IAAR,CACE,0EACE,4BAFJ;AAIAjB,QAAAA,CAAC,GAAGY,OAAJ;AACAG,QAAAA,CAAC,GAAGF,WAAJ;AACAG,QAAAA,QAAQ,GAAGF,kBAAX;AACD,OARD,MAQO,IAAIF,OAAJ,EAAa;AAClBZ,QAAAA,CAAC,GAAGY,OAAO,CAACZ,CAAZ;AACAe,QAAAA,CAAC,GAAGH,OAAO,CAACG,CAAZ;AACAC,QAAAA,QAAQ,GAAGJ,OAAO,CAACI,QAAnB;AACD;;AACD,WAAKzD,gBAAL,CAAsB2D,uBAAtB,CAA8C;AAC5CH,QAAAA,CAAC,EAAEA,CAAC,IAAI,CADoC;AAE5Cf,QAAAA,CAAC,EAAEA,CAAC,IAAI,CAFoC;AAG5CgB,QAAAA,QAAQ,EAAEA,QAAQ,KAAK;AAHqB,OAA9C;AAKD;;;gCAUWJ,O,EAAiC;AAE3C,UAAMI,QAAQ,GAAG,CAACJ,OAAO,IAAIA,OAAO,CAACI,QAApB,MAAkC,KAAnD;;AACA,WAAKzD,gBAAL,CAAsB4D,0BAAtB,CAAiD;AAC/CH,QAAAA,QAAQ,EAAEA;AADqC,OAAjD;AAGD;;;+CAKsD;AAAA,UAA9BhB,CAA8B,uEAAlB,CAAkB;AAAA,UAAfe,CAAe,uEAAH,CAAG;AACrDzC,MAAAA,OAAO,CAAC2C,IAAR,CACE,kEADF;AAGA,WAAKG,QAAL,CAAc;AAACL,QAAAA,CAAC,EAADA,CAAD;AAAIf,QAAAA,CAAC,EAADA,CAAJ;AAAOgB,QAAAA,QAAQ,EAAE;AAAjB,OAAd;AACD;;;4CAOuB;AACtB,WAAKzD,gBAAL,CAAsB8D,oCAAtB;AACD;;;oCAEeC,K,EAAOC,U,EAAY;AACjC,UAAMC,KAAK,GAAGD,UAAU,CAACD,KAAD,CAAxB;AACA,aAAOE,KAAK,IAAIA,KAAK,CAAC5E,GAAtB;AACD;;;oDAE+B;AAC9B,UAAI,KAAKc,8BAAT,EAAyC;AACvC,aAAKA,8BAAL,CAAoC+C,MAApC;AACD;;AACD,UACE,KAAKnD,KAAL,CAAWmE,mBAAX,IACA,KAAKnE,KAAL,CAAWmE,mBAAX,CAA+BC,MAA/B,GAAwC,CAF1C,EAGE;AACA,aAAKhE,8BAAL,GAAsCxC,sBAAsB,CAACyG,iBAAvB,CACpC,KAAKtC,cAD+B,EAEpC,UAFoC,EAGpC,CAAC;AAACP,UAAAA,WAAW,EAAE;AAACiB,YAAAA,aAAa,EAAE;AAACC,cAAAA,CAAC,EAAE,KAAKxC;AAAT;AAAhB;AAAd,SAAD,CAHoC,CAAtC;AAKD;AACF;;;wCAEmBZ,G,EAAa2C,G,EAAiC;AAChE,UAAIA,GAAJ,EAAS;AACP,aAAK5B,iBAAL,CAAuBiE,GAAvB,CAA2BhF,GAA3B,EAAgC2C,GAAhC;AACD,OAFD,MAEO;AACL,aAAK5B,iBAAL,WAA8Bf,GAA9B;AACD;AACF;;;0CAEqB0E,K,EAAOO,K,EAAOjF,G,EAAK;AAAA,UAChC6E,mBADgC,GACT,KAAKnE,KADI,CAChCmE,mBADgC;;AAEvC,UAAI,CAACA,mBAAL,EAA0B;AACxB;AACD;;AACD,UAAMF,UAAU,GAAGlG,KAAK,CAACyG,QAAN,CAAeC,OAAf,CAAuB,KAAKzE,KAAL,CAAW0E,QAAlC,CAAnB;;AACA,UAAIpF,GAAG,KAAK,KAAKqF,eAAL,CAAqBX,KAArB,EAA4BC,UAA5B,CAAZ,EAAqD;AAEnD;AACD;;AAED,UAAMW,OAAO,GAAGL,KAAK,CAAC/C,WAAN,CAAkBC,MAAlB,CAAyBiB,CAAzC;;AACA,WAAKnC,eAAL,CAAqB+D,GAArB,CAAyBhF,GAAzB,EAA8BsF,OAA9B;;AAEA,UAAMC,YAAY,GAAGV,mBAAmB,CAACW,OAApB,CAA4Bd,KAA5B,CAArB;AACA,UAAMe,mBAAmB,GAAGZ,mBAAmB,CAACU,YAAY,GAAG,CAAhB,CAA/C;;AACA,UAAIE,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,YAAMC,cAAc,GAAG,KAAK3E,iBAAL,CAAuB4E,GAAvB,CACrB,KAAKN,eAAL,CAAqBI,mBAArB,EAA0Cd,UAA1C,CADqB,CAAvB;;AAGAe,QAAAA,cAAc,IACZA,cAAc,CAACE,cADjB,IAEEF,cAAc,CAACE,cAAf,CAA8BN,OAA9B,CAFF;AAGD;AACF;;;6BAsD4C;AAAA;;AAC3C,UAAIO,eAAJ;AACA,UAAIC,+BAAJ;;AACA,UAAItH,QAAQ,CAACmB,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,KAAKe,KAAL,CAAWH,UAAX,KAA0B,IAA9B,EAAoC;AAClCsF,UAAAA,eAAe,GAAGrG,2BAAlB;AACAsG,UAAAA,+BAA+B,GAAGvG,kCAAlC;AACD,SAHD,MAGO;AACLsG,UAAAA,eAAe,GAAGvG,iBAAlB;AACAwG,UAAAA,+BAA+B,GAAGhH,IAAlC;AACD;AACF,OARD,MAQO;AACL+G,QAAAA,eAAe,GAAGpG,aAAlB;AACAqG,QAAAA,+BAA+B,GAAGpG,oBAAlC;AACD;;AAEDT,MAAAA,SAAS,CACP4G,eAAe,KAAKE,SADb,EAEP,uCAFO,CAAT;AAKA9G,MAAAA,SAAS,CACP6G,+BAA+B,KAAKC,SAD7B,EAEP,uDAFO,CAAT;AAKA,UAAMC,qBAAqB,GAAG,CAC5B,KAAKtF,KAAL,CAAWH,UAAX,KAA0B,IAA1B,IAAkC0F,MAAM,CAACC,0BADb,EAE5B,KAAKxF,KAAL,CAAWsF,qBAFiB,CAA9B;;AAIA,UAAIzE,OAAO,IAAI,KAAKb,KAAL,CAAWyF,KAAX,KAAqBJ,SAApC,EAA+C;AAC7C,YAAMI,KAAK,GAAGnH,YAAY,CAAC,KAAK0B,KAAL,CAAWyF,KAAZ,CAA1B;AACA,YAAMC,gBAAgB,GAAG,CAAC,YAAD,EAAe,gBAAf,EAAiCpD,MAAjC,CACvB,UAAAqD,IAAI;AAAA,iBAAIF,KAAK,IAAIA,KAAK,CAACE,IAAD,CAAL,KAAgBN,SAA7B;AAAA,SADmB,CAAzB;AAGA9G,QAAAA,SAAS,CACPmH,gBAAgB,CAACtB,MAAjB,KAA4B,CADrB,EAEP,8BACEwB,IAAI,CAACC,SAAL,CAAeH,gBAAf,CADF,GAEE,2DAJK,CAAT;AAMD;;AAED,UAAII,sBAAsB,GAAG,EAA7B;;AACA,UAAI,KAAK9F,KAAL,CAAW8B,mBAAf,EAAoC;AAClCgE,QAAAA,sBAAsB,GAAG;AACvBnE,UAAAA,QAAQ,EAAE,KAAKC;AADQ,SAAzB;AAGD;;AAhD0C,UAkDpCuC,mBAlDoC,GAkDb,KAAKnE,KAlDQ,CAkDpCmE,mBAlDoC;AAmD3C,UAAIO,QAAQ,GAAG,KAAK1E,KAAL,CAAW0E,QAA1B;;AAEA,UAAIP,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAACC,MAApB,GAA6B,CAAhE,EAAmE;AACjE,YAAMH,UAAU,GAAGlG,KAAK,CAACyG,QAAN,CAAeC,OAAf,CAAuB,KAAKzE,KAAL,CAAW0E,QAAlC,CAAnB;AAEAA,QAAAA,QAAQ,GAAGT,UAAU,CAAC8B,GAAX,CAAe,UAAC7B,KAAD,EAAQF,KAAR,EAAkB;AAC1C,cAAMa,YAAY,GAAGX,KAAK,GAAGC,mBAAmB,CAACW,OAApB,CAA4Bd,KAA5B,CAAH,GAAwC,CAAC,CAAnE;;AACA,cAAIa,YAAY,GAAG,CAAC,CAApB,EAAuB;AACrB,gBAAMvF,KAAG,GAAG4E,KAAK,CAAC5E,GAAlB;AACA,gBAAM0G,SAAS,GAAG7B,mBAAmB,CAACU,YAAY,GAAG,CAAhB,CAArC;AACA,gBAAMoB,qBAAqB,GACzB,MAAI,CAACjG,KAAL,CAAWiG,qBAAX,IAAoC/H,sBADtC;AAEA,mBACE,oBAAC,qBAAD;AACE,cAAA,GAAG,EAAEoB,KADP;AAGE,cAAA,GAAG,EAAE,aAAA2C,IAAG;AAAA,uBAAI,MAAI,CAACiE,mBAAL,CAAyB5G,KAAzB,EAA8B2C,IAA9B,CAAJ;AAAA,eAHV;AAIE,cAAA,iBAAiB,EAAE,MAAI,CAAC1B,eAAL,CAAqB0E,GAArB,CACjB,MAAI,CAACN,eAAL,CAAqBqB,SAArB,EAAgC/B,UAAhC,CADiB,CAJrB;AAOE,cAAA,QAAQ,EAAE,kBAAAM,KAAK;AAAA,uBAAI,MAAI,CAAC4B,qBAAL,CAA2BnC,KAA3B,EAAkCO,KAAlC,EAAyCjF,KAAzC,CAAJ;AAAA,eAPjB;AAQE,cAAA,mBAAmB,EAAE,MAAI,CAACY,oBAR5B;AASE,cAAA,QAAQ,EAAE,MAAI,CAACF,KAAL,CAAWsB,mBATvB;AAUE,cAAA,gBAAgB,EAAE,MAAI,CAACd,KAAL,CAAWC;AAV/B,eAWGyD,KAXH,CADF;AAeD,WApBD,MAoBO;AACL,mBAAOA,KAAP;AACD;AACF,SAzBU,CAAX;AA0BD;;AACDQ,MAAAA,QAAQ,GACN,oBAAC,OAAD,CAAS,QAAT;AACE,QAAA,KAAK,EACH,KAAK1E,KAAL,CAAWH,UAAX,KAA0B,IAA1B,GACIH,yBADJ,GAEII;AAJR,SAMG4E,QANH,CADF;AAWA,UAAM0B,gBAAgB,GACpBC,KAAK,CAACC,OAAN,CAAcnC,mBAAd,KAAsCA,mBAAmB,CAACC,MAApB,GAA6B,CADrE;AAGA,UAAMmC,gBAAgB,GACpB,oBAAC,+BAAD,gCACMT,sBADN;AAGE,QAAA,GAAG,EAAE,KAAK3D,gBAHZ;AAIE,QAAA,KAAK,EAAEmD,qBAJT;AAKE,QAAA,qBAAqB,EAGnBxH,QAAQ,CAACmB,EAAT,KAAgB,SAAhB,IAA6BmH,gBAA7B,GACI,KADJ,GAEI,KAAKpG,KAAL,CAAWwG,qBAVnB;AAYE,QAAA,WAAW,EAAE;AAZf,UAaG9B,QAbH,CADF;AAkBA,UAAM+B,sBAAsB,GAC1B,KAAKzG,KAAL,CAAWyG,sBAAX,KAAsCpB,SAAtC,GACI,KAAKrF,KAAL,CAAWyG,sBADf,GAEI,KAAKzG,KAAL,CAAWH,UAHjB;AAKA,UAAM6G,oBAAoB,GACxB,KAAK1G,KAAL,CAAW0G,oBAAX,KAAoCrB,SAApC,GACI,KAAKrF,KAAL,CAAW0G,oBADf,GAEI,CAAC,KAAK1G,KAAL,CAAWH,UAHlB;AAKA,UAAM8G,iCAAiC,GAAG,CAAC,CAAC,KAAK3G,KAAL,CACzC2G,iCADH;AAGA,UAAMC,SAAS,GACb,KAAK5G,KAAL,CAAWH,UAAX,KAA0B,IAA1B,GACI0F,MAAM,CAACsB,cADX,GAEItB,MAAM,CAACuB,YAHb;;AAIA,UAAM9G,KAAK,qBACN,KAAKA,KADC;AAETyG,QAAAA,sBAAsB,EAAtBA,sBAFS;AAGTC,QAAAA,oBAAoB,EAApBA,oBAHS;AAITjB,QAAAA,KAAK,EAAE,CAACmB,SAAD,EAAY,KAAK5G,KAAL,CAAWyF,KAAvB,CAJE;AAOT3D,QAAAA,mBAAmB,EAAE,IAPZ;AAQTH,QAAAA,QAAQ,EAAE,KAAKN,aARN;AAST0F,QAAAA,qBAAqB,EAAE,KAAK9G,gBAAL,CACpB+G,wCAVM;AAWTC,QAAAA,mBAAmB,EAAE,KAAKhH,gBAAL,CAClBiH,sCAZM;AAaTC,QAAAA,gBAAgB,EAAE,KAAKlH,gBAAL,CACfmH,mCAdM;AAeTC,QAAAA,iBAAiB,EAAE,KAAKpH,gBAAL,CAChBqH,oCAhBM;AAiBTC,QAAAA,kBAAkB,EAAE,KAAKtH,gBAAL,CACjBuH,qCAlBM;AAoBTC,QAAAA,oBAAoB,EAAE,KAAKxH,gBAAL,CACnByH,8BArBM;AAsBTC,QAAAA,6BAA6B,EAAE,KAAK1H,gBAAL,CAC5B2H,uCAvBM;AAwBTC,QAAAA,iBAAiB,EAAE,KAAK5H,gBAAL,CAChB6H,oCAzBM;AA0BTC,QAAAA,eAAe,EAAE,KAAK9H,gBAAL,CAAsB+H,kCA1B9B;AA2BTC,QAAAA,0BAA0B,EAAE,KAAKhI,gBAAL,CACzBiI,6CA5BM;AA6BTC,QAAAA,yBAAyB,EAAE,KAAKlI,gBAAL,CACxBmI,4CA9BM;AA+BTC,QAAAA,gCAAgC,EAAE,KAAKpI,gBAAL,CAC/BqI,mDAhCM;AAiCTC,QAAAA,UAAU,EAAE,KAAKtI,gBAAL,CAAsBuI,6BAjCzB;AAkCTC,QAAAA,WAAW,EAAE,KAAKxI,gBAAL,CAAsByI,8BAlC1B;AAmCTC,QAAAA,YAAY,EAAE,KAAK1I,gBAAL,CAAsB2I,+BAnC3B;AAoCTC,QAAAA,aAAa,EAAE,KAAK5I,gBAAL,CAAsB6I,gCApC5B;AAqCThI,QAAAA,QAAQ,EAAE,KAAKH,aArCN;AAsCToI,QAAAA,mBAAmB,EAAErK,kBAAkB,CAAC,KAAKsB,KAAL,CAAW+I,mBAAZ,CAtC9B;AAuCThI,QAAAA,mBAAmB,EAAEqF,gBAAgB,GACjC,CADiC,GAEjC,KAAKpG,KAAL,CAAWe,mBAzCN;AA0CTiI,QAAAA,kBAAkB,EAChB,KAAKhJ,KAAL,CAAW+G,qBAAX,IAAoC,KAAK/G,KAAL,CAAWiH,mBAA/C,GACI,IADJ,GAEI,KA7CG;AA8CTN,QAAAA,iCAAiC,EAAjCA,iCA9CS;AAgDTsC,QAAAA,WAAW,EAAE,KAAKjJ,KAAL,CAAWiJ,WAAX,KAA2B,KAhD/B;AAkDTC,QAAAA,SAAS,EAAE,KAAKlJ,KAAL,CAAWkJ,SAAX,KAAyB,KAlD3B;AAoDTC,QAAAA,aAAa,EAAErL,QAAQ,CAACsL,MAAT,CAAgB;AAE7BC,UAAAA,GAAG,EACD,KAAKrJ,KAAL,CAAWmJ,aAAX,KAA6B,IAA7B,IACA,KAAKnJ,KAAL,CAAWsJ,cAAX,IAA6B,IAD7B,IAEA,KAAKtJ,KAAL,CAAWuJ,aAAX,IAA4B,IALD;AAO7BC,UAAAA,OAAO,EACL,KAAKxJ,KAAL,CAAWmJ,aAAX,KAA6B,IAA7B,IACA,KAAKnJ,KAAL,CAAWsJ,cAAX,IAA6B,IAD7B,IAEA,KAAKtJ,KAAL,CAAWuJ,aAAX,IAA4B;AAVD,SAAhB;AApDN,QAAX;;AApI2C,UAsMpCE,gBAtMoC,GAsMhB,KAAKzJ,KAtMW,CAsMpCyJ,gBAtMoC;;AAuM3C,UAAIA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BzJ,QAAAA,KAAK,CAACyJ,gBAAN,GAAyBjL,uBAAuB,CAACiL,gBAAD,CAAhD;AACD;;AAED,UAAMC,cAAc,GAAG,KAAK1J,KAAL,CAAW0J,cAAlC;;AAEA,UAAIA,cAAJ,EAAoB;AAClB,YAAI5L,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;AAGzB,iBAEE,oBAAC,eAAD,gCAAqBe,KAArB;AAA4B,YAAA,GAAG,EAAE,KAAKgC;AAAtC,cACGlE,QAAQ,CAAC6L,IAAT,GAAgB,IAAhB,GAAuBD,cAD1B,EAEGnD,gBAFH,CAFF;AAOD,SAVD,MAUO,IAAIzI,QAAQ,CAACmB,EAAT,KAAgB,SAApB,EAA+B;AAAA,kCAMbN,gBAAgB,CAACL,YAAY,CAAC0B,KAAK,CAACyF,KAAP,CAAb,CANH;AAAA,cAM7BmE,KAN6B,qBAM7BA,KAN6B;AAAA,cAMtBC,KANsB,qBAMtBA,KANsB;;AAOpC,iBAAO9L,KAAK,CAAC+L,YAAN,CACLJ,cADK,EAEL;AAACjE,YAAAA,KAAK,EAAE,CAACmB,SAAD,EAAYgD,KAAZ;AAAR,WAFK,EAGL,oBAAC,eAAD,gCACM5J,KADN;AAEE,YAAA,KAAK,EAAE,CAAC4G,SAAD,EAAYiD,KAAZ,CAFT;AAIE,YAAA,GAAG,EAAE,KAAK7H;AAJZ,cAKGuE,gBALH,CAHK,CAAP;AAWD;AACF;;AACD,aAEE,oBAAC,eAAD,gCAAqBvG,KAArB;AAA4B,QAAA,GAAG,EAAE,KAAKgC;AAAtC,UACGuE,gBADH,CAFF;AAMD;;;EA5iBsBxI,KAAK,CAACgM,S;;AAAzBhK,U,CACGP,O,GAAsCA,O;AA8iB/C,IAAM+F,MAAM,GAAGpH,UAAU,CAAC6L,MAAX,CAAkB;AAC/BlD,EAAAA,YAAY,EAAE;AACZmD,IAAAA,QAAQ,EAAE,CADE;AAEZC,IAAAA,UAAU,EAAE,CAFA;AAGZC,IAAAA,aAAa,EAAE,QAHH;AAIZC,IAAAA,QAAQ,EAAE;AAJE,GADiB;AAO/BvD,EAAAA,cAAc,EAAE;AACdoD,IAAAA,QAAQ,EAAE,CADI;AAEdC,IAAAA,UAAU,EAAE,CAFE;AAGdC,IAAAA,aAAa,EAAE,KAHD;AAIdC,IAAAA,QAAQ,EAAE;AAJI,GAPe;AAa/B5E,EAAAA,0BAA0B,EAAE;AAC1B2E,IAAAA,aAAa,EAAE;AADW;AAbG,CAAlB,CAAf;AAkBAE,MAAM,CAACC,OAAP,GAAiBvK,UAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst AnimatedImplementation = require('../../Animated/src/AnimatedImplementation');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst ScrollResponder = require('../ScrollResponder');\nconst ScrollViewStickyHeader = require('./ScrollViewStickyHeader');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst View = require('../View/View');\n\nconst dismissKeyboard = require('../../Utilities/dismissKeyboard');\nconst flattenStyle = require('../../StyleSheet/flattenStyle');\nconst invariant = require('invariant');\nconst processDecelerationRate = require('./processDecelerationRate');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\nconst resolveAssetSource = require('../../Image/resolveAssetSource');\nconst splitLayoutProps = require('../../StyleSheet/splitLayoutProps');\n\nimport type {NativeMethodsMixinType} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {\n  PressEvent,\n  ScrollEvent,\n  LayoutEvent,\n} from '../../Types/CoreEventTypes';\nimport type {State as ScrollResponderState} from '../ScrollResponder';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\n\nlet AndroidScrollView;\nlet AndroidHorizontalScrollContentView;\nlet AndroidHorizontalScrollView;\nlet RCTScrollView;\nlet RCTScrollContentView;\n\nif (Platform.OS === 'android') {\n  AndroidScrollView = requireNativeComponent('RCTScrollView');\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n  );\n  AndroidHorizontalScrollContentView = requireNativeComponent(\n    'AndroidHorizontalScrollContentView',\n  );\n} else if (Platform.OS === 'ios') {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n} else {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n}\n\nexport type ScrollResponderType = {\n  ...ScrollView,\n  ...typeof ScrollResponder.Mixin,\n};\n\ntype TouchableProps = $ReadOnly<{|\n  onTouchStart?: (event: PressEvent) => void,\n  onTouchMove?: (event: PressEvent) => void,\n  onTouchEnd?: (event: PressEvent) => void,\n  onTouchCancel?: (event: PressEvent) => void,\n  onTouchEndCapture?: (event: PressEvent) => void,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   * @platform ios\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n   * but other values such as 1 can be used to skip loading spinners or other content that should\n   * not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   * @platform ios\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * This controls how often the scroll event will be fired while scrolling\n   * (as a time interval in ms). A lower number yields better accuracy for code\n   * that is tracking the scroll position, but can lead to scroll performance\n   * problems due to the volume of information being send over the bridge.\n   *\n   * Values between 0 and 17ms indicate 60fps updates are needed and throttling\n   * will be disabled.\n   *\n   * If you do not need precise scroll position tracking, set this value higher\n   * to limit the information being sent across the bridge.\n   *\n   * The default value is zero, which results in the scroll event being sent only\n   * once each time the view is scrolled.\n   *\n   * @platform ios\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   *\n   * @platform ios\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n  /**\n   * When true, ScrollView will emit updateChildFrames data in scroll events,\n   * otherwise will not compute or emit child frame data.  This only exists\n   * to support legacy issues, `onLayout` should be used instead to retrieve\n   * frame data.\n   * The default value is false.\n   * @platform ios\n   */\n  DEPRECATED_sendUpdatedChildFrames?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n|}>;\n\ntype VRProps = $ReadOnly<{|\n  /**\n   * Optionally an image can be used for the scroll bar thumb. This will\n   * override the color. While the image is loading or the image fails to\n   * load the color will be used instead. Use an alpha of 0 in the color\n   * to avoid seeing it while the image is loading.\n   *\n   * - `uri` - a string representing the resource identifier for the image, which\n   * should be either a local file path or the name of a static image resource\n   * - `number` - Opaque type returned by something like\n   * `import IMAGE from './image.jpg'`.\n   * @platform vr\n   */\n  scrollBarThumbImage?: ?($ReadOnly<{||}> | number), // Opaque type returned by import IMAGE from './image.jpg'\n|}>;\n\ntype StickyHeaderComponentType = React.ComponentType<ScrollViewStickyHeaderProps> & {\n  setNextHeaderY: number => void,\n};\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...TouchableProps,\n  ...IOSProps,\n  ...AndroidProps,\n  ...VRProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for horizontal pagination when the page is less than the width of\n   * the ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?('fast' | 'normal' | number),\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?(\n    | 'none' // default\n    | 'on-drag' // cross-platform\n    | 'interactive'\n  ), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: (event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: (event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling. The frequency of the\n   * events can be controlled using the `scrollEventThrottle` prop.\n   */\n  onScroll?: (event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: (event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: (event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: PressEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   *\n   * Note: Vertical pagination is not supported on Android.\n   */\n  pagingEnabled?: ?boolean,\n\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  // $FlowFixMe - how to handle generic type without existential operator?\n  refreshControl?: ?React.Element<any>,\n  children?: React.Node,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n  ...ScrollResponderState,\n|};\n\nfunction createScrollResponder(\n  node: React.ElementRef<typeof ScrollView>,\n): typeof ScrollResponder.Mixin {\n  const scrollResponder = {...ScrollResponder.Mixin};\n\n  for (const key in scrollResponder) {\n    if (typeof scrollResponder[key] === 'function') {\n      scrollResponder[key] = scrollResponder[key].bind(node);\n    }\n  }\n\n  return scrollResponder;\n}\n\ntype ContextType = {|horizontal: boolean|} | null;\nconst Context = React.createContext<ContextType>(null);\nconst standardHorizontalContext: ContextType = Object.freeze({\n  horizontal: true,\n});\nconst standardVerticalContext: ContextType = Object.freeze({horizontal: false});\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: React$Context<ContextType> = Context;\n  /**\n   * Part 1: Removing ScrollResponder.Mixin:\n   *\n   * 1. Mixin methods should be flow typed. That's why we create a\n   *    copy of ScrollResponder.Mixin and attach it to this._scrollResponder.\n   *    Otherwise, we'd have to manually declare each method on the component\n   *    class and assign it a flow type.\n   * 2. Mixin methods can call component methods, and access the component's\n   *    props and state. So, we need to bind all mixin methods to the\n   *    component instance.\n   * 3. Continued...\n   */\n  _scrollResponder: typeof ScrollResponder.Mixin = createScrollResponder(this);\n\n  constructor(props: Props) {\n    super(props);\n\n    /**\n     * Part 2: Removing ScrollResponder.Mixin\n     *\n     * 3. Mixin methods access other mixin methods via dynamic dispatch using\n     *    this. Since mixin methods are bound to the component instance, we need\n     *    to copy all mixin methods to the component instance. This is also\n     *    necessary because getScrollResponder() is a public method that returns\n     *    an object that can be used to execute all scrollResponder methods.\n     *    Since the object returned from that method is the ScrollView instance,\n     *    we need to bind all mixin methods to the ScrollView instance.\n     */\n    for (const key in ScrollResponder.Mixin) {\n      if (\n        typeof ScrollResponder.Mixin[key] === 'function' &&\n        key.startsWith('scrollResponder')\n      ) {\n        // $FlowFixMe - dynamically adding properties to a class\n        (this: any)[key] = ScrollResponder.Mixin[key].bind(this);\n      }\n    }\n\n    /**\n     * Part 3: Removing ScrollResponder.Mixin\n     *\n     * 4. Mixins can initialize properties and use properties on the component\n     *    instance.\n     */\n    Object.keys(ScrollResponder.Mixin)\n      .filter(key => typeof ScrollResponder.Mixin[key] !== 'function')\n      .forEach(key => {\n        // $FlowFixMe - dynamically adding properties to a class\n        (this: any)[key] = ScrollResponder.Mixin[key];\n      });\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value = new AnimatedImplementation.Value(\n    0,\n  );\n  _scrollAnimatedValueAttachment: ?{detach: () => void} = null;\n  _stickyHeaderRefs: Map<string, StickyHeaderComponentType> = new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  state: State = {\n    layoutHeight: null,\n    ...ScrollResponder.Mixin.scrollResponderMixinGetInitialState(),\n  };\n\n  UNSAFE_componentWillMount() {\n    this._scrollResponder.UNSAFE_componentWillMount();\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset ? this.props.contentOffset.y : 0,\n    );\n    this._scrollAnimatedValue.setOffset(\n      /* $FlowFixMe(>=0.98.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.98 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this.props.contentInset ? this.props.contentInset.top : 0,\n    );\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const currentContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    const nextContentInsetTop = nextProps.contentInset\n      ? nextProps.contentInset.top\n      : 0;\n    if (currentContentInsetTop !== nextContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);\n    }\n  }\n\n  componentDidMount() {\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate() {\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    this._scrollResponder.componentWillUnmount();\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  }\n\n  setNativeProps(props: {[key: string]: mixed}) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  }\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder(): ScrollResponderType {\n    // $FlowFixMe - overriding type to include ScrollResponder.Mixin\n    return ((this: any): ScrollResponderType);\n  }\n\n  getScrollableNode(): ?number {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  }\n\n  getInnerViewNode(): ?number {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  }\n\n  getNativeScrollRef(): ?ScrollView {\n    return this._scrollViewRef;\n  }\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo(\n    options?: {x?: number, y?: number, animated?: boolean} | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    this._scrollResponder.scrollResponderScrollTo({\n      x: x || 0,\n      y: y || 0,\n      animated: animated !== false,\n    });\n  }\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd(options?: ?{animated?: boolean}) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this._scrollResponder.scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  }\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo(y: number = 0, x: number = 0) {\n    console.warn(\n      '`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead',\n    );\n    this.scrollTo({x, y, animated: false});\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    this._scrollResponder.scrollResponderFlashScrollIndicators();\n  }\n\n  _getKeyForIndex(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n      );\n    }\n  }\n\n  _setStickyHeaderRef(key: string, ref: ?StickyHeaderComponentType) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index, event, key) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    if (__DEV__) {\n      if (\n        this.props.onScroll &&\n        this.props.scrollEventThrottle == null &&\n        Platform.OS === 'ios'\n      ) {\n        console.log(\n          'You specified `onScroll` on a <ScrollView> but not ' +\n            '`scrollEventThrottle`. You will only receive one event. ' +\n            'Using `16` you get all the events but be aware that it may ' +\n            \"cause frame drops, use a bigger number if you don't need as \" +\n            'much precision.',\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (\n        this.props.keyboardDismissMode === 'on-drag' &&\n        this.state.isTouching\n      ) {\n        dismissKeyboard();\n      }\n    }\n    this._scrollResponder.scrollResponderHandleScroll(e);\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _scrollViewRef: ?ScrollView = null;\n  _setScrollViewRef = (ref: ?ScrollView) => {\n    this._scrollViewRef = ref;\n  };\n\n  _innerViewRef: ?NativeMethodsMixinType = null;\n  _setInnerViewRef = (ref: ?NativeMethodsMixinType) => {\n    this._innerViewRef = ref;\n  };\n\n  render(): React.Node | React.Element<string> {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'android') {\n      if (this.props.horizontal === true) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n        ScrollContentContainerViewClass = View;\n      }\n    } else {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined',\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined',\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal === true && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      const childArray = React.Children.toArray(this.props.children);\n\n      children = childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              // $FlowFixMe - inexact mixed is incompatible with exact React.Element\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, childArray),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <Context.Provider\n        value={\n          this.props.horizontal === true\n            ? standardHorizontalContext\n            : standardVerticalContext\n        }>\n        {children}\n      </Context.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    const contentContainer = (\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        // $FlowFixMe Invalid prop usage\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames = !!this.props\n      .DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle =\n      this.props.horizontal === true\n        ? styles.baseHorizontal\n        : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: [baseStyle, this.props.style],\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._scrollResponder\n        .scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this._scrollResponder\n        .scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this._scrollResponder\n        .scrollResponderHandleResponderGrant,\n      onResponderReject: this._scrollResponder\n        .scrollResponderHandleResponderReject,\n      onResponderRelease: this._scrollResponder\n        .scrollResponderHandleResponderRelease,\n      // $FlowFixMe\n      onResponderTerminate: this._scrollResponder\n        .scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this._scrollResponder\n        .scrollResponderHandleTerminationRequest,\n      onScrollBeginDrag: this._scrollResponder\n        .scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this._scrollResponder\n        .scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._scrollResponder\n        .scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this._scrollResponder\n        .scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,\n      onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,\n      onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,\n      onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,\n      onScroll: this._handleScroll,\n      scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      DEPRECATED_sendUpdatedChildFrames,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          // $FlowFixMe\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTV ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: [baseStyle, outer]},\n          <ScrollViewClass\n            {...props}\n            style={[baseStyle, inner]}\n            // $FlowFixMe\n            ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>,\n        );\n      }\n    }\n    return (\n      // $FlowFixMe\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nmodule.exports = ScrollView;\n"]}