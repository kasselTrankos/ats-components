c10d0a0619b2f1bddbd8b7ac958e3e7e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Animation = require('./Animation');

var _require = require('../NativeAnimatedHelper'),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var DecayAnimation = function (_Animation) {
  (0, _inherits2["default"])(DecayAnimation, _Animation);

  function DecayAnimation(config) {
    var _config$deceleration, _config$isInteraction, _config$iterations;

    var _this;

    (0, _classCallCheck2["default"])(this, DecayAnimation);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DecayAnimation).call(this));
    _this._startTime = void 0;
    _this._lastValue = void 0;
    _this._fromValue = void 0;
    _this._deceleration = void 0;
    _this._velocity = void 0;
    _this._onUpdate = void 0;
    _this._animationFrame = void 0;
    _this._useNativeDriver = void 0;
    _this._deceleration = (_config$deceleration = config.deceleration) != null ? _config$deceleration : 0.998;
    _this._velocity = config.velocity;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;
    _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    return _this;
  }

  (0, _createClass2["default"])(DecayAnimation, [{
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();

      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "onUpdate",
    value: function onUpdate() {
      var now = Date.now();
      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({
          finished: true
        });

        return;
      }

      this._lastValue = value;

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(DecayAnimation.prototype), "stop", this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);

      this.__debouncedOnEnd({
        finished: false
      });
    }
  }]);
  return DecayAnimation;
}(Animation);

module.exports = DecayAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlY2F5QW5pbWF0aW9uLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGlvbiIsInJlcXVpcmUiLCJzaG91bGRVc2VOYXRpdmVEcml2ZXIiLCJEZWNheUFuaW1hdGlvbiIsImNvbmZpZyIsIl9zdGFydFRpbWUiLCJfbGFzdFZhbHVlIiwiX2Zyb21WYWx1ZSIsIl9kZWNlbGVyYXRpb24iLCJfdmVsb2NpdHkiLCJfb25VcGRhdGUiLCJfYW5pbWF0aW9uRnJhbWUiLCJfdXNlTmF0aXZlRHJpdmVyIiwiZGVjZWxlcmF0aW9uIiwidmVsb2NpdHkiLCJfX2lzSW50ZXJhY3Rpb24iLCJpc0ludGVyYWN0aW9uIiwiX19pdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsInR5cGUiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiX19hY3RpdmUiLCJfX29uRW5kIiwiRGF0ZSIsIm5vdyIsIl9fc3RhcnROYXRpdmVBbmltYXRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiaW5kIiwidmFsdWUiLCJNYXRoIiwiZXhwIiwiYWJzIiwiX19kZWJvdW5jZWRPbkVuZCIsImZpbmlzaGVkIiwiZ2xvYmFsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFTQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBekI7O2VBRWdDQSxPQUFPLENBQUMseUJBQUQsQztJQUFoQ0MscUIsWUFBQUEscUI7O0lBZURDLGM7OztBQVVKLDBCQUFZQyxNQUFaLEVBQWdEO0FBQUE7O0FBQUE7O0FBQUE7QUFDOUM7QUFEOEMsVUFUaERDLFVBU2dEO0FBQUEsVUFSaERDLFVBUWdEO0FBQUEsVUFQaERDLFVBT2dEO0FBQUEsVUFOaERDLGFBTWdEO0FBQUEsVUFMaERDLFNBS2dEO0FBQUEsVUFKaERDLFNBSWdEO0FBQUEsVUFIaERDLGVBR2dEO0FBQUEsVUFGaERDLGdCQUVnRDtBQUU5QyxVQUFLSixhQUFMLDJCQUFxQkosTUFBTSxDQUFDUyxZQUE1QixtQ0FBNEMsS0FBNUM7QUFDQSxVQUFLSixTQUFMLEdBQWlCTCxNQUFNLENBQUNVLFFBQXhCO0FBQ0EsVUFBS0YsZ0JBQUwsR0FBd0JWLHFCQUFxQixDQUFDRSxNQUFELENBQTdDO0FBQ0EsVUFBS1csZUFBTCw0QkFBdUJYLE1BQU0sQ0FBQ1ksYUFBOUIsb0NBQStDLENBQUMsTUFBS0osZ0JBQXJEO0FBQ0EsVUFBS0ssWUFBTCx5QkFBb0JiLE1BQU0sQ0FBQ2MsVUFBM0IsaUNBQXlDLENBQXpDO0FBTjhDO0FBTy9DOzs7O2lEQU9HO0FBQ0YsYUFBTztBQUNMQyxRQUFBQSxJQUFJLEVBQUUsT0FERDtBQUVMTixRQUFBQSxZQUFZLEVBQUUsS0FBS0wsYUFGZDtBQUdMTSxRQUFBQSxRQUFRLEVBQUUsS0FBS0wsU0FIVjtBQUlMUyxRQUFBQSxVQUFVLEVBQUUsS0FBS0Q7QUFKWixPQUFQO0FBTUQ7OzswQkFHQ0csUyxFQUNBQyxRLEVBQ0FDLEssRUFDQUMsaUIsRUFDQUMsYSxFQUNNO0FBQ04sV0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFdBQUtuQixVQUFMLEdBQWtCYyxTQUFsQjtBQUNBLFdBQUtiLFVBQUwsR0FBa0JhLFNBQWxCO0FBQ0EsV0FBS1YsU0FBTCxHQUFpQlcsUUFBakI7QUFDQSxXQUFLSyxPQUFMLEdBQWVKLEtBQWY7QUFDQSxXQUFLakIsVUFBTCxHQUFrQnNCLElBQUksQ0FBQ0MsR0FBTCxFQUFsQjs7QUFDQSxVQUFJLEtBQUtoQixnQkFBVCxFQUEyQjtBQUN6QixhQUFLaUIsc0JBQUwsQ0FBNEJMLGFBQTVCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS2IsZUFBTCxHQUF1Qm1CLHFCQUFxQixDQUFDLEtBQUtULFFBQUwsQ0FBY1UsSUFBZCxDQUFtQixJQUFuQixDQUFELENBQTVDO0FBQ0Q7QUFDRjs7OytCQUVnQjtBQUNmLFVBQU1ILEdBQUcsR0FBR0QsSUFBSSxDQUFDQyxHQUFMLEVBQVo7QUFFQSxVQUFNSSxLQUFLLEdBQ1QsS0FBS3pCLFVBQUwsR0FDQyxLQUFLRSxTQUFMLElBQWtCLElBQUksS0FBS0QsYUFBM0IsQ0FBRCxJQUNHLElBQUl5QixJQUFJLENBQUNDLEdBQUwsQ0FBUyxFQUFFLElBQUksS0FBSzFCLGFBQVgsS0FBNkJvQixHQUFHLEdBQUcsS0FBS3ZCLFVBQXhDLENBQVQsQ0FEUCxDQUZGOztBQUtBLFdBQUtLLFNBQUwsQ0FBZXNCLEtBQWY7O0FBRUEsVUFBSUMsSUFBSSxDQUFDRSxHQUFMLENBQVMsS0FBSzdCLFVBQUwsR0FBa0IwQixLQUEzQixJQUFvQyxHQUF4QyxFQUE2QztBQUMzQyxhQUFLSSxnQkFBTCxDQUFzQjtBQUFDQyxVQUFBQSxRQUFRLEVBQUU7QUFBWCxTQUF0Qjs7QUFDQTtBQUNEOztBQUVELFdBQUsvQixVQUFMLEdBQWtCMEIsS0FBbEI7O0FBQ0EsVUFBSSxLQUFLUCxRQUFULEVBQW1CO0FBQ2pCLGFBQUtkLGVBQUwsR0FBdUJtQixxQkFBcUIsQ0FBQyxLQUFLVCxRQUFMLENBQWNVLElBQWQsQ0FBbUIsSUFBbkIsQ0FBRCxDQUE1QztBQUNEO0FBQ0Y7OzsyQkFFWTtBQUNYO0FBQ0EsV0FBS04sUUFBTCxHQUFnQixLQUFoQjtBQUNBYSxNQUFBQSxNQUFNLENBQUNDLG9CQUFQLENBQTRCLEtBQUs1QixlQUFqQzs7QUFDQSxXQUFLeUIsZ0JBQUwsQ0FBc0I7QUFBQ0MsUUFBQUEsUUFBUSxFQUFFO0FBQVgsT0FBdEI7QUFDRDs7O0VBL0UwQnJDLFM7O0FBa0Y3QndDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRDLGNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0aW9uJyk7XG5cbmNvbnN0IHtzaG91bGRVc2VOYXRpdmVEcml2ZXJ9ID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcbmltcG9ydCB0eXBlIHtBbmltYXRpb25Db25maWcsIEVuZENhbGxiYWNrfSBmcm9tICcuL0FuaW1hdGlvbic7XG5cbmV4cG9ydCB0eXBlIERlY2F5QW5pbWF0aW9uQ29uZmlnID0gQW5pbWF0aW9uQ29uZmlnICYge1xuICB2ZWxvY2l0eTogbnVtYmVyIHwge3g6IG51bWJlciwgeTogbnVtYmVyfSxcbiAgZGVjZWxlcmF0aW9uPzogbnVtYmVyLFxufTtcblxuZXhwb3J0IHR5cGUgRGVjYXlBbmltYXRpb25Db25maWdTaW5nbGUgPSBBbmltYXRpb25Db25maWcgJiB7XG4gIHZlbG9jaXR5OiBudW1iZXIsXG4gIGRlY2VsZXJhdGlvbj86IG51bWJlcixcbn07XG5cbmNsYXNzIERlY2F5QW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0aW9uIHtcbiAgX3N0YXJ0VGltZTogbnVtYmVyO1xuICBfbGFzdFZhbHVlOiBudW1iZXI7XG4gIF9mcm9tVmFsdWU6IG51bWJlcjtcbiAgX2RlY2VsZXJhdGlvbjogbnVtYmVyO1xuICBfdmVsb2NpdHk6IG51bWJlcjtcbiAgX29uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbiAgX2FuaW1hdGlvbkZyYW1lOiBhbnk7XG4gIF91c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBEZWNheUFuaW1hdGlvbkNvbmZpZ1NpbmdsZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZGVjZWxlcmF0aW9uID0gY29uZmlnLmRlY2VsZXJhdGlvbiA/PyAwLjk5ODtcbiAgICB0aGlzLl92ZWxvY2l0eSA9IGNvbmZpZy52ZWxvY2l0eTtcbiAgICB0aGlzLl91c2VOYXRpdmVEcml2ZXIgPSBzaG91bGRVc2VOYXRpdmVEcml2ZXIoY29uZmlnKTtcbiAgICB0aGlzLl9faXNJbnRlcmFjdGlvbiA9IGNvbmZpZy5pc0ludGVyYWN0aW9uID8/ICF0aGlzLl91c2VOYXRpdmVEcml2ZXI7XG4gICAgdGhpcy5fX2l0ZXJhdGlvbnMgPSBjb25maWcuaXRlcmF0aW9ucyA/PyAxO1xuICB9XG5cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTogJFRFTVBPUkFSWSRvYmplY3Q8e3xcbiAgICBkZWNlbGVyYXRpb246IG51bWJlcixcbiAgICBpdGVyYXRpb25zOiBudW1iZXIsXG4gICAgdHlwZTogJFRFTVBPUkFSWSRzdHJpbmc8J2RlY2F5Jz4sXG4gICAgdmVsb2NpdHk6IG51bWJlcixcbiAgfH0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2RlY2F5JyxcbiAgICAgIGRlY2VsZXJhdGlvbjogdGhpcy5fZGVjZWxlcmF0aW9uLFxuICAgICAgdmVsb2NpdHk6IHRoaXMuX3ZlbG9jaXR5LFxuICAgICAgaXRlcmF0aW9uczogdGhpcy5fX2l0ZXJhdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX19hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMuX2xhc3RWYWx1ZSA9IGZyb21WYWx1ZTtcbiAgICB0aGlzLl9mcm9tVmFsdWUgPSBmcm9tVmFsdWU7XG4gICAgdGhpcy5fb25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgICB0aGlzLl9fb25FbmQgPSBvbkVuZDtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGlmICh0aGlzLl91c2VOYXRpdmVEcml2ZXIpIHtcbiAgICAgIHRoaXMuX19zdGFydE5hdGl2ZUFuaW1hdGlvbihhbmltYXRlZFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBvblVwZGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgdmFsdWUgPVxuICAgICAgdGhpcy5fZnJvbVZhbHVlICtcbiAgICAgICh0aGlzLl92ZWxvY2l0eSAvICgxIC0gdGhpcy5fZGVjZWxlcmF0aW9uKSkgKlxuICAgICAgICAoMSAtIE1hdGguZXhwKC0oMSAtIHRoaXMuX2RlY2VsZXJhdGlvbikgKiAobm93IC0gdGhpcy5fc3RhcnRUaW1lKSkpO1xuXG4gICAgdGhpcy5fb25VcGRhdGUodmFsdWUpO1xuXG4gICAgaWYgKE1hdGguYWJzKHRoaXMuX2xhc3RWYWx1ZSAtIHZhbHVlKSA8IDAuMSkge1xuICAgICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kKHtmaW5pc2hlZDogdHJ1ZX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3RWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLl9fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIHN0b3AoKTogdm9pZCB7XG4gICAgc3VwZXIuc3RvcCgpO1xuICAgIHRoaXMuX19hY3RpdmUgPSBmYWxzZTtcbiAgICBnbG9iYWwuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uRnJhbWUpO1xuICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZCh7ZmluaXNoZWQ6IGZhbHNlfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWNheUFuaW1hdGlvbjtcbiJdfQ==