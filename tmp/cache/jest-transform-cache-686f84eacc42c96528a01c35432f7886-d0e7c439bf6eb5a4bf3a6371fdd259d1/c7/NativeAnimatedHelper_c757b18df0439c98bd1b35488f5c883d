9e2d0d036b7bc210fa548185906542fc
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _NativeEventEmitter = _interopRequireDefault(require("../../EventEmitter/NativeEventEmitter"));

var _NativeAnimatedModule = _interopRequireDefault(require("./NativeAnimatedModule"));

var _invariant = _interopRequireDefault(require("invariant"));

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var queueConnections = false;
var queue = [];
var API = {
  enableQueue: function enableQueue() {
    queueConnections = true;
  },
  disableQueue: function disableQueue() {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');
    queueConnections = false;

    for (var q = 0, l = queue.length; q < l; q++) {
      var args = queue[q];

      _NativeAnimatedModule["default"].connectAnimatedNodes(args[0], args[1]);
    }

    queue.length = 0;
  },
  createAnimatedNode: function createAnimatedNode(tag, config) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    if (queueConnections) {
      queue.push([parentTag, childTag]);
      return;
    }

    _NativeAnimatedModule["default"].connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');

    _NativeAnimatedModule["default"].removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};
var STYLES_WHITELIST = {
  opacity: true,
  transform: true,
  borderRadius: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  elevation: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};
var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  rotateZ: true,
  perspective: true
};
var SUPPORTED_INTERPOLATION_PARAMS = {
  inputRange: true,
  outputRange: true,
  extrapolate: true,
  extrapolateRight: true,
  extrapolateLeft: true
};

function addWhitelistedStyleProp(prop) {
  STYLES_WHITELIST[prop] = true;
}

function addWhitelistedTransformProp(prop) {
  TRANSFORM_WHITELIST[prop] = true;
}

function addWhitelistedInterpolationParam(param) {
  SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error("Property '" + config.property + "' is not supported by native animated module");
    }
  });
}

function validateStyles(styles) {
  for (var _key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(_key)) {
      throw new Error("Style property '" + _key + "' is not supported by native animated module");
    }
  }
}

function validateInterpolation(config) {
  for (var _key2 in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(_key2)) {
      throw new Error("Interpolation property '" + _key2 + "' is not supported by native animated module");
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  (0, _invariant["default"])(_NativeAnimatedModule["default"], 'Native animated module is not available');
}

var _warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver === true && !_NativeAnimatedModule["default"]) {
    if (!_warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      _warnedMissingNativeAnimated = true;
    }

    return false;
  }

  return config.useNativeDriver || false;
}

function transformDataType(value) {
  if (typeof value !== 'string') {
    return value;
  }

  if (/deg$/.test(value)) {
    var degrees = parseFloat(value) || 0;
    var radians = degrees * Math.PI / 180.0;
    return radians;
  } else {
    return value;
  }
}

module.exports = {
  API: API,
  addWhitelistedStyleProp: addWhitelistedStyleProp,
  addWhitelistedTransformProp: addWhitelistedTransformProp,
  addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  shouldUseNativeDriver: shouldUseNativeDriver,
  transformDataType: transformDataType,

  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new _NativeEventEmitter["default"](_NativeAnimatedModule["default"]);
    }

    return nativeEventEmitter;
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdGl2ZUFuaW1hdGVkSGVscGVyLmpzIl0sIm5hbWVzIjpbIl9fbmF0aXZlQW5pbWF0ZWROb2RlVGFnQ291bnQiLCJfX25hdGl2ZUFuaW1hdGlvbklkQ291bnQiLCJuYXRpdmVFdmVudEVtaXR0ZXIiLCJxdWV1ZUNvbm5lY3Rpb25zIiwicXVldWUiLCJBUEkiLCJlbmFibGVRdWV1ZSIsImRpc2FibGVRdWV1ZSIsIk5hdGl2ZUFuaW1hdGVkTW9kdWxlIiwicSIsImwiLCJsZW5ndGgiLCJhcmdzIiwiY29ubmVjdEFuaW1hdGVkTm9kZXMiLCJjcmVhdGVBbmltYXRlZE5vZGUiLCJ0YWciLCJjb25maWciLCJzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUiLCJzdG9wTGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZSIsInBhcmVudFRhZyIsImNoaWxkVGFnIiwicHVzaCIsImRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiYW5pbWF0aW9uSWQiLCJub2RlVGFnIiwiZW5kQ2FsbGJhY2siLCJzdG9wQW5pbWF0aW9uIiwic2V0QW5pbWF0ZWROb2RlVmFsdWUiLCJ2YWx1ZSIsInNldEFuaW1hdGVkTm9kZU9mZnNldCIsIm9mZnNldCIsImZsYXR0ZW5BbmltYXRlZE5vZGVPZmZzZXQiLCJleHRyYWN0QW5pbWF0ZWROb2RlT2Zmc2V0IiwiY29ubmVjdEFuaW1hdGVkTm9kZVRvVmlldyIsInZpZXdUYWciLCJkaXNjb25uZWN0QW5pbWF0ZWROb2RlRnJvbVZpZXciLCJkcm9wQW5pbWF0ZWROb2RlIiwiYWRkQW5pbWF0ZWRFdmVudFRvVmlldyIsImV2ZW50TmFtZSIsImV2ZW50TWFwcGluZyIsInJlbW92ZUFuaW1hdGVkRXZlbnRGcm9tVmlldyIsImFuaW1hdGVkTm9kZVRhZyIsIlNUWUxFU19XSElURUxJU1QiLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyQm90dG9tRW5kUmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tU3RhcnRSYWRpdXMiLCJib3JkZXJUb3BFbmRSYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJUb3BTdGFydFJhZGl1cyIsImVsZXZhdGlvbiIsInNoYWRvd09wYWNpdHkiLCJzaGFkb3dSYWRpdXMiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsIlRSQU5TRk9STV9XSElURUxJU1QiLCJzY2FsZSIsInJvdGF0ZSIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInBlcnNwZWN0aXZlIiwiU1VQUE9SVEVEX0lOVEVSUE9MQVRJT05fUEFSQU1TIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiZXh0cmFwb2xhdGUiLCJleHRyYXBvbGF0ZVJpZ2h0IiwiZXh0cmFwb2xhdGVMZWZ0IiwiYWRkV2hpdGVsaXN0ZWRTdHlsZVByb3AiLCJwcm9wIiwiYWRkV2hpdGVsaXN0ZWRUcmFuc2Zvcm1Qcm9wIiwiYWRkV2hpdGVsaXN0ZWRJbnRlcnBvbGF0aW9uUGFyYW0iLCJwYXJhbSIsInZhbGlkYXRlVHJhbnNmb3JtIiwiY29uZmlncyIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BlcnR5IiwiRXJyb3IiLCJ2YWxpZGF0ZVN0eWxlcyIsInN0eWxlcyIsImtleSIsInZhbGlkYXRlSW50ZXJwb2xhdGlvbiIsImdlbmVyYXRlTmV3Tm9kZVRhZyIsImdlbmVyYXRlTmV3QW5pbWF0aW9uSWQiLCJhc3NlcnROYXRpdmVBbmltYXRlZE1vZHVsZSIsIl93YXJuZWRNaXNzaW5nTmF0aXZlQW5pbWF0ZWQiLCJzaG91bGRVc2VOYXRpdmVEcml2ZXIiLCJ1c2VOYXRpdmVEcml2ZXIiLCJjb25zb2xlIiwid2FybiIsInRyYW5zZm9ybURhdGFUeXBlIiwidGVzdCIsImRlZ3JlZXMiLCJwYXJzZUZsb2F0IiwicmFkaWFucyIsIk1hdGgiLCJQSSIsIm1vZHVsZSIsImV4cG9ydHMiLCJOYXRpdmVFdmVudEVtaXR0ZXIiXSwibWFwcGluZ3MiOiJBQVNBOzs7O0FBRUE7O0FBRUE7O0FBUUE7O0FBRUEsSUFBSUEsNEJBQTRCLEdBQUcsQ0FBbkM7QUFDQSxJQUFJQyx3QkFBd0IsR0FBRyxDQUEvQjtBQUVBLElBQUlDLGtCQUFKO0FBRUEsSUFBSUMsZ0JBQWdCLEdBQUcsS0FBdkI7QUFDQSxJQUFJQyxLQUFLLEdBQUcsRUFBWjtBQU1BLElBQU1DLEdBQUcsR0FBRztBQUNWQyxFQUFBQSxXQUFXLEVBQUUsdUJBQWlCO0FBQzVCSCxJQUFBQSxnQkFBZ0IsR0FBRyxJQUFuQjtBQUNELEdBSFM7QUFJVkksRUFBQUEsWUFBWSxFQUFFLHdCQUFpQjtBQUM3QiwrQkFBVUMsZ0NBQVYsRUFBZ0MseUNBQWhDO0FBQ0FMLElBQUFBLGdCQUFnQixHQUFHLEtBQW5COztBQUNBLFNBQUssSUFBSU0sQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHTixLQUFLLENBQUNPLE1BQTFCLEVBQWtDRixDQUFDLEdBQUdDLENBQXRDLEVBQXlDRCxDQUFDLEVBQTFDLEVBQThDO0FBQzVDLFVBQU1HLElBQUksR0FBR1IsS0FBSyxDQUFDSyxDQUFELENBQWxCOztBQUNBRCx1Q0FBcUJLLG9CQUFyQixDQUEwQ0QsSUFBSSxDQUFDLENBQUQsQ0FBOUMsRUFBbURBLElBQUksQ0FBQyxDQUFELENBQXZEO0FBQ0Q7O0FBQ0RSLElBQUFBLEtBQUssQ0FBQ08sTUFBTixHQUFlLENBQWY7QUFDRCxHQVpTO0FBYVZHLEVBQUFBLGtCQUFrQixFQUFFLDRCQUFTQyxHQUFULEVBQXVCQyxNQUF2QixFQUF5RDtBQUMzRSwrQkFBVVIsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJNLGtCQUFyQixDQUF3Q0MsR0FBeEMsRUFBNkNDLE1BQTdDO0FBQ0QsR0FoQlM7QUFpQlZDLEVBQUFBLGlDQUFpQyxFQUFFLDJDQUFTRixHQUFULEVBQXVCO0FBQ3hELCtCQUFVUCxnQ0FBVixFQUFnQyx5Q0FBaEM7O0FBQ0FBLHFDQUFxQlMsaUNBQXJCLENBQXVERixHQUF2RDtBQUNELEdBcEJTO0FBcUJWRyxFQUFBQSxnQ0FBZ0MsRUFBRSwwQ0FBU0gsR0FBVCxFQUF1QjtBQUN2RCwrQkFBVVAsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJVLGdDQUFyQixDQUFzREgsR0FBdEQ7QUFDRCxHQXhCUztBQXlCVkYsRUFBQUEsb0JBQW9CLEVBQUUsOEJBQVNNLFNBQVQsRUFBNkJDLFFBQTdCLEVBQXNEO0FBQzFFLCtCQUFVWixnQ0FBVixFQUFnQyx5Q0FBaEM7O0FBQ0EsUUFBSUwsZ0JBQUosRUFBc0I7QUFDcEJDLE1BQUFBLEtBQUssQ0FBQ2lCLElBQU4sQ0FBVyxDQUFDRixTQUFELEVBQVlDLFFBQVosQ0FBWDtBQUNBO0FBQ0Q7O0FBQ0RaLHFDQUFxQkssb0JBQXJCLENBQTBDTSxTQUExQyxFQUFxREMsUUFBckQ7QUFDRCxHQWhDUztBQWlDVkUsRUFBQUEsdUJBQXVCLEVBQUUsaUNBQ3ZCSCxTQUR1QixFQUV2QkMsUUFGdUIsRUFHakI7QUFDTiwrQkFBVVosZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJjLHVCQUFyQixDQUE2Q0gsU0FBN0MsRUFBd0RDLFFBQXhEO0FBQ0QsR0F2Q1M7QUF3Q1ZHLEVBQUFBLGtCQUFrQixFQUFFLDRCQUNsQkMsV0FEa0IsRUFFbEJDLE9BRmtCLEVBR2xCVCxNQUhrQixFQUlsQlUsV0FKa0IsRUFLWjtBQUNOLCtCQUFVbEIsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJlLGtCQUFyQixDQUNFQyxXQURGLEVBRUVDLE9BRkYsRUFHRVQsTUFIRixFQUlFVSxXQUpGO0FBTUQsR0FyRFM7QUFzRFZDLEVBQUFBLGFBQWEsRUFBRSx1QkFBU0gsV0FBVCxFQUErQjtBQUM1QywrQkFBVWhCLGdDQUFWLEVBQWdDLHlDQUFoQzs7QUFDQUEscUNBQXFCbUIsYUFBckIsQ0FBbUNILFdBQW5DO0FBQ0QsR0F6RFM7QUEwRFZJLEVBQUFBLG9CQUFvQixFQUFFLDhCQUFTSCxPQUFULEVBQTJCSSxLQUEzQixFQUFpRDtBQUNyRSwrQkFBVXJCLGdDQUFWLEVBQWdDLHlDQUFoQzs7QUFDQUEscUNBQXFCb0Isb0JBQXJCLENBQTBDSCxPQUExQyxFQUFtREksS0FBbkQ7QUFDRCxHQTdEUztBQThEVkMsRUFBQUEscUJBQXFCLEVBQUUsK0JBQVNMLE9BQVQsRUFBMkJNLE1BQTNCLEVBQWtEO0FBQ3ZFLCtCQUFVdkIsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJzQixxQkFBckIsQ0FBMkNMLE9BQTNDLEVBQW9ETSxNQUFwRDtBQUNELEdBakVTO0FBa0VWQyxFQUFBQSx5QkFBeUIsRUFBRSxtQ0FBU1AsT0FBVCxFQUFpQztBQUMxRCwrQkFBVWpCLGdDQUFWLEVBQWdDLHlDQUFoQzs7QUFDQUEscUNBQXFCd0IseUJBQXJCLENBQStDUCxPQUEvQztBQUNELEdBckVTO0FBc0VWUSxFQUFBQSx5QkFBeUIsRUFBRSxtQ0FBU1IsT0FBVCxFQUFpQztBQUMxRCwrQkFBVWpCLGdDQUFWLEVBQWdDLHlDQUFoQzs7QUFDQUEscUNBQXFCeUIseUJBQXJCLENBQStDUixPQUEvQztBQUNELEdBekVTO0FBMEVWUyxFQUFBQSx5QkFBeUIsRUFBRSxtQ0FDekJULE9BRHlCLEVBRXpCVSxPQUZ5QixFQUduQjtBQUNOLCtCQUFVM0IsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUIwQix5QkFBckIsQ0FBK0NULE9BQS9DLEVBQXdEVSxPQUF4RDtBQUNELEdBaEZTO0FBaUZWQyxFQUFBQSw4QkFBOEIsRUFBRSx3Q0FDOUJYLE9BRDhCLEVBRTlCVSxPQUY4QixFQUd4QjtBQUNOLCtCQUFVM0IsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUI0Qiw4QkFBckIsQ0FBb0RYLE9BQXBELEVBQTZEVSxPQUE3RDtBQUNELEdBdkZTO0FBd0ZWRSxFQUFBQSxnQkFBZ0IsRUFBRSwwQkFBU3RCLEdBQVQsRUFBNkI7QUFDN0MsK0JBQVVQLGdDQUFWLEVBQWdDLHlDQUFoQzs7QUFDQUEscUNBQXFCNkIsZ0JBQXJCLENBQXNDdEIsR0FBdEM7QUFDRCxHQTNGUztBQTRGVnVCLEVBQUFBLHNCQUFzQixFQUFFLGdDQUN0QkgsT0FEc0IsRUFFdEJJLFNBRnNCLEVBR3RCQyxZQUhzQixFQUl0QjtBQUNBLCtCQUFVaEMsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUI4QixzQkFBckIsQ0FDRUgsT0FERixFQUVFSSxTQUZGLEVBR0VDLFlBSEY7QUFLRCxHQXZHUztBQXdHVkMsRUFBQUEsMkJBeEdVLHVDQXlHUk4sT0F6R1EsRUEwR1JJLFNBMUdRLEVBMkdSRyxlQTNHUSxFQTRHUjtBQUNBLCtCQUFVbEMsZ0NBQVYsRUFBZ0MseUNBQWhDOztBQUNBQSxxQ0FBcUJpQywyQkFBckIsQ0FDRU4sT0FERixFQUVFSSxTQUZGLEVBR0VHLGVBSEY7QUFLRDtBQW5IUyxDQUFaO0FBNEhBLElBQU1DLGdCQUFnQixHQUFHO0FBQ3ZCQyxFQUFBQSxPQUFPLEVBQUUsSUFEYztBQUV2QkMsRUFBQUEsU0FBUyxFQUFFLElBRlk7QUFHdkJDLEVBQUFBLFlBQVksRUFBRSxJQUhTO0FBSXZCQyxFQUFBQSxxQkFBcUIsRUFBRSxJQUpBO0FBS3ZCQyxFQUFBQSxzQkFBc0IsRUFBRSxJQUxEO0FBTXZCQyxFQUFBQSx1QkFBdUIsRUFBRSxJQU5GO0FBT3ZCQyxFQUFBQSx1QkFBdUIsRUFBRSxJQVBGO0FBUXZCQyxFQUFBQSxrQkFBa0IsRUFBRSxJQVJHO0FBU3ZCQyxFQUFBQSxtQkFBbUIsRUFBRSxJQVRFO0FBVXZCQyxFQUFBQSxvQkFBb0IsRUFBRSxJQVZDO0FBV3ZCQyxFQUFBQSxvQkFBb0IsRUFBRSxJQVhDO0FBWXZCQyxFQUFBQSxTQUFTLEVBQUUsSUFaWTtBQWN2QkMsRUFBQUEsYUFBYSxFQUFFLElBZFE7QUFldkJDLEVBQUFBLFlBQVksRUFBRSxJQWZTO0FBaUJ2QkMsRUFBQUEsTUFBTSxFQUFFLElBakJlO0FBa0J2QkMsRUFBQUEsTUFBTSxFQUFFLElBbEJlO0FBbUJ2QkMsRUFBQUEsVUFBVSxFQUFFLElBbkJXO0FBb0J2QkMsRUFBQUEsVUFBVSxFQUFFO0FBcEJXLENBQXpCO0FBdUJBLElBQU1DLG1CQUFtQixHQUFHO0FBQzFCRixFQUFBQSxVQUFVLEVBQUUsSUFEYztBQUUxQkMsRUFBQUEsVUFBVSxFQUFFLElBRmM7QUFHMUJFLEVBQUFBLEtBQUssRUFBRSxJQUhtQjtBQUkxQkwsRUFBQUEsTUFBTSxFQUFFLElBSmtCO0FBSzFCQyxFQUFBQSxNQUFNLEVBQUUsSUFMa0I7QUFNMUJLLEVBQUFBLE1BQU0sRUFBRSxJQU5rQjtBQU8xQkMsRUFBQUEsT0FBTyxFQUFFLElBUGlCO0FBUTFCQyxFQUFBQSxPQUFPLEVBQUUsSUFSaUI7QUFTMUJDLEVBQUFBLE9BQU8sRUFBRSxJQVRpQjtBQVUxQkMsRUFBQUEsV0FBVyxFQUFFO0FBVmEsQ0FBNUI7QUFhQSxJQUFNQyw4QkFBOEIsR0FBRztBQUNyQ0MsRUFBQUEsVUFBVSxFQUFFLElBRHlCO0FBRXJDQyxFQUFBQSxXQUFXLEVBQUUsSUFGd0I7QUFHckNDLEVBQUFBLFdBQVcsRUFBRSxJQUh3QjtBQUlyQ0MsRUFBQUEsZ0JBQWdCLEVBQUUsSUFKbUI7QUFLckNDLEVBQUFBLGVBQWUsRUFBRTtBQUxvQixDQUF2Qzs7QUFRQSxTQUFTQyx1QkFBVCxDQUFpQ0MsSUFBakMsRUFBcUQ7QUFDbkRqQyxFQUFBQSxnQkFBZ0IsQ0FBQ2lDLElBQUQsQ0FBaEIsR0FBeUIsSUFBekI7QUFDRDs7QUFFRCxTQUFTQywyQkFBVCxDQUFxQ0QsSUFBckMsRUFBeUQ7QUFDdkRkLEVBQUFBLG1CQUFtQixDQUFDYyxJQUFELENBQW5CLEdBQTRCLElBQTVCO0FBQ0Q7O0FBRUQsU0FBU0UsZ0NBQVQsQ0FBMENDLEtBQTFDLEVBQStEO0FBQzdEVixFQUFBQSw4QkFBOEIsQ0FBQ1UsS0FBRCxDQUE5QixHQUF3QyxJQUF4QztBQUNEOztBQUVELFNBQVNDLGlCQUFULENBQ0VDLE9BREYsRUFLUTtBQUNOQSxFQUFBQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsVUFBQWxFLE1BQU0sRUFBSTtBQUN4QixRQUFJLENBQUM4QyxtQkFBbUIsQ0FBQ3FCLGNBQXBCLENBQW1DbkUsTUFBTSxDQUFDb0UsUUFBMUMsQ0FBTCxFQUEwRDtBQUN4RCxZQUFNLElBQUlDLEtBQUosZ0JBRUZyRSxNQUFNLENBQUNvRSxRQUZMLGtEQUFOO0FBS0Q7QUFDRixHQVJEO0FBU0Q7O0FBRUQsU0FBU0UsY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0U7QUFDOUQsT0FBSyxJQUFNQyxJQUFYLElBQWtCRCxNQUFsQixFQUEwQjtBQUN4QixRQUFJLENBQUM1QyxnQkFBZ0IsQ0FBQ3dDLGNBQWpCLENBQWdDSyxJQUFoQyxDQUFMLEVBQTJDO0FBQ3pDLFlBQU0sSUFBSUgsS0FBSixzQkFDZUcsSUFEZixrREFBTjtBQUdEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQnpFLE1BQS9CLEVBQXNFO0FBQ3BFLE9BQUssSUFBTXdFLEtBQVgsSUFBa0J4RSxNQUFsQixFQUEwQjtBQUN4QixRQUFJLENBQUNxRCw4QkFBOEIsQ0FBQ2MsY0FBL0IsQ0FBOENLLEtBQTlDLENBQUwsRUFBeUQ7QUFDdkQsWUFBTSxJQUFJSCxLQUFKLDhCQUN1QkcsS0FEdkIsa0RBQU47QUFHRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU0Usa0JBQVQsR0FBc0M7QUFDcEMsU0FBTzFGLDRCQUE0QixFQUFuQztBQUNEOztBQUVELFNBQVMyRixzQkFBVCxHQUEwQztBQUN4QyxTQUFPMUYsd0JBQXdCLEVBQS9CO0FBQ0Q7O0FBRUQsU0FBUzJGLDBCQUFULEdBQTRDO0FBQzFDLDZCQUFVcEYsZ0NBQVYsRUFBZ0MseUNBQWhDO0FBQ0Q7O0FBRUQsSUFBSXFGLDRCQUE0QixHQUFHLEtBQW5DOztBQUVBLFNBQVNDLHFCQUFULENBQStCOUUsTUFBL0IsRUFBK0U7QUFDN0UsTUFBSUEsTUFBTSxDQUFDK0UsZUFBUCxLQUEyQixJQUEzQixJQUFtQyxDQUFDdkYsZ0NBQXhDLEVBQThEO0FBQzVELFFBQUksQ0FBQ3FGLDRCQUFMLEVBQW1DO0FBQ2pDRyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FDRSxxRUFDRSxxRUFERixHQUVFLGlFQUZGLEdBR0UscUJBSEYsR0FJRSx5RkFMSjtBQU9BSixNQUFBQSw0QkFBNEIsR0FBRyxJQUEvQjtBQUNEOztBQUNELFdBQU8sS0FBUDtBQUNEOztBQUVELFNBQU83RSxNQUFNLENBQUMrRSxlQUFQLElBQTBCLEtBQWpDO0FBQ0Q7O0FBRUQsU0FBU0csaUJBQVQsQ0FBMkJyRSxLQUEzQixFQUFvRTtBQUdsRSxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsV0FBT0EsS0FBUDtBQUNEOztBQUNELE1BQUksT0FBT3NFLElBQVAsQ0FBWXRFLEtBQVosQ0FBSixFQUF3QjtBQUN0QixRQUFNdUUsT0FBTyxHQUFHQyxVQUFVLENBQUN4RSxLQUFELENBQVYsSUFBcUIsQ0FBckM7QUFDQSxRQUFNeUUsT0FBTyxHQUFJRixPQUFPLEdBQUdHLElBQUksQ0FBQ0MsRUFBaEIsR0FBc0IsS0FBdEM7QUFDQSxXQUFPRixPQUFQO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsV0FBT3pFLEtBQVA7QUFDRDtBQUNGOztBQUVENEUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZyRyxFQUFBQSxHQUFHLEVBQUhBLEdBRGU7QUFFZnNFLEVBQUFBLHVCQUF1QixFQUF2QkEsdUJBRmU7QUFHZkUsRUFBQUEsMkJBQTJCLEVBQTNCQSwyQkFIZTtBQUlmQyxFQUFBQSxnQ0FBZ0MsRUFBaENBLGdDQUplO0FBS2ZRLEVBQUFBLGNBQWMsRUFBZEEsY0FMZTtBQU1mTixFQUFBQSxpQkFBaUIsRUFBakJBLGlCQU5lO0FBT2ZTLEVBQUFBLHFCQUFxQixFQUFyQkEscUJBUGU7QUFRZkMsRUFBQUEsa0JBQWtCLEVBQWxCQSxrQkFSZTtBQVNmQyxFQUFBQSxzQkFBc0IsRUFBdEJBLHNCQVRlO0FBVWZDLEVBQUFBLDBCQUEwQixFQUExQkEsMEJBVmU7QUFXZkUsRUFBQUEscUJBQXFCLEVBQXJCQSxxQkFYZTtBQVlmSSxFQUFBQSxpQkFBaUIsRUFBakJBLGlCQVplOztBQWNmLE1BQUloRyxrQkFBSixHQUE2QztBQUMzQyxRQUFJLENBQUNBLGtCQUFMLEVBQXlCO0FBQ3ZCQSxNQUFBQSxrQkFBa0IsR0FBRyxJQUFJeUcsOEJBQUosQ0FBdUJuRyxnQ0FBdkIsQ0FBckI7QUFDRDs7QUFDRCxXQUFPTixrQkFBUDtBQUNEOztBQW5CYyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE5hdGl2ZUV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJztcbmltcG9ydCB0eXBlIHtFdmVudENvbmZpZ30gZnJvbSAnLi9BbmltYXRlZEV2ZW50JztcbmltcG9ydCBOYXRpdmVBbmltYXRlZE1vZHVsZSBmcm9tICcuL05hdGl2ZUFuaW1hdGVkTW9kdWxlJztcbmltcG9ydCB0eXBlIHtcbiAgRXZlbnRNYXBwaW5nLFxuICBBbmltYXRlZE5vZGVDb25maWcsXG4gIEFuaW1hdGluZ05vZGVDb25maWcsXG59IGZyb20gJy4vTmF0aXZlQW5pbWF0ZWRNb2R1bGUnO1xuaW1wb3J0IHR5cGUge0FuaW1hdGlvbkNvbmZpZywgRW5kQ2FsbGJhY2t9IGZyb20gJy4vYW5pbWF0aW9ucy9BbmltYXRpb24nO1xuaW1wb3J0IHR5cGUge0ludGVycG9sYXRpb25Db25maWdUeXBlfSBmcm9tICcuL25vZGVzL0FuaW1hdGVkSW50ZXJwb2xhdGlvbic7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbmxldCBfX25hdGl2ZUFuaW1hdGVkTm9kZVRhZ0NvdW50ID0gMTsgLyogdXNlZCBmb3IgYW5pbWF0ZWQgbm9kZXMgKi9cbmxldCBfX25hdGl2ZUFuaW1hdGlvbklkQ291bnQgPSAxOyAvKiB1c2VkIGZvciBzdGFydGVkIGFuaW1hdGlvbnMgKi9cblxubGV0IG5hdGl2ZUV2ZW50RW1pdHRlcjtcblxubGV0IHF1ZXVlQ29ubmVjdGlvbnMgPSBmYWxzZTtcbmxldCBxdWV1ZSA9IFtdO1xuXG4vKipcbiAqIFNpbXBsZSB3cmFwcGVycyBhcm91bmQgTmF0aXZlQW5pbWF0ZWRNb2R1bGUgdG8gcHJvdmlkZSBmbG93IGFuZCBhdXRvY29tcGxldGUgc3VwcG9ydCBmb3JcbiAqIHRoZSBuYXRpdmUgbW9kdWxlIG1ldGhvZHNcbiAqL1xuY29uc3QgQVBJID0ge1xuICBlbmFibGVRdWV1ZTogZnVuY3Rpb24oKTogdm9pZCB7XG4gICAgcXVldWVDb25uZWN0aW9ucyA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGVRdWV1ZTogZnVuY3Rpb24oKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgcXVldWVDb25uZWN0aW9ucyA9IGZhbHNlO1xuICAgIGZvciAobGV0IHEgPSAwLCBsID0gcXVldWUubGVuZ3RoOyBxIDwgbDsgcSsrKSB7XG4gICAgICBjb25zdCBhcmdzID0gcXVldWVbcV07XG4gICAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5jb25uZWN0QW5pbWF0ZWROb2RlcyhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgfSxcbiAgY3JlYXRlQW5pbWF0ZWROb2RlOiBmdW5jdGlvbih0YWc6ID9udW1iZXIsIGNvbmZpZzogQW5pbWF0ZWROb2RlQ29uZmlnKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuY3JlYXRlQW5pbWF0ZWROb2RlKHRhZywgY29uZmlnKTtcbiAgfSxcbiAgc3RhcnRMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlOiBmdW5jdGlvbih0YWc6ID9udW1iZXIpIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5zdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUodGFnKTtcbiAgfSxcbiAgc3RvcExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWU6IGZ1bmN0aW9uKHRhZzogP251bWJlcikge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnN0b3BMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlKHRhZyk7XG4gIH0sXG4gIGNvbm5lY3RBbmltYXRlZE5vZGVzOiBmdW5jdGlvbihwYXJlbnRUYWc6ID9udW1iZXIsIGNoaWxkVGFnOiA/bnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgaWYgKHF1ZXVlQ29ubmVjdGlvbnMpIHtcbiAgICAgIHF1ZXVlLnB1c2goW3BhcmVudFRhZywgY2hpbGRUYWddKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuY29ubmVjdEFuaW1hdGVkTm9kZXMocGFyZW50VGFnLCBjaGlsZFRhZyk7XG4gIH0sXG4gIGRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzOiBmdW5jdGlvbihcbiAgICBwYXJlbnRUYWc6ID9udW1iZXIsXG4gICAgY2hpbGRUYWc6ID9udW1iZXIsXG4gICk6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLmRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzKHBhcmVudFRhZywgY2hpbGRUYWcpO1xuICB9LFxuICBzdGFydEFuaW1hdGluZ05vZGU6IGZ1bmN0aW9uKFxuICAgIGFuaW1hdGlvbklkOiA/bnVtYmVyLFxuICAgIG5vZGVUYWc6ID9udW1iZXIsXG4gICAgY29uZmlnOiBBbmltYXRpbmdOb2RlQ29uZmlnLFxuICAgIGVuZENhbGxiYWNrOiBFbmRDYWxsYmFjayxcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuc3RhcnRBbmltYXRpbmdOb2RlKFxuICAgICAgYW5pbWF0aW9uSWQsXG4gICAgICBub2RlVGFnLFxuICAgICAgY29uZmlnLFxuICAgICAgZW5kQ2FsbGJhY2ssXG4gICAgKTtcbiAgfSxcbiAgc3RvcEFuaW1hdGlvbjogZnVuY3Rpb24oYW5pbWF0aW9uSWQ6ID9udW1iZXIpIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5zdG9wQW5pbWF0aW9uKGFuaW1hdGlvbklkKTtcbiAgfSxcbiAgc2V0QW5pbWF0ZWROb2RlVmFsdWU6IGZ1bmN0aW9uKG5vZGVUYWc6ID9udW1iZXIsIHZhbHVlOiA/bnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuc2V0QW5pbWF0ZWROb2RlVmFsdWUobm9kZVRhZywgdmFsdWUpO1xuICB9LFxuICBzZXRBbmltYXRlZE5vZGVPZmZzZXQ6IGZ1bmN0aW9uKG5vZGVUYWc6ID9udW1iZXIsIG9mZnNldDogP251bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnNldEFuaW1hdGVkTm9kZU9mZnNldChub2RlVGFnLCBvZmZzZXQpO1xuICB9LFxuICBmbGF0dGVuQW5pbWF0ZWROb2RlT2Zmc2V0OiBmdW5jdGlvbihub2RlVGFnOiA/bnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuZmxhdHRlbkFuaW1hdGVkTm9kZU9mZnNldChub2RlVGFnKTtcbiAgfSxcbiAgZXh0cmFjdEFuaW1hdGVkTm9kZU9mZnNldDogZnVuY3Rpb24obm9kZVRhZzogP251bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLmV4dHJhY3RBbmltYXRlZE5vZGVPZmZzZXQobm9kZVRhZyk7XG4gIH0sXG4gIGNvbm5lY3RBbmltYXRlZE5vZGVUb1ZpZXc6IGZ1bmN0aW9uKFxuICAgIG5vZGVUYWc6ID9udW1iZXIsXG4gICAgdmlld1RhZzogP251bWJlcixcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuY29ubmVjdEFuaW1hdGVkTm9kZVRvVmlldyhub2RlVGFnLCB2aWV3VGFnKTtcbiAgfSxcbiAgZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3OiBmdW5jdGlvbihcbiAgICBub2RlVGFnOiA/bnVtYmVyLFxuICAgIHZpZXdUYWc6ID9udW1iZXIsXG4gICk6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLmRpc2Nvbm5lY3RBbmltYXRlZE5vZGVGcm9tVmlldyhub2RlVGFnLCB2aWV3VGFnKTtcbiAgfSxcbiAgZHJvcEFuaW1hdGVkTm9kZTogZnVuY3Rpb24odGFnOiA/bnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuZHJvcEFuaW1hdGVkTm9kZSh0YWcpO1xuICB9LFxuICBhZGRBbmltYXRlZEV2ZW50VG9WaWV3OiBmdW5jdGlvbihcbiAgICB2aWV3VGFnOiA/bnVtYmVyLFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIGV2ZW50TWFwcGluZzogRXZlbnRNYXBwaW5nLFxuICApIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5hZGRBbmltYXRlZEV2ZW50VG9WaWV3KFxuICAgICAgdmlld1RhZyxcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGV2ZW50TWFwcGluZyxcbiAgICApO1xuICB9LFxuICByZW1vdmVBbmltYXRlZEV2ZW50RnJvbVZpZXcoXG4gICAgdmlld1RhZzogP251bWJlcixcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBhbmltYXRlZE5vZGVUYWc6ID9udW1iZXIsXG4gICkge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnJlbW92ZUFuaW1hdGVkRXZlbnRGcm9tVmlldyhcbiAgICAgIHZpZXdUYWcsXG4gICAgICBldmVudE5hbWUsXG4gICAgICBhbmltYXRlZE5vZGVUYWcsXG4gICAgKTtcbiAgfSxcbn07XG5cbi8qKlxuICogU3R5bGVzIGFsbG93ZWQgYnkgdGhlIG5hdGl2ZSBhbmltYXRlZCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBJbiBnZW5lcmFsIG5hdGl2ZSBhbmltYXRlZCBpbXBsZW1lbnRhdGlvbiBzaG91bGQgc3VwcG9ydCBhbnkgbnVtZXJpYyBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgbmVlZFxuICogdG8gYmUgdXBkYXRlZCB0aHJvdWdoIHRoZSBzaGFkb3cgdmlldyBoaWVyYXJjaHkgKGFsbCBub24tbGF5b3V0IHByb3BlcnRpZXMpLlxuICovXG5jb25zdCBTVFlMRVNfV0hJVEVMSVNUID0ge1xuICBvcGFjaXR5OiB0cnVlLFxuICB0cmFuc2Zvcm06IHRydWUsXG4gIGJvcmRlclJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyQm90dG9tRW5kUmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyQm90dG9tU3RhcnRSYWRpdXM6IHRydWUsXG4gIGJvcmRlclRvcEVuZFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wTGVmdFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRydWUsXG4gIGJvcmRlclRvcFN0YXJ0UmFkaXVzOiB0cnVlLFxuICBlbGV2YXRpb246IHRydWUsXG4gIC8qIGlvcyBzdHlsZXMgKi9cbiAgc2hhZG93T3BhY2l0eTogdHJ1ZSxcbiAgc2hhZG93UmFkaXVzOiB0cnVlLFxuICAvKiBsZWdhY3kgYW5kcm9pZCB0cmFuc2Zvcm0gcHJvcGVydGllcyAqL1xuICBzY2FsZVg6IHRydWUsXG4gIHNjYWxlWTogdHJ1ZSxcbiAgdHJhbnNsYXRlWDogdHJ1ZSxcbiAgdHJhbnNsYXRlWTogdHJ1ZSxcbn07XG5cbmNvbnN0IFRSQU5TRk9STV9XSElURUxJU1QgPSB7XG4gIHRyYW5zbGF0ZVg6IHRydWUsXG4gIHRyYW5zbGF0ZVk6IHRydWUsXG4gIHNjYWxlOiB0cnVlLFxuICBzY2FsZVg6IHRydWUsXG4gIHNjYWxlWTogdHJ1ZSxcbiAgcm90YXRlOiB0cnVlLFxuICByb3RhdGVYOiB0cnVlLFxuICByb3RhdGVZOiB0cnVlLFxuICByb3RhdGVaOiB0cnVlLFxuICBwZXJzcGVjdGl2ZTogdHJ1ZSxcbn07XG5cbmNvbnN0IFNVUFBPUlRFRF9JTlRFUlBPTEFUSU9OX1BBUkFNUyA9IHtcbiAgaW5wdXRSYW5nZTogdHJ1ZSxcbiAgb3V0cHV0UmFuZ2U6IHRydWUsXG4gIGV4dHJhcG9sYXRlOiB0cnVlLFxuICBleHRyYXBvbGF0ZVJpZ2h0OiB0cnVlLFxuICBleHRyYXBvbGF0ZUxlZnQ6IHRydWUsXG59O1xuXG5mdW5jdGlvbiBhZGRXaGl0ZWxpc3RlZFN0eWxlUHJvcChwcm9wOiBzdHJpbmcpOiB2b2lkIHtcbiAgU1RZTEVTX1dISVRFTElTVFtwcm9wXSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGFkZFdoaXRlbGlzdGVkVHJhbnNmb3JtUHJvcChwcm9wOiBzdHJpbmcpOiB2b2lkIHtcbiAgVFJBTlNGT1JNX1dISVRFTElTVFtwcm9wXSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGFkZFdoaXRlbGlzdGVkSW50ZXJwb2xhdGlvblBhcmFtKHBhcmFtOiBzdHJpbmcpOiB2b2lkIHtcbiAgU1VQUE9SVEVEX0lOVEVSUE9MQVRJT05fUEFSQU1TW3BhcmFtXSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHJhbnNmb3JtKFxuICBjb25maWdzOiBBcnJheTxcbiAgICB8IHt0eXBlOiAnYW5pbWF0ZWQnLCBwcm9wZXJ0eTogc3RyaW5nLCBub2RlVGFnOiA/bnVtYmVyfVxuICAgIHwge3R5cGU6ICdzdGF0aWMnLCBwcm9wZXJ0eTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nfSxcbiAgPixcbik6IHZvaWQge1xuICBjb25maWdzLmZvckVhY2goY29uZmlnID0+IHtcbiAgICBpZiAoIVRSQU5TRk9STV9XSElURUxJU1QuaGFzT3duUHJvcGVydHkoY29uZmlnLnByb3BlcnR5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJyR7XG4gICAgICAgICAgY29uZmlnLnByb3BlcnR5XG4gICAgICAgIH0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGFuaW1hdGVkIG1vZHVsZWAsXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGVzKHN0eWxlczoge1trZXk6IHN0cmluZ106ID9udW1iZXJ9KTogdm9pZCB7XG4gIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgIGlmICghU1RZTEVTX1dISVRFTElTVC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBTdHlsZSBwcm9wZXJ0eSAnJHtrZXl9JyBpcyBub3Qgc3VwcG9ydGVkIGJ5IG5hdGl2ZSBhbmltYXRlZCBtb2R1bGVgLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbnRlcnBvbGF0aW9uKGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGUpOiB2b2lkIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gY29uZmlnKSB7XG4gICAgaWYgKCFTVVBQT1JURURfSU5URVJQT0xBVElPTl9QQVJBTVMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW50ZXJwb2xhdGlvbiBwcm9wZXJ0eSAnJHtrZXl9JyBpcyBub3Qgc3VwcG9ydGVkIGJ5IG5hdGl2ZSBhbmltYXRlZCBtb2R1bGVgLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVOZXdOb2RlVGFnKCk6IG51bWJlciB7XG4gIHJldHVybiBfX25hdGl2ZUFuaW1hdGVkTm9kZVRhZ0NvdW50Kys7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV3QW5pbWF0aW9uSWQoKTogbnVtYmVyIHtcbiAgcmV0dXJuIF9fbmF0aXZlQW5pbWF0aW9uSWRDb3VudCsrO1xufVxuXG5mdW5jdGlvbiBhc3NlcnROYXRpdmVBbmltYXRlZE1vZHVsZSgpOiB2b2lkIHtcbiAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG59XG5cbmxldCBfd2FybmVkTWlzc2luZ05hdGl2ZUFuaW1hdGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZURyaXZlcihjb25maWc6IEFuaW1hdGlvbkNvbmZpZyB8IEV2ZW50Q29uZmlnKTogYm9vbGVhbiB7XG4gIGlmIChjb25maWcudXNlTmF0aXZlRHJpdmVyID09PSB0cnVlICYmICFOYXRpdmVBbmltYXRlZE1vZHVsZSkge1xuICAgIGlmICghX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnQW5pbWF0ZWQ6IGB1c2VOYXRpdmVEcml2ZXJgIGlzIG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSB0aGUgbmF0aXZlICcgK1xuICAgICAgICAgICdhbmltYXRlZCBtb2R1bGUgaXMgbWlzc2luZy4gRmFsbGluZyBiYWNrIHRvIEpTLWJhc2VkIGFuaW1hdGlvbi4gVG8gJyArXG4gICAgICAgICAgJ3Jlc29sdmUgdGhpcywgYWRkIGBSQ1RBbmltYXRpb25gIG1vZHVsZSB0byB0aGlzIGFwcCwgb3IgcmVtb3ZlICcgK1xuICAgICAgICAgICdgdXNlTmF0aXZlRHJpdmVyYC4gJyArXG4gICAgICAgICAgJ01vcmUgaW5mbzogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvMTEwOTQjaXNzdWVjb21tZW50LTI2MzI0MDQyMCcsXG4gICAgICApO1xuICAgICAgX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb25maWcudXNlTmF0aXZlRHJpdmVyIHx8IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhVHlwZSh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgLy8gQ2hhbmdlIHRoZSBzdHJpbmcgdHlwZSB0byBudW1iZXIgdHlwZSBzbyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgbG9naWMgaW5cbiAgLy8gaU9TIGFuZCBBbmRyb2lkIHBsYXRmb3JtXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICgvZGVnJC8udGVzdCh2YWx1ZSkpIHtcbiAgICBjb25zdCBkZWdyZWVzID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICBjb25zdCByYWRpYW5zID0gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wO1xuICAgIHJldHVybiByYWRpYW5zO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVBJLFxuICBhZGRXaGl0ZWxpc3RlZFN0eWxlUHJvcCxcbiAgYWRkV2hpdGVsaXN0ZWRUcmFuc2Zvcm1Qcm9wLFxuICBhZGRXaGl0ZWxpc3RlZEludGVycG9sYXRpb25QYXJhbSxcbiAgdmFsaWRhdGVTdHlsZXMsXG4gIHZhbGlkYXRlVHJhbnNmb3JtLFxuICB2YWxpZGF0ZUludGVycG9sYXRpb24sXG4gIGdlbmVyYXRlTmV3Tm9kZVRhZyxcbiAgZ2VuZXJhdGVOZXdBbmltYXRpb25JZCxcbiAgYXNzZXJ0TmF0aXZlQW5pbWF0ZWRNb2R1bGUsXG4gIHNob3VsZFVzZU5hdGl2ZURyaXZlcixcbiAgdHJhbnNmb3JtRGF0YVR5cGUsXG4gIC8vICRGbG93RXhwZWN0ZWRFcnJvciAtIHVuc2FmZSBnZXR0ZXIgbGludCBzdXBwcmVzaW9uXG4gIGdldCBuYXRpdmVFdmVudEVtaXR0ZXIoKTogTmF0aXZlRXZlbnRFbWl0dGVyIHtcbiAgICBpZiAoIW5hdGl2ZUV2ZW50RW1pdHRlcikge1xuICAgICAgbmF0aXZlRXZlbnRFbWl0dGVyID0gbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcihOYXRpdmVBbmltYXRlZE1vZHVsZSk7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVFdmVudEVtaXR0ZXI7XG4gIH0sXG59O1xuIl19