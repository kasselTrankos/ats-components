d7c3b51d490b32eeee7bf9ace7b898c1
'use strict';

var invariant = require('invariant');

var customBubblingEventTypes = {};
var customDirectEventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();

function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;

  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }

  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }

  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}

exports.register = function (name, callback) {
  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  viewConfigCallbacks.set(name, callback);
  return name;
};

exports.get = function (name) {
  var viewConfig;

  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);

    if (typeof callback !== 'function') {
      invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }

    viewConfigCallbacks.set(name, null);
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
  } else {
    viewConfig = viewConfigs.get(name);
  }

  invariant(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXhwb3J0cyIsInZpZXdDb25maWdDYWxsYmFja3MiLCJNYXAiLCJ2aWV3Q29uZmlncyIsInByb2Nlc3NFdmVudFR5cGVzIiwidmlld0NvbmZpZyIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJfX0RFVl9fIiwidG9wTGV2ZWxUeXBlIiwicmVnaXN0ZXIiLCJuYW1lIiwiY2FsbGJhY2siLCJoYXMiLCJzZXQiLCJnZXQiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFZQTs7QUFPQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUdBLElBQU1DLHdCQUFpRCxHQUFHLEVBQTFEO0FBQ0EsSUFBTUMsc0JBQStDLEdBQUcsRUFBeEQ7QUFFQUMsT0FBTyxDQUFDRix3QkFBUixHQUFtQ0Esd0JBQW5DO0FBQ0FFLE9BQU8sQ0FBQ0Qsc0JBQVIsR0FBaUNBLHNCQUFqQztBQUVBLElBQU1FLG1CQUFtQixHQUFHLElBQUlDLEdBQUosRUFBNUI7QUFDQSxJQUFNQyxXQUFXLEdBQUcsSUFBSUQsR0FBSixFQUFwQjs7QUFFQSxTQUFTRSxpQkFBVCxDQUNFQyxVQURGLEVBRVE7QUFBQSxNQUNDQyxrQkFERCxHQUN5Q0QsVUFEekMsQ0FDQ0Msa0JBREQ7QUFBQSxNQUNxQkMsZ0JBRHJCLEdBQ3lDRixVQUR6QyxDQUNxQkUsZ0JBRHJCOztBQUdOLE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQUlGLGtCQUFrQixJQUFJLElBQXRCLElBQThCQyxnQkFBZ0IsSUFBSSxJQUF0RCxFQUE0RDtBQUMxRCxXQUFLLElBQU1FLFlBQVgsSUFBMkJGLGdCQUEzQixFQUE2QztBQUMzQ1gsUUFBQUEsU0FBUyxDQUNQVSxrQkFBa0IsQ0FBQ0csWUFBRCxDQUFsQixJQUFvQyxJQUQ3QixFQUVQLDhDQUZPLEVBR1BBLFlBSE8sQ0FBVDtBQUtEO0FBQ0Y7QUFDRjs7QUFFRCxNQUFJSCxrQkFBa0IsSUFBSSxJQUExQixFQUFnQztBQUM5QixTQUFLLElBQU1HLGFBQVgsSUFBMkJILGtCQUEzQixFQUErQztBQUM3QyxVQUFJUix3QkFBd0IsQ0FBQ1csYUFBRCxDQUF4QixJQUEwQyxJQUE5QyxFQUFvRDtBQUNsRFgsUUFBQUEsd0JBQXdCLENBQUNXLGFBQUQsQ0FBeEIsR0FDRUgsa0JBQWtCLENBQUNHLGFBQUQsQ0FEcEI7QUFFRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSUYsZ0JBQWdCLElBQUksSUFBeEIsRUFBOEI7QUFDNUIsU0FBSyxJQUFNRSxjQUFYLElBQTJCRixnQkFBM0IsRUFBNkM7QUFDM0MsVUFBSVIsc0JBQXNCLENBQUNVLGNBQUQsQ0FBdEIsSUFBd0MsSUFBNUMsRUFBa0Q7QUFDaERWLFFBQUFBLHNCQUFzQixDQUFDVSxjQUFELENBQXRCLEdBQXVDRixnQkFBZ0IsQ0FBQ0UsY0FBRCxDQUF2RDtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQU9EVCxPQUFPLENBQUNVLFFBQVIsR0FBbUIsVUFBU0MsSUFBVCxFQUF1QkMsUUFBdkIsRUFBMkQ7QUFDNUVoQixFQUFBQSxTQUFTLENBQ1AsQ0FBQ0ssbUJBQW1CLENBQUNZLEdBQXBCLENBQXdCRixJQUF4QixDQURNLEVBRVAsbURBRk8sRUFHUEEsSUFITyxDQUFUO0FBS0FWLEVBQUFBLG1CQUFtQixDQUFDYSxHQUFwQixDQUF3QkgsSUFBeEIsRUFBOEJDLFFBQTlCO0FBQ0EsU0FBT0QsSUFBUDtBQUNELENBUkQ7O0FBZUFYLE9BQU8sQ0FBQ2UsR0FBUixHQUFjLFVBQVNKLElBQVQsRUFBNkQ7QUFDekUsTUFBSU4sVUFBSjs7QUFDQSxNQUFJLENBQUNGLFdBQVcsQ0FBQ1UsR0FBWixDQUFnQkYsSUFBaEIsQ0FBTCxFQUE0QjtBQUMxQixRQUFNQyxRQUFRLEdBQUdYLG1CQUFtQixDQUFDYyxHQUFwQixDQUF3QkosSUFBeEIsQ0FBakI7O0FBQ0EsUUFBSSxPQUFPQyxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDaEIsTUFBQUEsU0FBUyxDQUNQLEtBRE8sRUFFUCxzQ0FGTyxFQUdQZSxJQUhPLEVBSVAsT0FBT0EsSUFBSSxDQUFDLENBQUQsQ0FBWCxLQUFtQixRQUFuQixJQUErQixRQUFRSyxJQUFSLENBQWFMLElBQUksQ0FBQyxDQUFELENBQWpCLENBQS9CLEdBQ0ksNERBREosR0FFSSxFQU5HLENBQVQ7QUFRRDs7QUFDRFYsSUFBQUEsbUJBQW1CLENBQUNhLEdBQXBCLENBQXdCSCxJQUF4QixFQUE4QixJQUE5QjtBQUNBTixJQUFBQSxVQUFVLEdBQUdPLFFBQVEsRUFBckI7QUFDQVIsSUFBQUEsaUJBQWlCLENBQUNDLFVBQUQsQ0FBakI7QUFDQUYsSUFBQUEsV0FBVyxDQUFDVyxHQUFaLENBQWdCSCxJQUFoQixFQUFzQk4sVUFBdEI7QUFDRCxHQWhCRCxNQWdCTztBQUNMQSxJQUFBQSxVQUFVLEdBQUdGLFdBQVcsQ0FBQ1ksR0FBWixDQUFnQkosSUFBaEIsQ0FBYjtBQUNEOztBQUNEZixFQUFBQSxTQUFTLENBQUNTLFVBQUQsRUFBYSxtQ0FBYixFQUFrRE0sSUFBbEQsQ0FBVDtBQUNBLFNBQU9OLFVBQVA7QUFDRCxDQXZCRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvd2FybmluZy1hbmQtaW52YXJpYW50LWFyZ3MgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWcsXG4gIFZpZXdDb25maWdHZXR0ZXIsXG59IGZyb20gJy4vUmVhY3ROYXRpdmVUeXBlcyc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vLyBFdmVudCBjb25maWdzXG5jb25zdCBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM6ICRURU1QT1JBUlkkb2JqZWN0PHt8fH0+ID0ge307XG5jb25zdCBjdXN0b21EaXJlY3RFdmVudFR5cGVzOiAkVEVNUE9SQVJZJG9iamVjdDx7fHx9PiA9IHt9O1xuXG5leHBvcnRzLmN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcyA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcztcbmV4cG9ydHMuY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXM7XG5cbmNvbnN0IHZpZXdDb25maWdDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG5jb25zdCB2aWV3Q29uZmlncyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50VHlwZXMoXG4gIHZpZXdDb25maWc6IFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWc8Pixcbik6IHZvaWQge1xuICBjb25zdCB7YnViYmxpbmdFdmVudFR5cGVzLCBkaXJlY3RFdmVudFR5cGVzfSA9IHZpZXdDb25maWc7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwgJiYgZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsLFxuICAgICAgICAgICdFdmVudCBjYW5ub3QgYmUgYm90aCBkaXJlY3QgYW5kIGJ1YmJsaW5nOiAlcycsXG4gICAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChidWJibGluZ0V2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGJ1YmJsaW5nRXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPVxuICAgICAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJlY3RFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICBpZiAoY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID0gZGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5hdGl2ZSB2aWV3L2NvbXBvbmVudCBieSBuYW1lLlxuICogQSBjYWxsYmFjayBpcyBwcm92aWRlZCB0byBsb2FkIHRoZSB2aWV3IGNvbmZpZyBmcm9tIFVJTWFuYWdlci5cbiAqIFRoZSBjYWxsYmFjayBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgdmlldyBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZXhwb3J0cy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IFZpZXdDb25maWdHZXR0ZXIpOiBzdHJpbmcge1xuICBpbnZhcmlhbnQoXG4gICAgIXZpZXdDb25maWdDYWxsYmFja3MuaGFzKG5hbWUpLFxuICAgICdUcmllZCB0byByZWdpc3RlciB0d28gdmlld3Mgd2l0aCB0aGUgc2FtZSBuYW1lICVzJyxcbiAgICBuYW1lLFxuICApO1xuICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBjYWxsYmFjayk7XG4gIHJldHVybiBuYW1lO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb25maWcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy5cbiAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHZpZXcgaGFzIGJlZW4gdXNlZCxcbiAqIFRoaXMgY29uZmlndXJhdGlvbiB3aWxsIGJlIGxhenktbG9hZGVkIGZyb20gVUlNYW5hZ2VyLlxuICovXG5leHBvcnRzLmdldCA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZyk6IFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWc8PiB7XG4gIGxldCB2aWV3Q29uZmlnO1xuICBpZiAoIXZpZXdDb25maWdzLmhhcyhuYW1lKSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdmlld0NvbmZpZ0NhbGxiYWNrcy5nZXQobmFtZSk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcy4lcycsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGVvZiBuYW1lWzBdID09PSAnc3RyaW5nJyAmJiAvW2Etel0vLnRlc3QobmFtZVswXSlcbiAgICAgICAgICA/ICcgTWFrZSBzdXJlIHRvIHN0YXJ0IGNvbXBvbmVudCBuYW1lcyB3aXRoIGEgY2FwaXRhbCBsZXR0ZXIuJ1xuICAgICAgICAgIDogJycsXG4gICAgICApO1xuICAgIH1cbiAgICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBudWxsKTtcbiAgICB2aWV3Q29uZmlnID0gY2FsbGJhY2soKTtcbiAgICBwcm9jZXNzRXZlbnRUeXBlcyh2aWV3Q29uZmlnKTtcbiAgICB2aWV3Q29uZmlncy5zZXQobmFtZSwgdmlld0NvbmZpZyk7XG4gIH0gZWxzZSB7XG4gICAgdmlld0NvbmZpZyA9IHZpZXdDb25maWdzLmdldChuYW1lKTtcbiAgfVxuICBpbnZhcmlhbnQodmlld0NvbmZpZywgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcycsIG5hbWUpO1xuICByZXR1cm4gdmlld0NvbmZpZztcbn07XG4iXX0=