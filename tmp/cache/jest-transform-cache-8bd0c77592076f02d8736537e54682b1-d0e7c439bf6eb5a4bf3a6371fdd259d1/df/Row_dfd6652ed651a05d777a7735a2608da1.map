{"version":3,"sources":["Row.js"],"names":["RowNB","flattenedStyle","StyleSheet","flatten","props","style","type","flexDirection","flex","size","height","defaultProps","nativeProps","_root","setNativeProps","onPress","prepareRootProps","component","children","Component"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA;;IAGqBA,K;;;;;;;;;;uCACE;AAEf,UAAIC,cAAc,GAAGC,wBAAWC,OAAX,CAAmB,KAAKC,KAAL,CAAWC,KAA9B,CAArB;;AAEA,UAAIC,IAAI,GAAG;AACVC,QAAAA,aAAa,EAAE,KADL;AAEVC,QAAAA,IAAI,EAAG,KAAKJ,KAAL,CAAWK,IAAZ,GAAoB,KAAKL,KAAL,CAAWK,IAA/B,GAAuCR,cAAc,IAAIA,cAAc,CAACS,MAAlC,GAA4C,CAA5C,GAAgD;AAFlF,OAAX;AAKA,UAAIC,YAAY,GAAG;AACfN,QAAAA,KAAK,EAAEC;AADQ,OAAnB;AAGA,aAAO,8BAAa,KAAKF,KAAlB,EAAyBO,YAAzB,CAAP;AAEH;;;mCAEcC,W,EAAa;AAC1B,WAAKC,KAAL,CAAWC,cAAX,CAA0BF,WAA1B;AACD;;;6BAEQ;AAAA;;AACP,UAAG,KAAKR,KAAL,CAAWW,OAAd,EAAsB;AACpB,eACI,gCAAC,6BAAD;AAAkB,UAAA,OAAO,EAAE,KAAKX,KAAL,CAAWW;AAAtC,WACI,KAAKC,gBAAL,EADJ,GAEF,gCAAC,iBAAD;AACF,UAAA,GAAG,EAAE,aAAAC,SAAS;AAAA,mBAAI,KAAI,CAACJ,KAAL,GAAaI,SAAjB;AAAA;AADZ,WAEE,KAAKb,KAFP,EAGE,KAAKY,gBAAL,EAHF,GAIF,KAAKZ,KAAL,CAAWc,QAJT,CAFE,CADJ;AAUD,OAXD,MAYI;AACF,eACE,gCAAC,iBAAD;AACE,UAAA,GAAG,EAAE,aAAAD,SAAS;AAAA,mBAAI,KAAI,CAACJ,KAAL,GAAaI,SAAjB;AAAA;AADhB,WAEM,KAAKb,KAFX,EAGM,KAAKY,gBAAL,EAHN,GAIE,KAAKZ,KAAL,CAAWc,QAJb,CADF;AAOD;AACF;;;EA3C8BC,gB","sourcesContent":["'use strict';\n\nimport React, {Component} from 'react';\nimport {View, TouchableOpacity, StyleSheet} from 'react-native';\n\nimport computeProps from '../Utils/computeProps';\n\n\nexport default class RowNB extends Component {\n    prepareRootProps() {\n\n        var flattenedStyle = StyleSheet.flatten(this.props.style)\n\n        var type = {\n        \tflexDirection: 'row',\n        \tflex: (this.props.size) ? this.props.size : (flattenedStyle && flattenedStyle.height) ? 0 : 1,\n        }\n\n        var defaultProps = {\n            style: type\n        }\n        return computeProps(this.props, defaultProps);\n\n    }\n\n    setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n\n    render() {\n      if(this.props.onPress){\n        return(\n            <TouchableOpacity onPress={this.props.onPress}\n            {...this.prepareRootProps()}>\n          <View\n        ref={component => this._root = component}\n        {...this.props}\n        {...this.prepareRootProps()}\n      >{this.props.children}</View>\n          </TouchableOpacity>\n      );\n      }\n      else{\n        return(\n          <View\n            ref={component => this._root = component}\n            {...this.props}\n            {...this.prepareRootProps()}\n          >{this.props.children}</View>\n        );\n      }\n    }\n\n\n}\n"]}