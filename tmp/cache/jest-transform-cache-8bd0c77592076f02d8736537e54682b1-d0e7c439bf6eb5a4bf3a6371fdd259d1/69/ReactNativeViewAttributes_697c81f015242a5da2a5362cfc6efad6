50ebe52002c5faf682d98db91158886d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ReactNativeStyleAttributes = require('./ReactNativeStyleAttributes');

var UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityActions: true,
  accessibilityLabel: true,
  accessibilityLiveRegion: true,
  accessibilityRole: true,
  accessibilityStates: true,
  accessibilityState: true,
  accessibilityHint: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityAction: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  onAccessibilityEscape: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

var RCTView = _objectSpread({}, UIView, {
  removeClippedSubviews: true
});

var ReactNativeViewAttributes = {
  UIView: UIView,
  RCTView: RCTView
};
module.exports = ReactNativeViewAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuanMiXSwibmFtZXMiOlsiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJyZXF1aXJlIiwiVUlWaWV3IiwicG9pbnRlckV2ZW50cyIsImFjY2Vzc2libGUiLCJhY2Nlc3NpYmlsaXR5QWN0aW9ucyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiYWNjZXNzaWJpbGl0eUhpbnQiLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwibmF0aXZlSUQiLCJ0ZXN0SUQiLCJyZW5kZXJUb0hhcmR3YXJlVGV4dHVyZUFuZHJvaWQiLCJzaG91bGRSYXN0ZXJpemVJT1MiLCJvbkxheW91dCIsIm9uQWNjZXNzaWJpbGl0eUFjdGlvbiIsIm9uQWNjZXNzaWJpbGl0eVRhcCIsIm9uTWFnaWNUYXAiLCJvbkFjY2Vzc2liaWxpdHlFc2NhcGUiLCJjb2xsYXBzYWJsZSIsIm5lZWRzT2Zmc2NyZWVuQWxwaGFDb21wb3NpdGluZyIsInN0eWxlIiwiUkNUVmlldyIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUVBLElBQU1BLDBCQUEwQixHQUFHQyxPQUFPLENBQUMsOEJBQUQsQ0FBMUM7O0FBRUEsSUFBTUMsTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLGFBQWEsRUFBRSxJQURGO0FBRWJDLEVBQUFBLFVBQVUsRUFBRSxJQUZDO0FBR2JDLEVBQUFBLG9CQUFvQixFQUFFLElBSFQ7QUFJYkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFKUDtBQUtiQyxFQUFBQSx1QkFBdUIsRUFBRSxJQUxaO0FBTWJDLEVBQUFBLGlCQUFpQixFQUFFLElBTk47QUFPYkMsRUFBQUEsbUJBQW1CLEVBQUUsSUFQUjtBQVFiQyxFQUFBQSxrQkFBa0IsRUFBRSxJQVJQO0FBU2JDLEVBQUFBLGlCQUFpQixFQUFFLElBVE47QUFVYkMsRUFBQUEseUJBQXlCLEVBQUUsSUFWZDtBQVdiQyxFQUFBQSxRQUFRLEVBQUUsSUFYRztBQVliQyxFQUFBQSxNQUFNLEVBQUUsSUFaSztBQWFiQyxFQUFBQSw4QkFBOEIsRUFBRSxJQWJuQjtBQWNiQyxFQUFBQSxrQkFBa0IsRUFBRSxJQWRQO0FBZWJDLEVBQUFBLFFBQVEsRUFBRSxJQWZHO0FBZ0JiQyxFQUFBQSxxQkFBcUIsRUFBRSxJQWhCVjtBQWlCYkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFqQlA7QUFrQmJDLEVBQUFBLFVBQVUsRUFBRSxJQWxCQztBQW1CYkMsRUFBQUEscUJBQXFCLEVBQUUsSUFuQlY7QUFvQmJDLEVBQUFBLFdBQVcsRUFBRSxJQXBCQTtBQXFCYkMsRUFBQUEsOEJBQThCLEVBQUUsSUFyQm5CO0FBc0JiQyxFQUFBQSxLQUFLLEVBQUV4QjtBQXRCTSxDQUFmOztBQXlCQSxJQUFNeUIsT0FBTyxxQkFDUnZCLE1BRFE7QUFRWHdCLEVBQUFBLHFCQUFxQixFQUFFO0FBUlosRUFBYjs7QUFXQSxJQUFNQyx5QkFBeUIsR0FBRztBQUNoQ3pCLEVBQUFBLE1BQU0sRUFBRUEsTUFEd0I7QUFFaEN1QixFQUFBQSxPQUFPLEVBQUVBO0FBRnVCLENBQWxDO0FBS0FHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkYseUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9SZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcycpO1xuXG5jb25zdCBVSVZpZXcgPSB7XG4gIHBvaW50ZXJFdmVudHM6IHRydWUsXG4gIGFjY2Vzc2libGU6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlBY3Rpb25zOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5TGFiZWw6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5Um9sZTogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eVN0YXRlczogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eVN0YXRlOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5SGludDogdHJ1ZSxcbiAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgbmF0aXZlSUQ6IHRydWUsXG4gIHRlc3RJRDogdHJ1ZSxcbiAgcmVuZGVyVG9IYXJkd2FyZVRleHR1cmVBbmRyb2lkOiB0cnVlLFxuICBzaG91bGRSYXN0ZXJpemVJT1M6IHRydWUsXG4gIG9uTGF5b3V0OiB0cnVlLFxuICBvbkFjY2Vzc2liaWxpdHlBY3Rpb246IHRydWUsXG4gIG9uQWNjZXNzaWJpbGl0eVRhcDogdHJ1ZSxcbiAgb25NYWdpY1RhcDogdHJ1ZSxcbiAgb25BY2Nlc3NpYmlsaXR5RXNjYXBlOiB0cnVlLFxuICBjb2xsYXBzYWJsZTogdHJ1ZSxcbiAgbmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nOiB0cnVlLFxuICBzdHlsZTogUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMsXG59O1xuXG5jb25zdCBSQ1RWaWV3ID0ge1xuICAuLi5VSVZpZXcsXG5cbiAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgcGVyZm9ybWFuY2UgcHJvcGVydHkgZXhwb3NlZCBieSBSQ1RWaWV3IGFuZCB1c2VmdWwgZm9yXG4gIC8vIHNjcm9sbGluZyBjb250ZW50IHdoZW4gdGhlcmUgYXJlIG1hbnkgc3Vidmlld3MsIG1vc3Qgb2Ygd2hpY2ggYXJlIG9mZnNjcmVlbi5cbiAgLy8gRm9yIHRoaXMgcHJvcGVydHkgdG8gYmUgZWZmZWN0aXZlLCBpdCBtdXN0IGJlIGFwcGxpZWQgdG8gYSB2aWV3IHRoYXQgY29udGFpbnNcbiAgLy8gbWFueSBzdWJ2aWV3cyB0aGF0IGV4dGVuZCBvdXRzaWRlIGl0cyBib3VuZC4gVGhlIHN1YnZpZXdzIG11c3QgYWxzbyBoYXZlXG4gIC8vIG92ZXJmbG93OiBoaWRkZW4sIGFzIHNob3VsZCB0aGUgY29udGFpbmluZyB2aWV3IChvciBvbmUgb2YgaXRzIHN1cGVydmlld3MpLlxuICByZW1vdmVDbGlwcGVkU3Vidmlld3M6IHRydWUsXG59O1xuXG5jb25zdCBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzID0ge1xuICBVSVZpZXc6IFVJVmlldyxcbiAgUkNUVmlldzogUkNUVmlldyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcztcbiJdfQ==