{"version":3,"sources":["toolbar-android.js"],"names":["ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","state","logo","undefined","navIcon","overflowIcon","actions","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","props","logoName","iconSize","iconColor","titleColor","setState","navIconName","overflowIconName","Promise","all","map","action","iconName","then","icon","resolve","updatedActions","PureComponent","propTypes","PropTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]}