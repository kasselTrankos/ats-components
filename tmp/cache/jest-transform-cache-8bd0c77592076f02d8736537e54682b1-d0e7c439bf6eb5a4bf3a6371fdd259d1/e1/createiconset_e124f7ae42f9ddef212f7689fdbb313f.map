{"version":3,"sources":["create-icon-set.js"],"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","processedColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]}