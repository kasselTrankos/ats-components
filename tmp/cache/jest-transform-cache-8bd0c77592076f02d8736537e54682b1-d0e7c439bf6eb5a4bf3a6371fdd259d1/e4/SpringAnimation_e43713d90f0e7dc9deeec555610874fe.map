{"version":3,"sources":["SpringAnimation.js"],"names":["AnimatedValue","require","AnimatedValueXY","Animation","SpringConfig","invariant","shouldUseNativeDriver","SpringAnimation","config","_overshootClamping","_restDisplacementThreshold","_restSpeedThreshold","_lastVelocity","_startPosition","_lastPosition","_fromValue","_toValue","_stiffness","_damping","_mass","_initialVelocity","_delay","_timeout","_startTime","_lastTime","_frameTime","_onUpdate","_animationFrame","_useNativeDriver","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","toValue","delay","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","bounciness","speed","tension","friction","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","type","initialVelocity","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","__onEnd","Date","now","internalState","getInternalState","lastPosition","lastVelocity","lastTime","start","__startNativeAnimation","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","requestAnimationFrame","bind","clearTimeout","global","cancelAnimationFrame","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedValue = require('../nodes/AnimatedValue');\nconst AnimatedValueXY = require('../nodes/AnimatedValueXY');\nconst Animation = require('./Animation');\nconst SpringConfig = require('../SpringConfig');\n\nconst invariant = require('invariant');\n\nconst {shouldUseNativeDriver} = require('../NativeAnimatedHelper');\n\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nexport type SpringAnimationConfig = AnimationConfig & {\n  toValue: number | AnimatedValue | {x: number, y: number} | AnimatedValueXY,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number | {x: number, y: number},\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = AnimationConfig & {\n  toValue: number | AnimatedValue,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nclass SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: any;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = shouldUseNativeDriver(config);\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        config.bounciness ?? 8,\n        config.speed ?? 12,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        config.tension ?? 40,\n        config.friction ?? 7,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig(): $TEMPORARY$object<{|\n    damping: number,\n    initialVelocity: number,\n    iterations: number,\n    mass: number,\n    overshootClamping: boolean,\n    restDisplacementThreshold: number,\n    restSpeedThreshold: number,\n    stiffness: number,\n    toValue: any,\n    type: $TEMPORARY$string<'spring'>,\n  |}> {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n\nmodule.exports = SpringAnimation;\n"]}