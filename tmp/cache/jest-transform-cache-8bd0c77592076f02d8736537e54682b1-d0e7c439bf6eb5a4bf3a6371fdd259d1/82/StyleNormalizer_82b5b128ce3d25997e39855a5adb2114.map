{"version":3,"sources":["StyleNormalizer.js"],"names":["StyleNormalizer","normalizers","createNormalizers","HORIZONTAL","VERTICAL","SIDES","prop","shorthands","suffix","forEach","shorthand","propName","type","normalizerExists","Error","ShorthandsNormalizerFactory","createNormalizer","normalizerName","val"],"mappings":";;;;;;;;;;;;;AAAA;;IAUqBA,e;AACnB,6BAAc;AAAA;AACZ,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,CAAuB,QAAvB,EAAiC,CAACC,uCAAD,EAAaC,qCAAb,EAAuBC,kCAAvB,CAAjC;AACA,SAAKH,iBAAL,CAAuB,SAAvB,EAAkC,CAACC,uCAAD,EAAaC,qCAAb,EAAuBC,kCAAvB,CAAlC;AACA,SAAKH,iBAAL,CAAuB,QAAvB,EAAiC,CAACG,kCAAD,CAAjC,EAA0C,OAA1C;AACD;;;;sCAEiBC,I,EAAMC,U,EAAyB;AAAA;;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AAC/CD,MAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAC,SAAS,EAAI;AAC9B,YAAMC,QAAQ,GAAGL,IAAI,GAAGI,SAAS,CAACE,IAAjB,GAAwBJ,MAAzC;;AAEA,YAAI,KAAI,CAACK,gBAAL,CAAsBF,QAAtB,CAAJ,EAAqC;AACnC,gBAAMG,KAAK,sBAAoBH,QAApB,gCAAX;AACD;;AAED,QAAA,KAAI,CAACV,WAAL,CAAiBU,QAAjB,IACEI,wCAA4BC,gBAA5B,CAA6CV,IAA7C,EAAmDI,SAAnD,EAA8DF,MAA9D,CADF;AAED,OATD;AAUD;;;qCAEgBS,c,EAAgB;AAC/B,aAAO,CAAC,CAAC,KAAKhB,WAAL,CAAiBgB,cAAjB,CAAT;AACD;;;iCAEYX,I,EAAM;AACjB,aAAO,KAAKO,gBAAL,CAAsBP,IAAtB,CAAP;AACD;;;8BAESA,I,EAAMY,G,EAAK;AACnB,aAAO,KAAKjB,WAAL,CAAiBK,IAAjB,EAAuBY,GAAvB,CAAP;AACD","sourcesContent":["import ShorthandsNormalizerFactory, {\n  SIDES,\n  HORIZONTAL,\n  VERTICAL,\n} from './ShorthandsNormalizerFactory';\n\n/**\n * Style Normalizer uses ShorthandsNormalizerCreators to creates different normalizers\n * specific to properties.\n */\nexport default class StyleNormalizer {\n  constructor() {\n    this.normalizers = {};\n    this.createNormalizers('margin', [HORIZONTAL, VERTICAL, SIDES]);\n    this.createNormalizers('padding', [HORIZONTAL, VERTICAL, SIDES]);\n    this.createNormalizers('border', [SIDES], 'Width');\n  }\n\n  createNormalizers(prop, shorthands, suffix = '') {\n    shorthands.forEach(shorthand => {\n      const propName = prop + shorthand.type + suffix;\n\n      if (this.normalizerExists(propName)) {\n        throw Error(`Normalizer for '${propName}' shorthand already exists`);\n      }\n\n      this.normalizers[propName] =\n        ShorthandsNormalizerFactory.createNormalizer(prop, shorthand, suffix);\n    });\n  }\n\n  normalizerExists(normalizerName) {\n    return !!this.normalizers[normalizerName];\n  }\n\n  canNormalize(prop) {\n    return this.normalizerExists(prop);\n  }\n\n  normalize(prop, val) {\n    return this.normalizers[prop](val);\n  }\n}\n"]}