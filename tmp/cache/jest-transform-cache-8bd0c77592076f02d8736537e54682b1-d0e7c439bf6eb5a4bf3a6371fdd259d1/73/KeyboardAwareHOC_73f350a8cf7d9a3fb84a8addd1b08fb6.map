{"version":3,"sources":["KeyboardAwareHOC.js"],"names":["_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","PropTypes","func","keyboardAwareHOCTypeEvents","Function","getDisplayName","WrappedComponent","displayName","name","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","getNode","KeyboardAwareHOC","ScrollableComponent","userOptions","hocOptions","props","_rnkasv_keyboardView","keyboardWillShowEvent","keyboardWillHideEvent","position","defaultResetScrollToCoords","mountedComponent","handleOnScroll","state","getScrollResponder","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","scrollToFocusedInput","reactNode","setTimeout","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","element","options","Promise","all","_measureElement","parentLayout","childLayout","getScrollPosition","_defaultGetScrollPosition","contentOffset","Math","max","node","resolve","UIManager","measureInWindow","width","height","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","TextInput","State","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","Platform","OS","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","e","nativeEvent","_handleRef","innerRef","update","callbacks","Keyboard","addListener","forEach","callbackName","prevProps","remove","Object","values","callback","onScroll","newContentContainerStyle","concat","paddingBottom","refProps","bottom","Animated","forkEvent","React","Component","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","listenToKeyboardEvents","configOrComp","Comp"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Keyboard,\n  Platform,\n  UIManager,\n  TextInput,\n  findNodeHandle,\n  Animated\n} from 'react-native'\nimport { isIphoneX } from 'react-native-iphone-x-helper'\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nconst supportedKeyboardEvents = [\n  'keyboardWillShow',\n  'keyboardDidShow',\n  'keyboardWillHide',\n  'keyboardDidHide',\n  'keyboardWillChangeFrame',\n  'keyboardDidChangeFrame'\n]\nconst keyboardEventToCallbackName = (eventName: string) =>\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\n  }),\n  {}\n)\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: Function\n  }),\n  {}\n)\n\nexport type KeyboardAwareHOCProps = {\n  viewIsInsideTabBar?: boolean,\n  resetScrollToCoords?: {\n    x: number,\n    y: number\n  },\n  enableResetScrollToCoords?: boolean,\n  enableAutomaticScroll?: boolean,\n  extraHeight?: number,\n  extraScrollHeight?: number,\n  keyboardOpeningTime?: number,\n  onScroll?: Function,\n  update?: Function,\n  contentContainerStyle?: any,\n  enableOnAndroid?: boolean,\n  innerRef?: Function,\n  ...keyboardAwareHOCTypeEvents\n}\nexport type KeyboardAwareHOCState = {\n  keyboardSpace: number\n}\n\nexport type ElementLayout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\nexport type ContentOffset = {\n  x: number,\n  y: number\n}\n\nexport type ScrollPosition = {\n  x: number,\n  y: number,\n  animated: boolean\n}\n\nexport type ScrollIntoViewOptions = ?{\n  getScrollPosition?: (\n    parentLayout: ElementLayout,\n    childLayout: ElementLayout,\n    contentOffset: ContentOffset\n  ) => ScrollPosition\n}\n\nexport type KeyboardAwareHOCOptions = ?{\n  enableOnAndroid: boolean,\n  contentContainerStyle: ?Object,\n  enableAutomaticScroll: boolean,\n  extraHeight: number,\n  extraScrollHeight: number,\n  enableResetScrollToCoords: boolean,\n  keyboardOpeningTime: number,\n  viewIsInsideTabBar: boolean,\n  refPropName: string,\n  extractNativeRef: Function\n}\n\nfunction getDisplayName(WrappedComponent: React$Component) {\n  return (\n    (WrappedComponent &&\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\n    'Component'\n  )\n}\n\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\n  refPropName: 'ref',\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\n  extractNativeRef: (ref: Object) => {\n    // getNode() permit to support Animated.ScrollView automatically\n    // see https://github.com/facebook/react-native/issues/19650\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\n    if (ref.getNode) {\n      return ref.getNode()\n    } else {\n      return ref\n    }\n  }\n}\n\nfunction KeyboardAwareHOC(\n  ScrollableComponent: React$Component,\n  userOptions: KeyboardAwareHOCOptions = {}\n) {\n  const hocOptions: KeyboardAwareHOCOptions = {\n    ...ScrollIntoViewDefaultOptions,\n    ...userOptions\n  }\n\n  return class\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\n    implements KeyboardAwareInterface {\n    _rnkasv_keyboardView: any\n    keyboardWillShowEvent: ?Function\n    keyboardWillHideEvent: ?Function\n    position: ContentOffset\n    defaultResetScrollToCoords: ?{ x: number, y: number }\n    mountedComponent: boolean\n    handleOnScroll: Function\n    state: KeyboardAwareHOCState\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\n\n    static propTypes = {\n      viewIsInsideTabBar: PropTypes.bool,\n      resetScrollToCoords: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      }),\n      enableResetScrollToCoords: PropTypes.bool,\n      enableAutomaticScroll: PropTypes.bool,\n      extraHeight: PropTypes.number,\n      extraScrollHeight: PropTypes.number,\n      keyboardOpeningTime: PropTypes.number,\n      onScroll: PropTypes.oneOfType([\n        PropTypes.func, // Normal listener\n        PropTypes.object // Animated.event listener\n      ]),\n      update: PropTypes.func,\n      contentContainerStyle: PropTypes.any,\n      enableOnAndroid: PropTypes.bool,\n      innerRef: PropTypes.func,\n      ...keyboardEventPropTypes\n    }\n\n    // HOC options are used to init default props, so that these options can be overriden with component props\n    static defaultProps = {\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n      extraHeight: hocOptions.extraHeight,\n      extraScrollHeight: hocOptions.extraScrollHeight,\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n      enableOnAndroid: hocOptions.enableOnAndroid\n    }\n\n    constructor(props: KeyboardAwareHOCProps) {\n      super(props)\n      this.keyboardWillShowEvent = undefined\n      this.keyboardWillHideEvent = undefined\n      this.callbacks = {}\n      this.position = { x: 0, y: 0 }\n      this.defaultResetScrollToCoords = null\n      const keyboardSpace: number = props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.state = { keyboardSpace }\n    }\n\n    componentDidMount() {\n      this.mountedComponent = true\n      // Keyboard events\n      if (Platform.OS === 'ios') {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardWillShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardWillHide',\n          this._resetKeyboardSpace\n        )\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardDidShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardDidHide',\n          this._resetKeyboardSpace\n        )\n      }\n\n      supportedKeyboardEvents.forEach((eventName: string) => {\n        const callbackName = keyboardEventToCallbackName(eventName)\n        if (this.props[callbackName]) {\n          this.callbacks[eventName] = Keyboard.addListener(\n            eventName,\n            this.props[callbackName]\n          )\n        }\n      })\n    }\n\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n          : 0\n        if (this.state.keyboardSpace !== keyboardSpace) {\n          this.setState({ keyboardSpace })\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      this.mountedComponent = false\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n      Object.values(this.callbacks).forEach((callback: Object) =>\n        callback.remove()\n      )\n    }\n\n    getScrollResponder = () => {\n      return (\n        this._rnkasv_keyboardView &&\n        this._rnkasv_keyboardView.getScrollResponder &&\n        this._rnkasv_keyboardView.getScrollResponder()\n      )\n    }\n\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollTo({ x, y, animated })\n    }\n\n    scrollToEnd = (animated?: boolean = true) => {\n      const responder = this.getScrollResponder()\n      responder && responder.scrollResponderScrollToEnd({ animated })\n    }\n\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\n    }\n\n    /**\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n     * @param extraHeight: takes an extra height in consideration.\n     */\n    scrollToFocusedInput = (\n      reactNode: any,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight || 0\n      }\n      if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\n      }\n      setTimeout(() => {\n        if (!this.mountedComponent) {\n          return\n        }\n        const responder = this.getScrollResponder()\n        responder &&\n          responder.scrollResponderScrollNativeHandleToKeyboard(\n            reactNode,\n            extraHeight,\n            true\n          )\n      }, keyboardOpeningTime)\n    }\n\n    scrollIntoView = async (\n      element: React.Element<*>,\n      options: ScrollIntoViewOptions = {}\n    ) => {\n      if (!this._rnkasv_keyboardView || !element) {\n        return\n      }\n\n      const [parentLayout, childLayout] = await Promise.all([\n        this._measureElement(this._rnkasv_keyboardView),\n        this._measureElement(element)\n      ])\n\n      const getScrollPosition =\n        options.getScrollPosition || this._defaultGetScrollPosition\n      const { x, y, animated } = getScrollPosition(\n        parentLayout,\n        childLayout,\n        this.position\n      )\n      this.scrollToPosition(x, y, animated)\n    }\n\n    _defaultGetScrollPosition = (\n      parentLayout: ElementLayout,\n      childLayout: ElementLayout,\n      contentOffset: ContentOffset\n    ): ScrollPosition => {\n      return {\n        x: 0,\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n        animated: true\n      }\n    }\n\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\n      const node = findNodeHandle(element)\n      return new Promise((resolve: ElementLayout => void) => {\n        UIManager.measureInWindow(\n          node,\n          (x: number, y: number, width: number, height: number) => {\n            resolve({ x, y, width, height })\n          }\n        )\n      })\n    }\n\n    // Keyboard actions\n    _updateKeyboardSpace = (frames: Object) => {\n      // Automatically scroll to focused TextInput\n      if (this.props.enableAutomaticScroll) {\n        let keyboardSpace: number =\n          frames.endCoordinates.height + this.props.extraScrollHeight\n        if (this.props.viewIsInsideTabBar) {\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n        }\n        this.setState({ keyboardSpace })\n        const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n        const responder = this.getScrollResponder()\n        if (!currentlyFocusedField || !responder) {\n          return\n        }\n        UIManager.viewIsDescendantOf(\n          currentlyFocusedField,\n          responder.getInnerViewNode(),\n          (isAncestor: boolean) => {\n            if (isAncestor) {\n              // Check if the TextInput will be hidden by the keyboard\n              UIManager.measureInWindow(\n                currentlyFocusedField,\n                (x: number, y: number, width: number, height: number) => {\n                  const textInputBottomPosition = y + height\n                  const keyboardPosition = frames.endCoordinates.screenY\n                  const totalExtraHeight =\n                    this.props.extraScrollHeight + this.props.extraHeight\n                  if (Platform.OS === 'ios') {\n                    if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this._scrollToFocusedInputWithNodeHandle(\n                        currentlyFocusedField\n                      )\n                    }\n                  } else {\n                    // On android, the system would scroll the text input just\n                    // above the keyboard so we just neet to scroll the extra\n                    // height part\n                    if (textInputBottomPosition > keyboardPosition) {\n                      // Since the system already scrolled the whole view up\n                      // we should reduce that amount\n                      keyboardSpace =\n                        keyboardSpace -\n                        (textInputBottomPosition - keyboardPosition)\n                      this.setState({ keyboardSpace })\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\n                    } else if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this.scrollForExtraHeightOnAndroid(\n                        totalExtraHeight -\n                          (keyboardPosition - textInputBottomPosition)\n                      )\n                    }\n                  }\n                }\n              )\n            }\n          }\n        )\n      }\n      if (!this.props.resetScrollToCoords) {\n        if (!this.defaultResetScrollToCoords) {\n          this.defaultResetScrollToCoords = this.position\n        }\n      }\n    }\n\n    _resetKeyboardSpace = () => {\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.setState({ keyboardSpace })\n      // Reset scroll position after keyboard dismissal\n      if (this.props.enableResetScrollToCoords === false) {\n        this.defaultResetScrollToCoords = null\n        return\n      } else if (this.props.resetScrollToCoords) {\n        this.scrollToPosition(\n          this.props.resetScrollToCoords.x,\n          this.props.resetScrollToCoords.y,\n          true\n        )\n      } else {\n        if (this.defaultResetScrollToCoords) {\n          this.scrollToPosition(\n            this.defaultResetScrollToCoords.x,\n            this.defaultResetScrollToCoords.y,\n            true\n          )\n          this.defaultResetScrollToCoords = null\n        } else {\n          this.scrollToPosition(0, 0, true)\n        }\n      }\n    }\n\n    _scrollToFocusedInputWithNodeHandle = (\n      nodeID: number,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight\n      }\n      const reactNode = findNodeHandle(nodeID)\n      this.scrollToFocusedInput(\n        reactNode,\n        extraHeight + this.props.extraScrollHeight,\n        keyboardOpeningTime !== undefined\n          ? keyboardOpeningTime\n          : this.props.keyboardOpeningTime || 0\n      )\n    }\n\n    _handleOnScroll = (\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\n    ) => {\n      this.position = e.nativeEvent.contentOffset\n    }\n\n    _handleRef = (ref: React.Component<*>) => {\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\n      if (this.props.innerRef) {\n        this.props.innerRef(this._rnkasv_keyboardView)\n      }\n    }\n\n    update = () => {\n      const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n      const responder = this.getScrollResponder()\n\n      if (!currentlyFocusedField || !responder) {\n        return\n      }\n\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\n    }\n\n    render() {\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\n      let newContentContainerStyle\n      if (Platform.OS === 'android' && enableOnAndroid) {\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\n          paddingBottom:\n            ((contentContainerStyle || {}).paddingBottom || 0) +\n            this.state.keyboardSpace\n        })\n      }\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\n      return (\n        <ScrollableComponent\n          {...refProps}\n          keyboardDismissMode='interactive'\n          contentInset={{ bottom: this.state.keyboardSpace }}\n          automaticallyAdjustContentInsets={false}\n          showsVerticalScrollIndicator={true}\n          scrollEventThrottle={1}\n          {...this.props}\n          contentContainerStyle={\n            newContentContainerStyle || contentContainerStyle\n          }\n          keyboardSpace={this.state.keyboardSpace}\n          getScrollResponder={this.getScrollResponder}\n          scrollToPosition={this.scrollToPosition}\n          scrollToEnd={this.scrollToEnd}\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\n          scrollToFocusedInput={this.scrollToFocusedInput}\n          scrollIntoView={this.scrollIntoView}\n          resetKeyboardSpace={this._resetKeyboardSpace}\n          handleOnScroll={this._handleOnScroll}\n          update={this.update}\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\n        />\n      )\n    }\n  }\n}\n\n// Allow to pass options, without breaking change, and curried for composition\n// listenToKeyboardEvents(ScrollView);\n// listenToKeyboardEvents(options)(Comp);\nconst listenToKeyboardEvents = (configOrComp: any) => {\n  if (typeof configOrComp === 'object') {\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\n  } else {\n    return KeyboardAwareHOC(configOrComp)\n  }\n}\n\nexport default listenToKeyboardEvents\n"]}