aeb077b6f3031c40737a3175d588d56b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _reactNativeIphoneXHelper = require("react-native-iphone-x-helper");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _KAM_DEFAULT_TAB_BAR_HEIGHT = (0, _reactNativeIphoneXHelper.isIphoneX)() ? 83 : 49;

var _KAM_KEYBOARD_OPENING_TIME = 250;
var _KAM_EXTRA_HEIGHT = 75;
var supportedKeyboardEvents = ['keyboardWillShow', 'keyboardDidShow', 'keyboardWillHide', 'keyboardDidHide', 'keyboardWillChangeFrame', 'keyboardDidChangeFrame'];

var keyboardEventToCallbackName = function keyboardEventToCallbackName(eventName) {
  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);
};

var keyboardEventPropTypes = supportedKeyboardEvents.reduce(function (acc, eventName) {
  return _objectSpread({}, acc, (0, _defineProperty2["default"])({}, keyboardEventToCallbackName(eventName), _propTypes["default"].func));
}, {});
var keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(function (acc, eventName) {
  return _objectSpread({}, acc, (0, _defineProperty2["default"])({}, keyboardEventToCallbackName(eventName), Function));
}, {});

function getDisplayName(WrappedComponent) {
  return WrappedComponent && (WrappedComponent.displayName || WrappedComponent.name) || 'Component';
}

var ScrollIntoViewDefaultOptions = {
  enableOnAndroid: false,
  contentContainerStyle: undefined,
  enableAutomaticScroll: true,
  extraHeight: _KAM_EXTRA_HEIGHT,
  extraScrollHeight: 0,
  enableResetScrollToCoords: true,
  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,
  viewIsInsideTabBar: false,
  refPropName: 'ref',
  extractNativeRef: function extractNativeRef(ref) {
    if (ref.getNode) {
      return ref.getNode();
    } else {
      return ref;
    }
  }
};

function KeyboardAwareHOC(ScrollableComponent) {
  var _class, _temp;

  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var hocOptions = _objectSpread({}, ScrollIntoViewDefaultOptions, {}, userOptions);

  return _temp = _class = function (_React$Component) {
    (0, _inherits2["default"])(_class, _React$Component);

    function _class(props) {
      var _this;

      (0, _classCallCheck2["default"])(this, _class);
      _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(_class).call(this, props));
      _this._rnkasv_keyboardView = void 0;
      _this.keyboardWillShowEvent = void 0;
      _this.keyboardWillHideEvent = void 0;
      _this.position = void 0;
      _this.defaultResetScrollToCoords = void 0;
      _this.mountedComponent = void 0;
      _this.handleOnScroll = void 0;
      _this.state = void 0;

      _this.getScrollResponder = function () {
        return _this._rnkasv_keyboardView && _this._rnkasv_keyboardView.getScrollResponder && _this._rnkasv_keyboardView.getScrollResponder();
      };

      _this.scrollToPosition = function (x, y) {
        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var responder = _this.getScrollResponder();

        responder && responder.scrollResponderScrollTo({
          x: x,
          y: y,
          animated: animated
        });
      };

      _this.scrollToEnd = function () {
        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        var responder = _this.getScrollResponder();

        responder && responder.scrollResponderScrollToEnd({
          animated: animated
        });
      };

      _this.scrollForExtraHeightOnAndroid = function (extraHeight) {
        _this.scrollToPosition(0, _this.position.y + extraHeight, true);
      };

      _this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {
        if (extraHeight === undefined) {
          extraHeight = _this.props.extraHeight || 0;
        }

        if (keyboardOpeningTime === undefined) {
          keyboardOpeningTime = _this.props.keyboardOpeningTime || 0;
        }

        setTimeout(function () {
          if (!_this.mountedComponent) {
            return;
          }

          var responder = _this.getScrollResponder();

          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);
        }, keyboardOpeningTime);
      };

      _this.scrollIntoView = function () {
        var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(element) {
          var options,
              _ref2,
              _ref3,
              parentLayout,
              childLayout,
              getScrollPosition,
              _getScrollPosition,
              x,
              y,
              animated,
              _args = arguments;

          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};

                  if (!(!_this._rnkasv_keyboardView || !element)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _context.next = 5;
                  return Promise.all([_this._measureElement(_this._rnkasv_keyboardView), _this._measureElement(element)]);

                case 5:
                  _ref2 = _context.sent;
                  _ref3 = (0, _slicedToArray2["default"])(_ref2, 2);
                  parentLayout = _ref3[0];
                  childLayout = _ref3[1];
                  getScrollPosition = options.getScrollPosition || _this._defaultGetScrollPosition;
                  _getScrollPosition = getScrollPosition(parentLayout, childLayout, _this.position), x = _getScrollPosition.x, y = _getScrollPosition.y, animated = _getScrollPosition.animated;

                  _this.scrollToPosition(x, y, animated);

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }();

      _this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {
        return {
          x: 0,
          y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),
          animated: true
        };
      };

      _this._measureElement = function (element) {
        var node = (0, _reactNative.findNodeHandle)(element);
        return new Promise(function (resolve) {
          _reactNative.UIManager.measureInWindow(node, function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        });
      };

      _this._updateKeyboardSpace = function (frames) {
        if (_this.props.enableAutomaticScroll) {
          var keyboardSpace = frames.endCoordinates.height + _this.props.extraScrollHeight;

          if (_this.props.viewIsInsideTabBar) {
            keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;
          }

          _this.setState({
            keyboardSpace: keyboardSpace
          });

          var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedField();

          var responder = _this.getScrollResponder();

          if (!currentlyFocusedField || !responder) {
            return;
          }

          _reactNative.UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {
            if (isAncestor) {
              _reactNative.UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {
                var textInputBottomPosition = y + height;
                var keyboardPosition = frames.endCoordinates.screenY;
                var totalExtraHeight = _this.props.extraScrollHeight + _this.props.extraHeight;

                if (_reactNative.Platform.OS === 'ios') {
                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                    _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);
                  }
                } else {
                  if (textInputBottomPosition > keyboardPosition) {
                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);

                    _this.setState({
                      keyboardSpace: keyboardSpace
                    });

                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight);
                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {
                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));
                  }
                }
              });
            }
          });
        }

        if (!_this.props.resetScrollToCoords) {
          if (!_this.defaultResetScrollToCoords) {
            _this.defaultResetScrollToCoords = _this.position;
          }
        }
      };

      _this._resetKeyboardSpace = function () {
        var keyboardSpace = _this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;

        _this.setState({
          keyboardSpace: keyboardSpace
        });

        if (_this.props.enableResetScrollToCoords === false) {
          _this.defaultResetScrollToCoords = null;
          return;
        } else if (_this.props.resetScrollToCoords) {
          _this.scrollToPosition(_this.props.resetScrollToCoords.x, _this.props.resetScrollToCoords.y, true);
        } else {
          if (_this.defaultResetScrollToCoords) {
            _this.scrollToPosition(_this.defaultResetScrollToCoords.x, _this.defaultResetScrollToCoords.y, true);

            _this.defaultResetScrollToCoords = null;
          } else {
            _this.scrollToPosition(0, 0, true);
          }
        }
      };

      _this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {
        if (extraHeight === undefined) {
          extraHeight = _this.props.extraHeight;
        }

        var reactNode = (0, _reactNative.findNodeHandle)(nodeID);

        _this.scrollToFocusedInput(reactNode, extraHeight + _this.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this.props.keyboardOpeningTime || 0);
      };

      _this._handleOnScroll = function (e) {
        _this.position = e.nativeEvent.contentOffset;
      };

      _this._handleRef = function (ref) {
        _this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref;

        if (_this.props.innerRef) {
          _this.props.innerRef(_this._rnkasv_keyboardView);
        }
      };

      _this.update = function () {
        var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedField();

        var responder = _this.getScrollResponder();

        if (!currentlyFocusedField || !responder) {
          return;
        }

        _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);
      };

      _this.keyboardWillShowEvent = undefined;
      _this.keyboardWillHideEvent = undefined;
      _this.callbacks = {};
      _this.position = {
        x: 0,
        y: 0
      };
      _this.defaultResetScrollToCoords = null;

      var _keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;

      _this.state = {
        keyboardSpace: _keyboardSpace
      };
      return _this;
    }

    (0, _createClass2["default"])(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.mountedComponent = true;

        if (_reactNative.Platform.OS === 'ios') {
          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);
          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);
        } else if (_reactNative.Platform.OS === 'android' && this.props.enableOnAndroid) {
          this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);
          this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);
        }

        supportedKeyboardEvents.forEach(function (eventName) {
          var callbackName = keyboardEventToCallbackName(eventName);

          if (_this2.props[callbackName]) {
            _this2.callbacks[eventName] = _reactNative.Keyboard.addListener(eventName, _this2.props[callbackName]);
          }
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {
          var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;

          if (this.state.keyboardSpace !== keyboardSpace) {
            this.setState({
              keyboardSpace: keyboardSpace
            });
          }
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mountedComponent = false;
        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();
        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();
        Object.values(this.callbacks).forEach(function (callback) {
          return callback.remove();
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            enableOnAndroid = _this$props.enableOnAndroid,
            contentContainerStyle = _this$props.contentContainerStyle,
            onScroll = _this$props.onScroll;
        var newContentContainerStyle;

        if (_reactNative.Platform.OS === 'android' && enableOnAndroid) {
          newContentContainerStyle = [].concat(contentContainerStyle).concat({
            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace
          });
        }

        var refProps = (0, _defineProperty2["default"])({}, hocOptions.refPropName, this._handleRef);
        return _react["default"].createElement(ScrollableComponent, (0, _extends2["default"])({}, refProps, {
          keyboardDismissMode: "interactive",
          contentInset: {
            bottom: this.state.keyboardSpace
          },
          automaticallyAdjustContentInsets: false,
          showsVerticalScrollIndicator: true,
          scrollEventThrottle: 1
        }, this.props, {
          contentContainerStyle: newContentContainerStyle || contentContainerStyle,
          keyboardSpace: this.state.keyboardSpace,
          getScrollResponder: this.getScrollResponder,
          scrollToPosition: this.scrollToPosition,
          scrollToEnd: this.scrollToEnd,
          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,
          scrollToFocusedInput: this.scrollToFocusedInput,
          scrollIntoView: this.scrollIntoView,
          resetKeyboardSpace: this._resetKeyboardSpace,
          handleOnScroll: this._handleOnScroll,
          update: this.update,
          onScroll: _reactNative.Animated.forkEvent(onScroll, this._handleOnScroll)
        }));
      }
    }]);
    return _class;
  }(_react["default"].Component), _class.displayName = "KeyboardAware" + getDisplayName(ScrollableComponent), _class.propTypes = _objectSpread({
    viewIsInsideTabBar: _propTypes["default"].bool,
    resetScrollToCoords: _propTypes["default"].shape({
      x: _propTypes["default"].number.isRequired,
      y: _propTypes["default"].number.isRequired
    }),
    enableResetScrollToCoords: _propTypes["default"].bool,
    enableAutomaticScroll: _propTypes["default"].bool,
    extraHeight: _propTypes["default"].number,
    extraScrollHeight: _propTypes["default"].number,
    keyboardOpeningTime: _propTypes["default"].number,
    onScroll: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].object]),
    update: _propTypes["default"].func,
    contentContainerStyle: _propTypes["default"].any,
    enableOnAndroid: _propTypes["default"].bool,
    innerRef: _propTypes["default"].func
  }, keyboardEventPropTypes), _class.defaultProps = {
    enableAutomaticScroll: hocOptions.enableAutomaticScroll,
    extraHeight: hocOptions.extraHeight,
    extraScrollHeight: hocOptions.extraScrollHeight,
    enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,
    keyboardOpeningTime: hocOptions.keyboardOpeningTime,
    viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,
    enableOnAndroid: hocOptions.enableOnAndroid
  }, _temp;
}

var listenToKeyboardEvents = function listenToKeyboardEvents(configOrComp) {
  if ((0, _typeof2["default"])(configOrComp) === 'object') {
    return function (Comp) {
      return KeyboardAwareHOC(Comp, configOrComp);
    };
  } else {
    return KeyboardAwareHOC(configOrComp);
  }
};

var _default = listenToKeyboardEvents;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,