eb111e1c1f0e0017534daabe41c0a8ec
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var Animation = function () {
  function Animation() {
    (0, _classCallCheck2["default"])(this, Animation);
    this.__active = void 0;
    this.__isInteraction = void 0;
    this.__nativeId = void 0;
    this.__onEnd = void 0;
    this.__iterations = void 0;
  }

  (0, _createClass2["default"])(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      NativeAnimatedHelper.API.enableQueue();

      animatedValue.__makeNative();

      NativeAnimatedHelper.API.disableQueue();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJBbmltYXRpb24iLCJfX2FjdGl2ZSIsIl9faXNJbnRlcmFjdGlvbiIsIl9fbmF0aXZlSWQiLCJfX29uRW5kIiwiX19pdGVyYXRpb25zIiwiZnJvbVZhbHVlIiwib25VcGRhdGUiLCJvbkVuZCIsInByZXZpb3VzQW5pbWF0aW9uIiwiYW5pbWF0ZWRWYWx1ZSIsIkFQSSIsInN0b3BBbmltYXRpb24iLCJFcnJvciIsInJlc3VsdCIsImVuYWJsZVF1ZXVlIiwiX19tYWtlTmF0aXZlIiwiZGlzYWJsZVF1ZXVlIiwiZ2VuZXJhdGVOZXdBbmltYXRpb25JZCIsInN0YXJ0QW5pbWF0aW5nTm9kZSIsIl9fZ2V0TmF0aXZlVGFnIiwiX19nZXROYXRpdmVBbmltYXRpb25Db25maWciLCJfX2RlYm91bmNlZE9uRW5kIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBOzs7Ozs7OztBQUVBLElBQU1BLG9CQUFvQixHQUFHQyxPQUFPLENBQUMseUJBQUQsQ0FBcEM7O0lBaUJNQyxTOzs7U0FDSkMsUTtTQUNBQyxlO1NBQ0FDLFU7U0FDQUMsTztTQUNBQyxZOzs7OzswQkFFRUMsUyxFQUNBQyxRLEVBQ0FDLEssRUFDQUMsaUIsRUFDQUMsYSxFQUNNLENBQUU7OzsyQkFDRztBQUNYLFVBQUksS0FBS1AsVUFBVCxFQUFxQjtBQUNuQkwsUUFBQUEsb0JBQW9CLENBQUNhLEdBQXJCLENBQXlCQyxhQUF6QixDQUF1QyxLQUFLVCxVQUE1QztBQUNEO0FBQ0Y7OztpREFDaUM7QUFHaEMsWUFBTSxJQUFJVSxLQUFKLENBQVUsbURBQVYsQ0FBTjtBQUNEOzs7cUNBRWdCQyxNLEVBQXlCO0FBQ3hDLFVBQU1OLEtBQUssR0FBRyxLQUFLSixPQUFuQjtBQUNBLFdBQUtBLE9BQUwsR0FBZSxJQUFmO0FBQ0FJLE1BQUFBLEtBQUssSUFBSUEsS0FBSyxDQUFDTSxNQUFELENBQWQ7QUFDRDs7OzJDQUNzQkosYSxFQUFvQztBQUN6RFosTUFBQUEsb0JBQW9CLENBQUNhLEdBQXJCLENBQXlCSSxXQUF6Qjs7QUFDQUwsTUFBQUEsYUFBYSxDQUFDTSxZQUFkOztBQUNBbEIsTUFBQUEsb0JBQW9CLENBQUNhLEdBQXJCLENBQXlCTSxZQUF6QjtBQUNBLFdBQUtkLFVBQUwsR0FBa0JMLG9CQUFvQixDQUFDb0Isc0JBQXJCLEVBQWxCO0FBQ0FwQixNQUFBQSxvQkFBb0IsQ0FBQ2EsR0FBckIsQ0FBeUJRLGtCQUF6QixDQUNFLEtBQUtoQixVQURQLEVBRUVPLGFBQWEsQ0FBQ1UsY0FBZCxFQUZGLEVBR0UsS0FBS0MsMEJBQUwsRUFIRixFQUlFLEtBQUtDLGdCQUFMLENBQXNCQyxJQUF0QixDQUEyQixJQUEzQixDQUpGO0FBTUQ7Ozs7O0FBR0hDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnpCLFNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcblxuZXhwb3J0IHR5cGUgRW5kUmVzdWx0ID0ge2ZpbmlzaGVkOiBib29sZWFufTtcbmV4cG9ydCB0eXBlIEVuZENhbGxiYWNrID0gKHJlc3VsdDogRW5kUmVzdWx0KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBBbmltYXRpb25Db25maWcgPSB7XG4gIGlzSW50ZXJhY3Rpb24/OiBib29sZWFuLFxuICB1c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW4sXG4gIG9uQ29tcGxldGU/OiA/RW5kQ2FsbGJhY2ssXG4gIGl0ZXJhdGlvbnM/OiBudW1iZXIsXG59O1xuXG4vLyBJbXBvcnRhbnQgbm90ZTogc3RhcnQoKSBhbmQgc3RvcCgpIHdpbGwgb25seSBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlLlxuLy8gT25jZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gc3RvcHBlZCBvciBmaW5pc2hlZCBpdHMgY291cnNlLCBpdCB3aWxsXG4vLyBub3QgYmUgcmV1c2VkLlxuY2xhc3MgQW5pbWF0aW9uIHtcbiAgX19hY3RpdmU6IGJvb2xlYW47XG4gIF9faXNJbnRlcmFjdGlvbjogYm9vbGVhbjtcbiAgX19uYXRpdmVJZDogbnVtYmVyO1xuICBfX29uRW5kOiA/RW5kQ2FsbGJhY2s7XG4gIF9faXRlcmF0aW9uczogbnVtYmVyO1xuICBzdGFydChcbiAgICBmcm9tVmFsdWU6IG51bWJlcixcbiAgICBvblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FbmQ6ID9FbmRDYWxsYmFjayxcbiAgICBwcmV2aW91c0FuaW1hdGlvbjogP0FuaW1hdGlvbixcbiAgICBhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlLFxuICApOiB2b2lkIHt9XG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX19uYXRpdmVJZCkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0b3BBbmltYXRpb24odGhpcy5fX25hdGl2ZUlkKTtcbiAgICB9XG4gIH1cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTogYW55IHtcbiAgICAvLyBTdWJjbGFzc2VzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGFuaW1hdGlvbiBpbXBsZW1lbnRhdGlvbiBkb25lIGluIG5hdGl2ZVxuICAgIC8vIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZFxuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBhbmltYXRpb24gdHlwZSBjYW5ub3QgYmUgb2ZmbG9hZGVkIHRvIG5hdGl2ZScpO1xuICB9XG4gIC8vIEhlbHBlciBmdW5jdGlvbiBmb3Igc3ViY2xhc3NlcyB0byBtYWtlIHN1cmUgb25FbmQgaXMgb25seSBjYWxsZWQgb25jZS5cbiAgX19kZWJvdW5jZWRPbkVuZChyZXN1bHQ6IEVuZFJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IG9uRW5kID0gdGhpcy5fX29uRW5kO1xuICAgIHRoaXMuX19vbkVuZCA9IG51bGw7XG4gICAgb25FbmQgJiYgb25FbmQocmVzdWx0KTtcbiAgfVxuICBfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uKGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUpOiB2b2lkIHtcbiAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuZW5hYmxlUXVldWUoKTtcbiAgICBhbmltYXRlZFZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5kaXNhYmxlUXVldWUoKTtcbiAgICB0aGlzLl9fbmF0aXZlSWQgPSBOYXRpdmVBbmltYXRlZEhlbHBlci5nZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCk7XG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0YXJ0QW5pbWF0aW5nTm9kZShcbiAgICAgIHRoaXMuX19uYXRpdmVJZCxcbiAgICAgIGFuaW1hdGVkVmFsdWUuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgIHRoaXMuX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKSxcbiAgICAgIHRoaXMuX19kZWJvdW5jZWRPbkVuZC5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRpb247XG4iXX0=