{"version":3,"sources":["Grid.js"],"names":["GridNB","type","flex","flexDirection","ifRow","defaultProps","style","props","row","React","Children","forEach","children","child","Row","nativeProps","_root","setNativeProps","onPress","component","prepareRootProps","Component"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;IAGqBA,M;;;;;;;;;;uCACE;AAEf,UAAIC,IAAI,GAAG;AACPC,QAAAA,IAAI,EAAE,CADC;AAEPC,QAAAA,aAAa,EAAE,KAAKC,KAAL,KAAe,QAAf,GAA0B;AAFlC,OAAX;AAKA,UAAIC,YAAY,GAAG;AACfC,QAAAA,KAAK,EAAEL;AADQ,OAAnB;AAIA,aAAO,8BAAa,KAAKM,KAAlB,EAAyBF,YAAzB,CAAP;AAEH;;;4BAEO;AACJ,UAAIG,GAAG,GAAG,KAAV;;AACAC,wBAAMC,QAAN,CAAeC,OAAf,CAAuB,KAAKJ,KAAL,CAAWK,QAAlC,EAA4C,UAAUC,KAAV,EAAiB;AACzD,YAAGA,KAAK,IAAIA,KAAK,CAACZ,IAAN,IAAca,eAA1B,EACIN,GAAG,GAAG,IAAN;AACP,OAHD;;AAIA,aAAOA,GAAP;AACH;;;mCAEcO,W,EAAa;AAC1B,WAAKC,KAAL,CAAWC,cAAX,CAA0BF,WAA1B;AACD;;;6BAEM;AAAA;;AACP,UAAG,KAAKR,KAAL,CAAWW,OAAd,EAAsB;AACpB,eACE,gCAAC,6BAAD;AAAkB,UAAA,OAAO,EAAE,KAAKX,KAAL,CAAWW;AAAtC,WACJ,gCAAC,iBAAD;AACE,UAAA,GAAG,EAAE,aAAAC,SAAS;AAAA,mBAAI,KAAI,CAACH,KAAL,GAAaG,SAAjB;AAAA;AADhB,WAEM,KAAKZ,KAFX,EAGM,KAAKa,gBAAL,EAHN,GAIE,KAAKb,KAAL,CAAWK,QAJb,CADI,CADF;AASD,OAVD,MAWI;AACF,eACE,gCAAC,iBAAD;AACF,UAAA,GAAG,EAAE,aAAAO,SAAS;AAAA,mBAAI,KAAI,CAACH,KAAL,GAAaG,SAAjB;AAAA;AADZ,WAEE,KAAKZ,KAFP,EAGE,KAAKa,gBAAL,EAHF,GAIF,KAAKb,KAAL,CAAWK,QAJT,CADF;AAOD;AACF;;;EAlDiCS,gB","sourcesContent":["'use strict';\n\nimport React, {Component} from 'react';\nimport {View, TouchableOpacity} from 'react-native';\nimport computeProps from '../Utils/computeProps';\nimport Col from './Col';\nimport Row from './Row';\n\n\nexport default class GridNB extends Component {\n    prepareRootProps() {\n\n        var type = {\n            flex: 1,\n            flexDirection: this.ifRow() ? 'column' : 'row'\n        }\n\n        var defaultProps = {\n            style: type\n        }\n\n        return computeProps(this.props, defaultProps);\n\n    }\n\n    ifRow() {\n        var row = false;\n        React.Children.forEach(this.props.children, function (child) {\n            if(child && child.type == Row)\n                row = true;\n        })\n        return row;\n    }\n\n    setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n\n  render() {\n    if(this.props.onPress){\n      return(\n        <TouchableOpacity onPress={this.props.onPress}>\n    <View\n      ref={component => this._root = component}\n      {...this.props}\n      {...this.prepareRootProps()}\n    >{this.props.children}</View>\n      </TouchableOpacity>\n    );\n    }\n    else{\n      return(\n        <View\n      ref={component => this._root = component}\n      {...this.props}\n      {...this.prepareRootProps()}\n    >{this.props.children}</View>\n    );\n    }\n  }\n\n}\n"]}