fe3b0de98fed995f3dca70df3ad87e28
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Platform = require('../Utilities/Platform');

var React = require('react');

var ScrollView = require('../Components/ScrollView/ScrollView');

var VirtualizedSectionList = require('./VirtualizedSectionList');

var defaultProps = _objectSpread({}, VirtualizedSectionList.defaultProps, {
  stickySectionHeadersEnabled: Platform.OS === 'ios'
});

var SectionList = function (_React$PureComponent) {
  (0, _inherits2["default"])(SectionList, _React$PureComponent);

  function SectionList() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, SectionList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(SectionList)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.props = void 0;
    _this._wrapperListRef = void 0;

    _this._captureRef = function (ref) {
      _this._wrapperListRef = ref;
    };

    return _this;
  }

  (0, _createClass2["default"])(SectionList, [{
    key: "scrollToLocation",
    value: function scrollToLocation(params) {
      if (this._wrapperListRef != null) {
        this._wrapperListRef.scrollToLocation(params);
      }
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

      listRef && listRef.recordInteraction();
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

      listRef && listRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

      if (listRef) {
        return listRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

      if (listRef) {
        return listRef.getScrollableNode();
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();

      if (listRef) {
        listRef.setNativeProps(props);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(VirtualizedSectionList, (0, _extends2["default"])({}, this.props, {
        ref: this._captureRef,
        getItemCount: function getItemCount(items) {
          return items.length;
        },
        getItem: function getItem(items, index) {
          return items[index];
        }
      }));
    }
  }]);
  return SectionList;
}(React.PureComponent);

SectionList.defaultProps = defaultProps;
module.exports = SectionList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlY3Rpb25MaXN0LmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlJlYWN0IiwiU2Nyb2xsVmlldyIsIlZpcnR1YWxpemVkU2VjdGlvbkxpc3QiLCJkZWZhdWx0UHJvcHMiLCJzdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWQiLCJPUyIsIlNlY3Rpb25MaXN0IiwicHJvcHMiLCJfd3JhcHBlckxpc3RSZWYiLCJfY2FwdHVyZVJlZiIsInJlZiIsInBhcmFtcyIsInNjcm9sbFRvTG9jYXRpb24iLCJsaXN0UmVmIiwiZ2V0TGlzdFJlZiIsInJlY29yZEludGVyYWN0aW9uIiwiZmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJzZXROYXRpdmVQcm9wcyIsIml0ZW1zIiwibGVuZ3RoIiwiaW5kZXgiLCJQdXJlQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQyx1QkFBRCxDQUF4Qjs7QUFDQSxJQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLElBQU1FLFVBQVUsR0FBR0YsT0FBTyxDQUFDLHFDQUFELENBQTFCOztBQUNBLElBQU1HLHNCQUFzQixHQUFHSCxPQUFPLENBQUMsMEJBQUQsQ0FBdEM7O0FBMkpBLElBQU1JLFlBQVkscUJBQ2JELHNCQUFzQixDQUFDQyxZQURWO0FBRWhCQyxFQUFBQSwyQkFBMkIsRUFBRU4sUUFBUSxDQUFDTyxFQUFULEtBQWdCO0FBRjdCLEVBQWxCOztJQThETUMsVzs7Ozs7Ozs7Ozs7Ozs7O1VBSUpDLEs7VUEwRUFDLGU7O1VBQ0FDLFcsR0FBYyxVQUFBQyxHQUFHLEVBQUk7QUFJbkIsWUFBS0YsZUFBTCxHQUF1QkUsR0FBdkI7QUFDRCxLOzs7Ozs7O3FDQW5FZ0JDLE0sRUFBb0M7QUFDbkQsVUFBSSxLQUFLSCxlQUFMLElBQXdCLElBQTVCLEVBQWtDO0FBQ2hDLGFBQUtBLGVBQUwsQ0FBcUJJLGdCQUFyQixDQUFzQ0QsTUFBdEM7QUFDRDtBQUNGOzs7d0NBT21CO0FBQ2xCLFVBQU1FLE9BQU8sR0FBRyxLQUFLTCxlQUFMLElBQXdCLEtBQUtBLGVBQUwsQ0FBcUJNLFVBQXJCLEVBQXhDOztBQUNBRCxNQUFBQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsaUJBQVIsRUFBWDtBQUNEOzs7NENBT3VCO0FBQ3RCLFVBQU1GLE9BQU8sR0FBRyxLQUFLTCxlQUFMLElBQXdCLEtBQUtBLGVBQUwsQ0FBcUJNLFVBQXJCLEVBQXhDOztBQUNBRCxNQUFBQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0cscUJBQVIsRUFBWDtBQUNEOzs7eUNBS2lDO0FBQ2hDLFVBQU1ILE9BQU8sR0FBRyxLQUFLTCxlQUFMLElBQXdCLEtBQUtBLGVBQUwsQ0FBcUJNLFVBQXJCLEVBQXhDOztBQUNBLFVBQUlELE9BQUosRUFBYTtBQUNYLGVBQU9BLE9BQU8sQ0FBQ0ksa0JBQVIsRUFBUDtBQUNEO0FBQ0Y7Ozt3Q0FFd0I7QUFDdkIsVUFBTUosT0FBTyxHQUFHLEtBQUtMLGVBQUwsSUFBd0IsS0FBS0EsZUFBTCxDQUFxQk0sVUFBckIsRUFBeEM7O0FBQ0EsVUFBSUQsT0FBSixFQUFhO0FBQ1gsZUFBT0EsT0FBTyxDQUFDSyxpQkFBUixFQUFQO0FBQ0Q7QUFDRjs7O21DQUVjWCxLLEVBQWU7QUFDNUIsVUFBTU0sT0FBTyxHQUFHLEtBQUtMLGVBQUwsSUFBd0IsS0FBS0EsZUFBTCxDQUFxQk0sVUFBckIsRUFBeEM7O0FBQ0EsVUFBSUQsT0FBSixFQUFhO0FBQ1hBLFFBQUFBLE9BQU8sQ0FBQ00sY0FBUixDQUF1QlosS0FBdkI7QUFDRDtBQUNGOzs7NkJBRW9CO0FBQ25CLGFBQ0Usb0JBQUMsc0JBQUQsZ0NBQ00sS0FBS0EsS0FEWDtBQUVFLFFBQUEsR0FBRyxFQUFFLEtBQUtFLFdBRlo7QUFHRSxRQUFBLFlBQVksRUFBRSxzQkFBQVcsS0FBSztBQUFBLGlCQUFJQSxLQUFLLENBQUNDLE1BQVY7QUFBQSxTQUhyQjtBQUlFLFFBQUEsT0FBTyxFQUFFLGlCQUFDRCxLQUFELEVBQVFFLEtBQVI7QUFBQSxpQkFBa0JGLEtBQUssQ0FBQ0UsS0FBRCxDQUF2QjtBQUFBO0FBSlgsU0FERjtBQVFEOzs7RUE1RW1EdEIsS0FBSyxDQUFDdUIsYTs7QUFBdERqQixXLENBS0dILFksR0FBNkJBLFk7QUFrRnRDcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkIsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFNjcm9sbFZpZXcgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldycpO1xuY29uc3QgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCA9IHJlcXVpcmUoJy4vVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCcpO1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Rva2VufSBmcm9tICcuL1ZpZXdhYmlsaXR5SGVscGVyJztcbmltcG9ydCB0eXBlIHtcbiAgU2VjdGlvbkJhc2UgYXMgX1NlY3Rpb25CYXNlLFxuICBQcm9wcyBhcyBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0UHJvcHMsXG4gIFNjcm9sbFRvTG9jYXRpb25QYXJhbXNUeXBlLFxufSBmcm9tICcuL1ZpcnR1YWxpemVkU2VjdGlvbkxpc3QnO1xuXG50eXBlIEl0ZW0gPSBhbnk7XG5cbmV4cG9ydCB0eXBlIFNlY3Rpb25CYXNlPFNlY3Rpb25JdGVtVD4gPSBfU2VjdGlvbkJhc2U8U2VjdGlvbkl0ZW1UPjtcblxudHlwZSBSZXF1aXJlZFByb3BzPFNlY3Rpb25UOiBTZWN0aW9uQmFzZTxhbnk+PiA9IHtcbiAgLyoqXG4gICAqIFRoZSBhY3R1YWwgZGF0YSB0byByZW5kZXIsIGFraW4gdG8gdGhlIGBkYXRhYCBwcm9wIGluIFtgPEZsYXRMaXN0PmBdKC9yZWFjdC1uYXRpdmUvZG9jcy9mbGF0bGlzdC5odG1sKS5cbiAgICpcbiAgICogR2VuZXJhbCBzaGFwZTpcbiAgICpcbiAgICogICAgIHNlY3Rpb25zOiAkUmVhZE9ubHlBcnJheTx7XG4gICAqICAgICAgIGRhdGE6ICRSZWFkT25seUFycmF5PFNlY3Rpb25JdGVtPixcbiAgICogICAgICAgcmVuZGVySXRlbT86ICh7aXRlbTogU2VjdGlvbkl0ZW0sIC4uLn0pID0+ID9SZWFjdC5FbGVtZW50PCo+LFxuICAgKiAgICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50PzogP1JlYWN0Q2xhc3M8e2hpZ2hsaWdodGVkOiBib29sZWFuLCAuLi59PixcbiAgICogICAgIH0+XG4gICAqL1xuICBzZWN0aW9uczogJFJlYWRPbmx5QXJyYXk8U2VjdGlvblQ+LFxufTtcblxudHlwZSBPcHRpb25hbFByb3BzPFNlY3Rpb25UOiBTZWN0aW9uQmFzZTxhbnk+PiA9IHtcbiAgLyoqXG4gICAqIERlZmF1bHQgcmVuZGVyZXIgZm9yIGV2ZXJ5IGl0ZW0gaW4gZXZlcnkgc2VjdGlvbi4gQ2FuIGJlIG92ZXItcmlkZGVuIG9uIGEgcGVyLXNlY3Rpb24gYmFzaXMuXG4gICAqL1xuICByZW5kZXJJdGVtPzogKGluZm86IHtcbiAgICBpdGVtOiBJdGVtLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgc2VjdGlvbjogU2VjdGlvblQsXG4gICAgc2VwYXJhdG9yczoge1xuICAgICAgaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICAgICAgdW5oaWdobGlnaHQ6ICgpID0+IHZvaWQsXG4gICAgICB1cGRhdGVQcm9wczogKHNlbGVjdDogJ2xlYWRpbmcnIHwgJ3RyYWlsaW5nJywgbmV3UHJvcHM6IE9iamVjdCkgPT4gdm9pZCxcbiAgICB9LFxuICB9KSA9PiA/UmVhY3QuRWxlbWVudDxhbnk+LFxuICAvKipcbiAgICogUmVuZGVyZWQgaW4gYmV0d2VlbiBlYWNoIGl0ZW0sIGJ1dCBub3QgYXQgdGhlIHRvcCBvciBib3R0b20uIEJ5IGRlZmF1bHQsIGBoaWdobGlnaHRlZGAsXG4gICAqIGBzZWN0aW9uYCwgYW5kIGBbbGVhZGluZy90cmFpbGluZ11bSXRlbS9TZXBhcmF0b3JdYCBwcm9wcyBhcmUgcHJvdmlkZWQuIGByZW5kZXJJdGVtYCBwcm92aWRlc1xuICAgKiBgc2VwYXJhdG9ycy5oaWdobGlnaHRgL2B1bmhpZ2hsaWdodGAgd2hpY2ggd2lsbCB1cGRhdGUgdGhlIGBoaWdobGlnaHRlZGAgcHJvcCwgYnV0IHlvdSBjYW4gYWxzb1xuICAgKiBhZGQgY3VzdG9tIHByb3BzIHdpdGggYHNlcGFyYXRvcnMudXBkYXRlUHJvcHNgLlxuICAgKi9cbiAgSXRlbVNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIGxpc3QuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RIZWFkZXJDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCB3aGVuIHRoZSBsaXN0IGlzIGVtcHR5LiBDYW4gYmUgYSBSZWFjdCBDb21wb25lbnQgQ2xhc3MsIGEgcmVuZGVyIGZ1bmN0aW9uLCBvclxuICAgKiBhIHJlbmRlcmVkIGVsZW1lbnQuXG4gICAqL1xuICBMaXN0RW1wdHlDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdmVyeSBlbmQgb2YgdGhlIGxpc3QuIENhbiBiZSBhIFJlYWN0IENvbXBvbmVudCBDbGFzcywgYSByZW5kZXIgZnVuY3Rpb24sIG9yXG4gICAqIGEgcmVuZGVyZWQgZWxlbWVudC5cbiAgICovXG4gIExpc3RGb290ZXJDb21wb25lbnQ/OiA/KFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB8IFJlYWN0LkVsZW1lbnQ8YW55PiksXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdG9wIGFuZCBib3R0b20gb2YgZWFjaCBzZWN0aW9uIChub3RlIHRoaXMgaXMgZGlmZmVyZW50IGZyb21cbiAgICogYEl0ZW1TZXBhcmF0b3JDb21wb25lbnRgIHdoaWNoIGlzIG9ubHkgcmVuZGVyZWQgYmV0d2VlbiBpdGVtcykuIFRoZXNlIGFyZSBpbnRlbmRlZCB0byBzZXBhcmF0ZVxuICAgKiBzZWN0aW9ucyBmcm9tIHRoZSBoZWFkZXJzIGFib3ZlIGFuZCBiZWxvdyBhbmQgdHlwaWNhbGx5IGhhdmUgdGhlIHNhbWUgaGlnaGxpZ2h0IHJlc3BvbnNlIGFzXG4gICAqIGBJdGVtU2VwYXJhdG9yQ29tcG9uZW50YC4gQWxzbyByZWNlaXZlcyBgaGlnaGxpZ2h0ZWRgLCBgW2xlYWRpbmcvdHJhaWxpbmddW0l0ZW0vU2VwYXJhdG9yXWAsXG4gICAqIGFuZCBhbnkgY3VzdG9tIHByb3BzIGZyb20gYHNlcGFyYXRvcnMudXBkYXRlUHJvcHNgLlxuICAgKi9cbiAgU2VjdGlvblNlcGFyYXRvckNvbXBvbmVudD86ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIC8qKlxuICAgKiBBIG1hcmtlciBwcm9wZXJ0eSBmb3IgdGVsbGluZyB0aGUgbGlzdCB0byByZS1yZW5kZXIgKHNpbmNlIGl0IGltcGxlbWVudHMgYFB1cmVDb21wb25lbnRgKS4gSWZcbiAgICogYW55IG9mIHlvdXIgYHJlbmRlckl0ZW1gLCBIZWFkZXIsIEZvb3RlciwgZXRjLiBmdW5jdGlvbnMgZGVwZW5kIG9uIGFueXRoaW5nIG91dHNpZGUgb2YgdGhlXG4gICAqIGBkYXRhYCBwcm9wLCBzdGljayBpdCBoZXJlIGFuZCB0cmVhdCBpdCBpbW11dGFibHkuXG4gICAqL1xuICBleHRyYURhdGE/OiBhbnksXG4gIC8qKlxuICAgKiBIb3cgbWFueSBpdGVtcyB0byByZW5kZXIgaW4gdGhlIGluaXRpYWwgYmF0Y2guIFRoaXMgc2hvdWxkIGJlIGVub3VnaCB0byBmaWxsIHRoZSBzY3JlZW4gYnV0IG5vdFxuICAgKiBtdWNoIG1vcmUuIE5vdGUgdGhlc2UgaXRlbXMgd2lsbCBuZXZlciBiZSB1bm1vdW50ZWQgYXMgcGFydCBvZiB0aGUgd2luZG93ZWQgcmVuZGVyaW5nIGluIG9yZGVyXG4gICAqIHRvIGltcHJvdmUgcGVyY2VpdmVkIHBlcmZvcm1hbmNlIG9mIHNjcm9sbC10by10b3AgYWN0aW9ucy5cbiAgICovXG4gIGluaXRpYWxOdW1Ub1JlbmRlcjogbnVtYmVyLFxuICAvKipcbiAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBzY3JvbGwuIFVzZXMgc2NhbGUgdHJhbnNmb3JtcyBvZiAtMS5cbiAgICovXG4gIGludmVydGVkPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgYSB1bmlxdWUga2V5IGZvciBhIGdpdmVuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCBpbmRleC4gS2V5IGlzIHVzZWQgZm9yIGNhY2hpbmdcbiAgICogYW5kIGFzIHRoZSByZWFjdCBrZXkgdG8gdHJhY2sgaXRlbSByZS1vcmRlcmluZy4gVGhlIGRlZmF1bHQgZXh0cmFjdG9yIGNoZWNrcyBpdGVtLmtleSwgdGhlblxuICAgKiBmYWxscyBiYWNrIHRvIHVzaW5nIHRoZSBpbmRleCwgbGlrZSByZWFjdCBkb2VzLiBOb3RlIHRoYXQgdGhpcyBzZXRzIGtleXMgZm9yIGVhY2ggaXRlbSwgYnV0XG4gICAqIGVhY2ggb3ZlcmFsbCBzZWN0aW9uIHN0aWxsIG5lZWRzIGl0cyBvd24ga2V5LlxuICAgKi9cbiAga2V5RXh0cmFjdG9yOiAoaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGVkIG9uY2Ugd2hlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGdldHMgd2l0aGluIGBvbkVuZFJlYWNoZWRUaHJlc2hvbGRgIG9mIHRoZSByZW5kZXJlZFxuICAgKiBjb250ZW50LlxuICAgKi9cbiAgb25FbmRSZWFjaGVkPzogPyhpbmZvOiB7ZGlzdGFuY2VGcm9tRW5kOiBudW1iZXJ9KSA9PiB2b2lkLFxuICAvKipcbiAgICogSG93IGZhciBmcm9tIHRoZSBlbmQgKGluIHVuaXRzIG9mIHZpc2libGUgbGVuZ3RoIG9mIHRoZSBsaXN0KSB0aGUgYm90dG9tIGVkZ2Ugb2YgdGhlXG4gICAqIGxpc3QgbXVzdCBiZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQgdG8gdHJpZ2dlciB0aGUgYG9uRW5kUmVhY2hlZGAgY2FsbGJhY2suXG4gICAqIFRodXMgYSB2YWx1ZSBvZiAwLjUgd2lsbCB0cmlnZ2VyIGBvbkVuZFJlYWNoZWRgIHdoZW4gdGhlIGVuZCBvZiB0aGUgY29udGVudCBpc1xuICAgKiB3aXRoaW4gaGFsZiB0aGUgdmlzaWJsZSBsZW5ndGggb2YgdGhlIGxpc3QuXG4gICAqL1xuICBvbkVuZFJlYWNoZWRUaHJlc2hvbGQ/OiA/bnVtYmVyLFxuICAvKipcbiAgICogSWYgcHJvdmlkZWQsIGEgc3RhbmRhcmQgUmVmcmVzaENvbnRyb2wgd2lsbCBiZSBhZGRlZCBmb3IgXCJQdWxsIHRvIFJlZnJlc2hcIiBmdW5jdGlvbmFsaXR5LiBNYWtlXG4gICAqIHN1cmUgdG8gYWxzbyBzZXQgdGhlIGByZWZyZXNoaW5nYCBwcm9wIGNvcnJlY3RseS5cbiAgICovXG4gIG9uUmVmcmVzaD86ID8oKSA9PiB2b2lkLFxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXdhYmlsaXR5IG9mIHJvd3MgY2hhbmdlcywgYXMgZGVmaW5lZCBieSB0aGVcbiAgICogYHZpZXdhYmlsaXR5Q29uZmlnYCBwcm9wLlxuICAgKi9cbiAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZD86ID8oaW5mbzoge1xuICAgIHZpZXdhYmxlSXRlbXM6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgY2hhbmdlZDogQXJyYXk8Vmlld1Rva2VuPixcbiAgfSkgPT4gdm9pZCxcbiAgLyoqXG4gICAqIFNldCB0aGlzIHRydWUgd2hpbGUgd2FpdGluZyBmb3IgbmV3IGRhdGEgZnJvbSBhIHJlZnJlc2guXG4gICAqL1xuICByZWZyZXNoaW5nPzogP2Jvb2xlYW4sXG4gIC8qKlxuICAgKiBOb3RlOiBtYXkgaGF2ZSBidWdzIChtaXNzaW5nIGNvbnRlbnQpIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyAtIHVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKlxuICAgKiBUaGlzIG1heSBpbXByb3ZlIHNjcm9sbCBwZXJmb3JtYW5jZSBmb3IgbGFyZ2UgbGlzdHMuXG4gICAqL1xuICByZW1vdmVDbGlwcGVkU3Vidmlld3M/OiBib29sZWFuLFxuICAvKipcbiAgICogUmVuZGVyZWQgYXQgdGhlIHRvcCBvZiBlYWNoIHNlY3Rpb24uIFRoZXNlIHN0aWNrIHRvIHRoZSB0b3Agb2YgdGhlIGBTY3JvbGxWaWV3YCBieSBkZWZhdWx0IG9uXG4gICAqIGlPUy4gU2VlIGBzdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWRgLlxuICAgKi9cbiAgcmVuZGVyU2VjdGlvbkhlYWRlcj86ID8oaW5mbzoge3NlY3Rpb246IFNlY3Rpb25UfSkgPT4gP1JlYWN0LkVsZW1lbnQ8YW55PixcbiAgLyoqXG4gICAqIFJlbmRlcmVkIGF0IHRoZSBib3R0b20gb2YgZWFjaCBzZWN0aW9uLlxuICAgKi9cbiAgcmVuZGVyU2VjdGlvbkZvb3Rlcj86ID8oaW5mbzoge3NlY3Rpb246IFNlY3Rpb25UfSkgPT4gP1JlYWN0LkVsZW1lbnQ8YW55PixcbiAgLyoqXG4gICAqIE1ha2VzIHNlY3Rpb24gaGVhZGVycyBzdGljayB0byB0aGUgdG9wIG9mIHRoZSBzY3JlZW4gdW50aWwgdGhlIG5leHQgb25lIHB1c2hlcyBpdCBvZmYuIE9ubHlcbiAgICogZW5hYmxlZCBieSBkZWZhdWx0IG9uIGlPUyBiZWNhdXNlIHRoYXQgaXMgdGhlIHBsYXRmb3JtIHN0YW5kYXJkIHRoZXJlLlxuICAgKi9cbiAgc3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkPzogYm9vbGVhbixcblxuICAvKipcbiAgICogVGhlIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbiBpcyBubyBsb25nZXIgc3VwcG9ydGVkLlxuICAgKi9cbiAgbGVnYWN5SW1wbGVtZW50YXRpb24/OiBlbXB0eSxcbn07XG5cbmV4cG9ydCB0eXBlIFByb3BzPFNlY3Rpb25UPiA9IFJlcXVpcmVkUHJvcHM8U2VjdGlvblQ+ICZcbiAgT3B0aW9uYWxQcm9wczxTZWN0aW9uVD4gJlxuICBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0UHJvcHM8U2VjdGlvblQ+O1xuXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gIC4uLlZpcnR1YWxpemVkU2VjdGlvbkxpc3QuZGVmYXVsdFByb3BzLFxuICBzdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWQ6IFBsYXRmb3JtLk9TID09PSAnaW9zJyxcbn07XG5cbnR5cGUgRGVmYXVsdFByb3BzID0gdHlwZW9mIGRlZmF1bHRQcm9wcztcblxuLyoqXG4gKiBBIHBlcmZvcm1hbnQgaW50ZXJmYWNlIGZvciByZW5kZXJpbmcgc2VjdGlvbmVkIGxpc3RzLCBzdXBwb3J0aW5nIHRoZSBtb3N0IGhhbmR5IGZlYXR1cmVzOlxuICpcbiAqICAtIEZ1bGx5IGNyb3NzLXBsYXRmb3JtLlxuICogIC0gQ29uZmlndXJhYmxlIHZpZXdhYmlsaXR5IGNhbGxiYWNrcy5cbiAqICAtIExpc3QgaGVhZGVyIHN1cHBvcnQuXG4gKiAgLSBMaXN0IGZvb3RlciBzdXBwb3J0LlxuICogIC0gSXRlbSBzZXBhcmF0b3Igc3VwcG9ydC5cbiAqICAtIFNlY3Rpb24gaGVhZGVyIHN1cHBvcnQuXG4gKiAgLSBTZWN0aW9uIHNlcGFyYXRvciBzdXBwb3J0LlxuICogIC0gSGV0ZXJvZ2VuZW91cyBkYXRhIGFuZCBpdGVtIHJlbmRlcmluZyBzdXBwb3J0LlxuICogIC0gUHVsbCB0byBSZWZyZXNoLlxuICogIC0gU2Nyb2xsIGxvYWRpbmcuXG4gKlxuICogSWYgeW91IGRvbid0IG5lZWQgc2VjdGlvbiBzdXBwb3J0IGFuZCB3YW50IGEgc2ltcGxlciBpbnRlcmZhY2UsIHVzZVxuICogW2A8RmxhdExpc3Q+YF0oL3JlYWN0LW5hdGl2ZS9kb2NzL2ZsYXRsaXN0Lmh0bWwpLlxuICpcbiAqIFNpbXBsZSBFeGFtcGxlczpcbiAqXG4gKiAgICAgPFNlY3Rpb25MaXN0XG4gKiAgICAgICByZW5kZXJJdGVtPXsoe2l0ZW19KSA9PiA8TGlzdEl0ZW0gdGl0bGU9e2l0ZW19IC8+fVxuICogICAgICAgcmVuZGVyU2VjdGlvbkhlYWRlcj17KHtzZWN0aW9ufSkgPT4gPEhlYWRlciB0aXRsZT17c2VjdGlvbi50aXRsZX0gLz59XG4gKiAgICAgICBzZWN0aW9ucz17WyAvLyBob21vZ2VuZW91cyByZW5kZXJpbmcgYmV0d2VlbiBzZWN0aW9uc1xuICogICAgICAgICB7ZGF0YTogWy4uLl0sIHRpdGxlOiAuLi59LFxuICogICAgICAgICB7ZGF0YTogWy4uLl0sIHRpdGxlOiAuLi59LFxuICogICAgICAgICB7ZGF0YTogWy4uLl0sIHRpdGxlOiAuLi59LFxuICogICAgICAgXX1cbiAqICAgICAvPlxuICpcbiAqICAgICA8U2VjdGlvbkxpc3RcbiAqICAgICAgIHNlY3Rpb25zPXtbIC8vIGhldGVyb2dlbmVvdXMgcmVuZGVyaW5nIGJldHdlZW4gc2VjdGlvbnNcbiAqICAgICAgICAge2RhdGE6IFsuLi5dLCByZW5kZXJJdGVtOiAuLi59LFxuICogICAgICAgICB7ZGF0YTogWy4uLl0sIHJlbmRlckl0ZW06IC4uLn0sXG4gKiAgICAgICAgIHtkYXRhOiBbLi4uXSwgcmVuZGVySXRlbTogLi4ufSxcbiAqICAgICAgIF19XG4gKiAgICAgLz5cbiAqXG4gKiBUaGlzIGlzIGEgY29udmVuaWVuY2Ugd3JhcHBlciBhcm91bmQgW2A8VmlydHVhbGl6ZWRMaXN0PmBdKGRvY3MvdmlydHVhbGl6ZWRsaXN0Lmh0bWwpLFxuICogYW5kIHRodXMgaW5oZXJpdHMgaXRzIHByb3BzIChhcyB3ZWxsIGFzIHRob3NlIG9mIGBTY3JvbGxWaWV3YCkgdGhhdCBhcmVuJ3QgZXhwbGljaXRseSBsaXN0ZWRcbiAqIGhlcmUsIGFsb25nIHdpdGggdGhlIGZvbGxvd2luZyBjYXZlYXRzOlxuICpcbiAqIC0gSW50ZXJuYWwgc3RhdGUgaXMgbm90IHByZXNlcnZlZCB3aGVuIGNvbnRlbnQgc2Nyb2xscyBvdXQgb2YgdGhlIHJlbmRlciB3aW5kb3cuIE1ha2Ugc3VyZSBhbGxcbiAqICAgeW91ciBkYXRhIGlzIGNhcHR1cmVkIGluIHRoZSBpdGVtIGRhdGEgb3IgZXh0ZXJuYWwgc3RvcmVzIGxpa2UgRmx1eCwgUmVkdXgsIG9yIFJlbGF5LlxuICogLSBUaGlzIGlzIGEgYFB1cmVDb21wb25lbnRgIHdoaWNoIG1lYW5zIHRoYXQgaXQgd2lsbCBub3QgcmUtcmVuZGVyIGlmIGBwcm9wc2AgcmVtYWluIHNoYWxsb3ctXG4gKiAgIGVxdWFsLiBNYWtlIHN1cmUgdGhhdCBldmVyeXRoaW5nIHlvdXIgYHJlbmRlckl0ZW1gIGZ1bmN0aW9uIGRlcGVuZHMgb24gaXMgcGFzc2VkIGFzIGEgcHJvcFxuICogICAoZS5nLiBgZXh0cmFEYXRhYCkgdGhhdCBpcyBub3QgYD09PWAgYWZ0ZXIgdXBkYXRlcywgb3RoZXJ3aXNlIHlvdXIgVUkgbWF5IG5vdCB1cGRhdGUgb25cbiAqICAgY2hhbmdlcy4gVGhpcyBpbmNsdWRlcyB0aGUgYGRhdGFgIHByb3AgYW5kIHBhcmVudCBjb21wb25lbnQgc3RhdGUuXG4gKiAtIEluIG9yZGVyIHRvIGNvbnN0cmFpbiBtZW1vcnkgYW5kIGVuYWJsZSBzbW9vdGggc2Nyb2xsaW5nLCBjb250ZW50IGlzIHJlbmRlcmVkIGFzeW5jaHJvbm91c2x5XG4gKiAgIG9mZnNjcmVlbi4gVGhpcyBtZWFucyBpdCdzIHBvc3NpYmxlIHRvIHNjcm9sbCBmYXN0ZXIgdGhhbiB0aGUgZmlsbCByYXRlIGFuZCBtb21lbnRhcmlseSBzZWVcbiAqICAgYmxhbmsgY29udGVudC4gVGhpcyBpcyBhIHRyYWRlb2ZmIHRoYXQgY2FuIGJlIGFkanVzdGVkIHRvIHN1aXQgdGhlIG5lZWRzIG9mIGVhY2ggYXBwbGljYXRpb24sXG4gKiAgIGFuZCB3ZSBhcmUgd29ya2luZyBvbiBpbXByb3ZpbmcgaXQgYmVoaW5kIHRoZSBzY2VuZXMuXG4gKiAtIEJ5IGRlZmF1bHQsIHRoZSBsaXN0IGxvb2tzIGZvciBhIGBrZXlgIHByb3Agb24gZWFjaCBpdGVtIGFuZCB1c2VzIHRoYXQgZm9yIHRoZSBSZWFjdCBrZXkuXG4gKiAgIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gcHJvdmlkZSBhIGN1c3RvbSBga2V5RXh0cmFjdG9yYCBwcm9wLlxuICpcbiAqL1xuY2xhc3MgU2VjdGlvbkxpc3Q8U2VjdGlvblQ6IFNlY3Rpb25CYXNlPGFueT4+IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxcbiAgUHJvcHM8U2VjdGlvblQ+LFxuICB2b2lkLFxuPiB7XG4gIHByb3BzOiBQcm9wczxTZWN0aW9uVD47XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHM6IERlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuICAvKipcbiAgICogU2Nyb2xscyB0byB0aGUgaXRlbSBhdCB0aGUgc3BlY2lmaWVkIGBzZWN0aW9uSW5kZXhgIGFuZCBgaXRlbUluZGV4YCAod2l0aGluIHRoZSBzZWN0aW9uKVxuICAgKiBwb3NpdGlvbmVkIGluIHRoZSB2aWV3YWJsZSBhcmVhIHN1Y2ggdGhhdCBgdmlld1Bvc2l0aW9uYCAwIHBsYWNlcyBpdCBhdCB0aGUgdG9wIChhbmQgbWF5IGJlXG4gICAqIGNvdmVyZWQgYnkgYSBzdGlja3kgaGVhZGVyKSwgMSBhdCB0aGUgYm90dG9tLCBhbmQgMC41IGNlbnRlcmVkIGluIHRoZSBtaWRkbGUuIGB2aWV3T2Zmc2V0YCBpcyBhXG4gICAqIGZpeGVkIG51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBmaW5hbCB0YXJnZXQgcG9zaXRpb24sIGUuZy4gdG8gY29tcGVuc2F0ZSBmb3Igc3RpY2t5XG4gICAqIGhlYWRlcnMuXG4gICAqXG4gICAqIE5vdGU6IGNhbm5vdCBzY3JvbGwgdG8gbG9jYXRpb25zIG91dHNpZGUgdGhlIHJlbmRlciB3aW5kb3cgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZVxuICAgKiBgZ2V0SXRlbUxheW91dGAgcHJvcC5cbiAgICovXG4gIHNjcm9sbFRvTG9jYXRpb24ocGFyYW1zOiBTY3JvbGxUb0xvY2F0aW9uUGFyYW1zVHlwZSkge1xuICAgIGlmICh0aGlzLl93cmFwcGVyTGlzdFJlZiAhPSBudWxsKSB7XG4gICAgICB0aGlzLl93cmFwcGVyTGlzdFJlZi5zY3JvbGxUb0xvY2F0aW9uKHBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBsaXN0IGFuIGludGVyYWN0aW9uIGhhcyBvY2N1cnJlZCwgd2hpY2ggc2hvdWxkIHRyaWdnZXIgdmlld2FiaWxpdHkgY2FsY3VsYXRpb25zLCBlLmcuXG4gICAqIGlmIGB3YWl0Rm9ySW50ZXJhY3Rpb25zYCBpcyB0cnVlIGFuZCB0aGUgdXNlciBoYXMgbm90IHNjcm9sbGVkLiBUaGlzIGlzIHR5cGljYWxseSBjYWxsZWQgYnlcbiAgICogdGFwcyBvbiBpdGVtcyBvciBieSBuYXZpZ2F0aW9uIGFjdGlvbnMuXG4gICAqL1xuICByZWNvcmRJbnRlcmFjdGlvbigpIHtcbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fd3JhcHBlckxpc3RSZWYgJiYgdGhpcy5fd3JhcHBlckxpc3RSZWYuZ2V0TGlzdFJlZigpO1xuICAgIGxpc3RSZWYgJiYgbGlzdFJlZi5yZWNvcmRJbnRlcmFjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIHRoZSBzY3JvbGwgaW5kaWNhdG9ycyBtb21lbnRhcmlseS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgZmxhc2hTY3JvbGxJbmRpY2F0b3JzKCkge1xuICAgIGNvbnN0IGxpc3RSZWYgPSB0aGlzLl93cmFwcGVyTGlzdFJlZiAmJiB0aGlzLl93cmFwcGVyTGlzdFJlZi5nZXRMaXN0UmVmKCk7XG4gICAgbGlzdFJlZiAmJiBsaXN0UmVmLmZsYXNoU2Nyb2xsSW5kaWNhdG9ycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaGFuZGxlIHRvIHRoZSB1bmRlcmx5aW5nIHNjcm9sbCByZXNwb25kZXIuXG4gICAqL1xuICBnZXRTY3JvbGxSZXNwb25kZXIoKTogP1Njcm9sbFZpZXcge1xuICAgIGNvbnN0IGxpc3RSZWYgPSB0aGlzLl93cmFwcGVyTGlzdFJlZiAmJiB0aGlzLl93cmFwcGVyTGlzdFJlZi5nZXRMaXN0UmVmKCk7XG4gICAgaWYgKGxpc3RSZWYpIHtcbiAgICAgIHJldHVybiBsaXN0UmVmLmdldFNjcm9sbFJlc3BvbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGdldFNjcm9sbGFibGVOb2RlKCk6IGFueSB7XG4gICAgY29uc3QgbGlzdFJlZiA9IHRoaXMuX3dyYXBwZXJMaXN0UmVmICYmIHRoaXMuX3dyYXBwZXJMaXN0UmVmLmdldExpc3RSZWYoKTtcbiAgICBpZiAobGlzdFJlZikge1xuICAgICAgcmV0dXJuIGxpc3RSZWYuZ2V0U2Nyb2xsYWJsZU5vZGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXROYXRpdmVQcm9wcyhwcm9wczogT2JqZWN0KSB7XG4gICAgY29uc3QgbGlzdFJlZiA9IHRoaXMuX3dyYXBwZXJMaXN0UmVmICYmIHRoaXMuX3dyYXBwZXJMaXN0UmVmLmdldExpc3RSZWYoKTtcbiAgICBpZiAobGlzdFJlZikge1xuICAgICAgbGlzdFJlZi5zZXROYXRpdmVQcm9wcyhwcm9wcyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xuICAgIHJldHVybiAoXG4gICAgICA8VmlydHVhbGl6ZWRTZWN0aW9uTGlzdFxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgcmVmPXt0aGlzLl9jYXB0dXJlUmVmfVxuICAgICAgICBnZXRJdGVtQ291bnQ9e2l0ZW1zID0+IGl0ZW1zLmxlbmd0aH1cbiAgICAgICAgZ2V0SXRlbT17KGl0ZW1zLCBpbmRleCkgPT4gaXRlbXNbaW5kZXhdfVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgX3dyYXBwZXJMaXN0UmVmOiA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdD47XG4gIF9jYXB0dXJlUmVmID0gcmVmID0+IHtcbiAgICAvKiAkRmxvd0ZpeE1lKD49MC45OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICAgICAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC45OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzXG4gICAgICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgdGhpcy5fd3JhcHBlckxpc3RSZWYgPSByZWY7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2VjdGlvbkxpc3Q7XG4iXX0=