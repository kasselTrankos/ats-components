{"version":3,"sources":["connectStyle.js"],"names":["themeCache","clearThemeCache","throwConnectStyleError","errorMessage","componentDisplayName","Error","getTheme","context","theme","Theme","getDefaultTheme","isStyleVariant","propertyName","test","isChildStyle","getConcreteStyle","style","_","pickBy","value","key","componentStyleName","componentStyle","mapPropsToStyleNames","options","getComponentDisplayName","WrappedComponent","displayName","name","wrapWithStyledComponent","isPlainObject","isString","StyledComponent","props","styleNames","getStyleNames","finalStyle","getFinalStyle","setWrappedInstance","bind","resolveConnectedComponentStyle","state","addedProps","resolveAddedProps","resolvedStyle","parentPath","getOrSetStylesInCache","resolveStyle","concreteStyle","merge","isArray","styleNamesArr","map","remove","index","getParentPath","nextProps","nextContext","shouldRebuildStyle","setState","nativeProps","wrappedInstance","setNativeProps","component","_root","isEqual","styleName","hasStyleNameChanged","split","uniq","withRef","ref","path","join","Object","keys","length","parentStyle","themeStyle","createComponentStyle","resolveStyleNames","React","Component","contextTypes","ThemeShape","PropTypes","array","childContextTypes","propTypes","oneOfType","object","number","string","virtual","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as _ from 'lodash';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\nimport { StyleSheet } from \"react-native\";\n\nimport Theme, { ThemeShape } from \"./Theme\";\nimport { resolveComponentStyle } from \"./resolveComponentStyle\";\n\nlet themeCache = {};\n\n/**\n * clear theme cache\n * @export\n */\nexport function clearThemeCache() {\n  themeCache = {};\n}\n\n/**\n * Formats and throws an error when connecting component style with the theme.\n *\n * @param errorMessage The error message.\n * @param componentDisplayName The name of the component that is being connected.\n */\nfunction throwConnectStyleError(errorMessage, componentDisplayName) {\n  throw Error(\n    `${errorMessage} - when connecting ${componentDisplayName} component to style.`\n  );\n}\n\n/**\n * Returns the theme object from the provided context,\n * or an empty theme if the context doesn't contain a theme.\n *\n * @param context The React component context.\n * @returns {Theme} The Theme object.\n */\nfunction getTheme(context) {\n  // Fallback to a default theme if the component isn't\n  // rendered in a StyleProvider.\n  return context.theme || Theme.getDefaultTheme();\n}\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction getConcreteStyle(style) {\n  return _.pickBy(style, (value, key) => {\n    return !isStyleVariant(key) && !isChildStyle(key);\n  });\n}\n\n/**\n * Resolves the final component style by using the theme style, if available and\n * merging it with the style provided directly through the style prop, and style\n * variants applied through the styleName prop.\n *\n * @param componentStyleName The component name that will be used\n * to target this component in style rules.\n * @param componentStyle The default component style.\n * @param mapPropsToStyleNames Pure function to customize styleNames depending on props.\n * @param options The additional connectStyle options\n * @param options.virtual The default value of the virtual prop\n * @param options.withRef Create component ref with addedProps; if true, ref name is wrappedInstance\n * @returns {StyledComponent} The new component that will handle\n * the styling of the wrapped component.\n */\nexport default (\n  componentStyleName,\n  componentStyle = {},\n  mapPropsToStyleNames,\n  options = {}\n) => {\n  function getComponentDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  }\n\n  return function wrapWithStyledComponent(WrappedComponent) {\n    const componentDisplayName = getComponentDisplayName(WrappedComponent);\n\n    if (!_.isPlainObject(componentStyle)) {\n      throwConnectStyleError(\n        \"Component style must be plain object\",\n        componentDisplayName\n      );\n    }\n\n    if (!_.isString(componentStyleName)) {\n      throwConnectStyleError(\n        \"Component Style Name must be string\",\n        componentDisplayName\n      );\n    }\n\n    class StyledComponent extends React.Component {\n      static contextTypes = {\n        theme: ThemeShape,\n        // The style inherited from the parent\n        // parentStyle: PropTypes.object,\n        parentPath: PropTypes.array\n      };\n\n      static childContextTypes = {\n        // Provide the parent style to child components\n        // parentStyle: PropTypes.object,\n        // resolveStyle: PropTypes.func,\n        parentPath: PropTypes.array\n      };\n\n      static propTypes = {\n        // Element style that overrides any other style of the component\n        style: PropTypes.oneOfType([\n          PropTypes.object,\n          PropTypes.number,\n          PropTypes.array\n        ]),\n        // The style variant names to apply to this component,\n        // multiple variants may be separated with a space character\n        styleName: PropTypes.string,\n        // Virtual elements will propagate the parent\n        // style to their children, i.e., the children\n        // will behave as they are placed directly below\n        // the parent of a virtual element.\n        virtual: PropTypes.bool\n      };\n\n      static defaultProps = {\n        virtual: options.virtual\n      };\n\n      static displayName = `Styled(${componentDisplayName})`;\n      static WrappedComponent = WrappedComponent;\n\n      constructor(props, context) {\n        super(props, context);\n        // console.log(context.parentPath);\n        const styleNames = this.getStyleNames(props);\n        const style = props.style;\n\n        const finalStyle = this.getFinalStyle(\n          props,\n          context,\n          style,\n          styleNames\n        );\n\n        this.setWrappedInstance = this.setWrappedInstance.bind(this);\n        this.resolveConnectedComponentStyle = this.resolveConnectedComponentStyle.bind(\n          this\n        );\n        this.state = {\n          style: finalStyle,\n          // AddedProps are additional WrappedComponent props\n          // Usually they are set trough alternative ways,\n          // such as theme style, or trough options\n          addedProps: this.resolveAddedProps(),\n          styleNames\n        };\n      }\n\n      getFinalStyle(props, context, style, styleNames) {\n        let resolvedStyle = {};\n        if (context.parentPath) {\n          resolvedStyle = this.getOrSetStylesInCache(\n            context,\n            props,\n            styleNames,\n            [...context.parentPath, componentStyleName, ...styleNames]\n          );\n        } else {\n          resolvedStyle = this.resolveStyle(context, props, styleNames);\n          themeCache[componentStyleName] = resolvedStyle;\n        }\n\n        const concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));\n\n        if (_.isArray(style)) {\n          return [concreteStyle, ...style];\n        }\n\n        if (typeof style == \"number\" || typeof style == \"object\") {\n          return [concreteStyle, style];\n        }\n\n        return concreteStyle;\n      }\n\n      getStyleNames(props) {\n        const styleNamesArr = _.map(props, (value, key) => {\n          if (typeof value !== \"object\" && value === true) {\n            return \".\" + key;\n          } else {\n            return false;\n          }\n        });\n        _.remove(styleNamesArr, (value, index) => {\n          return value === false;\n        });\n\n        return styleNamesArr;\n      }\n\n      getParentPath() {\n        if (!this.context.parentPath) {\n          return [componentStyleName];\n        } else {\n          return [\n            ...this.context.parentPath,\n            componentStyleName,\n            ...this.getStyleNames(this.props)\n          ];\n        }\n      }\n\n      getChildContext() {\n        return {\n          // parentStyle: this.props.virtual ?\n          //   this.context.parentStyle :\n          //   this.state.childrenStyle,\n          // resolveStyle: this.resolveConnectedComponentStyle,\n          parentPath: this.getParentPath()\n        };\n      }\n\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n        const styleNames = this.getStyleNames(nextProps);\n        const style = nextProps.style;\n        if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {\n          const finalStyle = this.getFinalStyle(\n            nextProps,\n            nextContext,\n            style,\n            styleNames\n          );\n\n          this.setState({\n            style: finalStyle,\n            // childrenStyle: resolvedStyle.childrenStyle,\n            styleNames\n          });\n        }\n      }\n\n      setNativeProps(nativeProps) {\n        if (this.wrappedInstance.setNativeProps) {\n          this.wrappedInstance.setNativeProps(nativeProps);\n        }\n      }\n\n      setWrappedInstance(component) {\n        if (component && component._root) {\n          this._root = component._root;\n        } else {\n          this._root = component;\n        }\n        this.wrappedInstance = this._root;\n      }\n\n      hasStyleNameChanged(nextProps, styleNames) {\n        return (\n          mapPropsToStyleNames &&\n          this.props !== nextProps &&\n          // Even though props did change here,\n          // it doesn't necessary means changed props are those which affect styleName\n          !_.isEqual(this.state.styleNames, styleNames)\n        );\n      }\n\n      shouldRebuildStyle(nextProps, nextContext, styleNames) {\n        return (\n          nextProps.style !== this.props.style ||\n          nextProps.styleName !== this.props.styleName ||\n          nextContext.theme !== this.context.theme ||\n          !_.isEqual(nextContext.parentPath, this.context.parentPath) ||\n          this.hasStyleNameChanged(nextProps, styleNames)\n        );\n      }\n\n      resolveStyleNames(props) {\n        const { styleName } = props;\n        const styleNames = styleName ? styleName.split(/\\s/g) : [];\n\n        if (!mapPropsToStyleNames) {\n          return styleNames;\n        }\n\n        // We only want to keep the unique style names\n        return _.uniq(mapPropsToStyleNames(styleNames, props));\n      }\n\n      resolveAddedProps() {\n        const addedProps = {};\n        if (options.withRef) {\n          addedProps.ref = \"wrappedInstance\";\n        }\n        return addedProps;\n      }\n\n      getOrSetStylesInCache(context, props, styleNames, path) {\n        if (themeCache && themeCache[path.join(\">\")]) {\n          // console.log('**************');\n\n          return themeCache[path.join(\">\")];\n        } else {\n          const resolvedStyle = this.resolveStyle(context, props, styleNames);\n          if (Object.keys(themeCache).length < 10000) {\n            themeCache[path.join(\">\")] = resolvedStyle;\n          }\n          return resolvedStyle;\n        }\n      }\n\n      resolveStyle(context, props, styleNames) {\n        let parentStyle = {};\n\n        const theme = getTheme(context);\n        const themeStyle = theme.createComponentStyle(\n          componentStyleName,\n          componentStyle\n        );\n\n        if (context.parentPath) {\n          parentStyle = themeCache[context.parentPath.join(\">\")];\n        } else {\n          parentStyle = resolveComponentStyle(\n            componentStyleName,\n            styleNames,\n            themeStyle,\n            parentStyle\n          );\n        }\n\n        return resolveComponentStyle(\n          componentStyleName,\n          styleNames,\n          themeStyle,\n          parentStyle\n        );\n      }\n\n      /**\n       * A helper function provided to child components that enables\n       * them to resolve their style for any set of prop values.\n       *\n       * @param props The component props to use to resolve the style values.\n       * @returns {*} The resolved component style.\n       */\n      resolveConnectedComponentStyle(props) {\n        const styleNames = this.resolveStyleNames(props);\n        return this.resolveStyle(this.context, props, styleNames)\n          .componentStyle;\n      }\n\n      render() {\n        // console.log('themeCache', themeCache);\n\n        // if(componentStyleName == 'NativeBase.Text') {\n        //   console.log(this.state.style);\n        //   console.log(themeCache);\n        // }\n\n        const { addedProps, style } = this.state;\n        return (\n          <WrappedComponent\n            {...this.props}\n            {...addedProps}\n            style={style}\n            ref={this.setWrappedInstance}\n          />\n        );\n      }\n    }\n\n    return hoistStatics(StyledComponent, WrappedComponent);\n  };\n};\n"]}