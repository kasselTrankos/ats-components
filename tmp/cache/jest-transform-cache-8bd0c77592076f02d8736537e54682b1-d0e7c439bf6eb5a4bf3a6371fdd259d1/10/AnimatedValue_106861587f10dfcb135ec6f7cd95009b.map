{"version":3,"sources":["AnimatedValue.js"],"names":["AnimatedInterpolation","require","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","value","_value","_startingValue","_offset","_animation","_tracking","stopAnimation","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","callback","stopTracking","__getValue","config","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","__detach","tracking","flush","type","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('../../../Interaction/InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedTracking from './AnimatedTracking';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.68 was deployed. To see the error delete this\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See http://facebook.github.io/react-native/docs/animatedvalue.html\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  _onAnimatedValueUpdateReceived(value: number): void {\n    this._updateValue(value, false /*flush*/);\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    super.__callListeners(this.__getValue());\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"]}