997fdeed20ec2fedb1c964150c1e4001
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Platform = require('../../Utilities/Platform');

var React = require('react');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var View = require('../View/View');

var PlatformActivityIndicator = Platform.OS === 'android' ? require('../ProgressBarAndroid/ProgressBarAndroid') : require('./ActivityIndicatorViewNativeComponent')["default"];
var GRAY = '#999999';

var ActivityIndicator = function ActivityIndicator(props, forwardedRef) {
  var onLayout = props.onLayout,
      style = props.style,
      size = props.size,
      restProps = (0, _objectWithoutProperties2["default"])(props, ["onLayout", "style", "size"]);
  var sizeStyle;
  var sizeProp;

  switch (size) {
    case 'small':
      sizeStyle = styles.sizeSmall;
      sizeProp = 'small';
      break;

    case 'large':
      sizeStyle = styles.sizeLarge;
      sizeProp = 'large';
      break;

    default:
      sizeStyle = {
        height: props.size,
        width: props.size
      };
      break;
  }

  var nativeProps = _objectSpread({}, restProps, {
    ref: forwardedRef,
    style: sizeStyle,
    size: sizeProp
  });

  var androidProps = {
    styleAttr: 'Normal',
    indeterminate: true
  };
  return React.createElement(View, {
    onLayout: onLayout,
    style: StyleSheet.compose(styles.container, style)
  }, Platform.OS === 'android' ? React.createElement(PlatformActivityIndicator, (0, _extends2["default"])({}, nativeProps, androidProps)) : React.createElement(PlatformActivityIndicator, nativeProps));
};

var ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
ActivityIndicatorWithRef.defaultProps = {
  animating: true,
  color: Platform.OS === 'ios' ? GRAY : null,
  hidesWhenStopped: true,
  size: 'small'
};
var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});
module.exports = ActivityIndicatorWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,