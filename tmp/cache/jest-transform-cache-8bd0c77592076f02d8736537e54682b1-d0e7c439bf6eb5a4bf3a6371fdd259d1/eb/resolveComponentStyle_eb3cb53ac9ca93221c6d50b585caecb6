1d3e881d696d895701853475435e1564
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveComponentStyle = resolveComponentStyle;

var _lodash = _interopRequireDefault(require("lodash"));

var _customMerge = _interopRequireDefault(require("./customMerge"));

function isStyleVariant(propertyName) {
  return /^\./.test(propertyName);
}

function isChildStyle(propertyName) {
  return /(^[^\.].*\.)|^\*$/.test(propertyName);
}

function splitStyle(style) {
  return _lodash["default"].reduce(style, function (result, value, key) {
    var styleSection = result.componentStyle;

    if (isStyleVariant(key)) {
      styleSection = result.styleVariants;
    } else if (isChildStyle(key)) {
      styleSection = result.childrenStyle;
    }

    styleSection[key] = value;
    return result;
  }, {
    componentStyle: {},
    styleVariants: {},
    childrenStyle: {}
  });
}

function resolveComponentStyle(componentName) {
  var styleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var themeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var parentStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var themeCache = arguments.length > 4 ? arguments[4] : undefined;
  var mergedStyle = (0, _customMerge["default"])(themeStyle, parentStyle[componentName]);
  styleNames.forEach(function (sn, index) {
    mergedStyle = (0, _customMerge["default"])(mergedStyle, themeStyle["" + sn]);
  });
  styleNames.forEach(function (sn, index) {
    mergedStyle = (0, _customMerge["default"])(mergedStyle, parentStyle["" + componentName + sn]);
  });
  var resolvedStyle = (0, _customMerge["default"])(mergedStyle, parentStyle[componentName]);
  styleNames.forEach(function (sn, index) {
    resolvedStyle = (0, _customMerge["default"])(resolvedStyle, mergedStyle["" + sn]);
  });
  styleNames.forEach(function (sn, index) {
    resolvedStyle = (0, _customMerge["default"])(resolvedStyle, parentStyle["" + componentName + sn]);
  });
  return resolvedStyle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,