0575a4289f358ea699753a63fc8cd3c5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVariations = createVariations;
exports.createSharedStyle = createSharedStyle;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = _interopRequireDefault(require("lodash"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function capitalizeFirstLetter(value) {
  return value.charAt(0).toUpperCase() + value.slice(1);
}

function createVariations(baseName, nameSuffixes, key, value) {
  return _lodash["default"].reduce(nameSuffixes, function (result, variant) {
    var variantName = variant ? baseName + "-" + variant : baseName;
    var keyName = variant ? "" + key + capitalizeFirstLetter(variant) : key;
    result[variantName] = (0, _defineProperty2["default"])({}, keyName, value);
    return result;
  }, {});
}

function createSharedStyle(componentNames) {
  var sharedStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var customStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return _lodash["default"].reduce(componentNames, function (result, componentName) {
    result[componentName] = _objectSpread({}, sharedStyle, {}, customStyles[componentName]);
    return result;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZG9ucy5qcyJdLCJuYW1lcyI6WyJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJ2YWx1ZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJjcmVhdGVWYXJpYXRpb25zIiwiYmFzZU5hbWUiLCJuYW1lU3VmZml4ZXMiLCJrZXkiLCJfIiwicmVkdWNlIiwicmVzdWx0IiwidmFyaWFudCIsInZhcmlhbnROYW1lIiwia2V5TmFtZSIsImNyZWF0ZVNoYXJlZFN0eWxlIiwiY29tcG9uZW50TmFtZXMiLCJzaGFyZWRTdHlsZSIsImN1c3RvbVN0eWxlcyIsImNvbXBvbmVudE5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0FBRUEsU0FBU0EscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDO0FBQ3BDLFNBQU9BLEtBQUssQ0FBQ0MsTUFBTixDQUFhLENBQWIsRUFBZ0JDLFdBQWhCLEtBQWdDRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxDQUFaLENBQXZDO0FBQ0Q7O0FBaUNNLFNBQVNDLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsWUFBcEMsRUFBa0RDLEdBQWxELEVBQXVEUCxLQUF2RCxFQUE4RDtBQUNuRSxTQUFPUSxtQkFBRUMsTUFBRixDQUFTSCxZQUFULEVBQXVCLFVBQUNJLE1BQUQsRUFBU0MsT0FBVCxFQUFxQjtBQUNqRCxRQUFNQyxXQUFXLEdBQUdELE9BQU8sR0FBTU4sUUFBTixTQUFrQk0sT0FBbEIsR0FBOEJOLFFBQXpEO0FBQ0EsUUFBTVEsT0FBTyxHQUFHRixPQUFPLFFBQU1KLEdBQU4sR0FBWVIscUJBQXFCLENBQUNZLE9BQUQsQ0FBakMsR0FBK0NKLEdBQXRFO0FBR0FHLElBQUFBLE1BQU0sQ0FBQ0UsV0FBRCxDQUFOLHdDQUNHQyxPQURILEVBQ2FiLEtBRGI7QUFJQSxXQUFPVSxNQUFQO0FBQ0QsR0FWTSxFQVVKLEVBVkksQ0FBUDtBQVdEOztBQWlDTSxTQUFTSSxpQkFBVCxDQUEyQkMsY0FBM0IsRUFBZ0Y7QUFBQSxNQUFyQ0MsV0FBcUMsdUVBQXZCLEVBQXVCO0FBQUEsTUFBbkJDLFlBQW1CLHVFQUFKLEVBQUk7QUFDckYsU0FBT1QsbUJBQUVDLE1BQUYsQ0FBU00sY0FBVCxFQUF5QixVQUFDTCxNQUFELEVBQVNRLGFBQVQsRUFBMkI7QUFFekRSLElBQUFBLE1BQU0sQ0FBQ1EsYUFBRCxDQUFOLHFCQUNLRixXQURMLE1BRUtDLFlBQVksQ0FBQ0MsYUFBRCxDQUZqQjtBQUtBLFdBQU9SLE1BQVA7QUFDRCxHQVJNLEVBUUosRUFSSSxDQUFQO0FBU0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNldCBvZiBzdHlsZSB2YXJpYXRpb25zIHdpdGggdGhlIHByb3ZpZGVkIG5hbWVcbiAqIHN1ZmZpeGVzLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHN0eWxlIHZhcmlhdGlvbnNcbiAqIGZvciBzdHlsZXMgd2l0aCBzaG9ydGhhbmRzLCBlLmcuLCBtYXJnaW4sIHBhZGRpbmcsIGV0Yy4gVGhpcyBmdW5jdGlvblxuICogd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIGtleXMgdGhhdCByZXByZXNlbnQgdGhlIHN0eWxlIHZhcmlhdGlvbnMsXG4gKiBhbmQgZWFjaCBrZXkgd2lsbCBoYXZlIGFuIG9iamVjdCB3aXRoIHRoZSBwcm92aWRlZCBrZXkgYW5kIHZhbHVlLiBCb3RoXG4gKiBzdHlsZSB2YXJpYXRpb24sIGFuZCB2YWx1ZSBvYmplY3Qga2V5cyB3aWxsIGdldCB0aGUgcHJvdmlkZWQgc3VmZml4ZXMuIFRoZVxuICogc3R5bGUgdmFyaWF0aW9uIGtleSBuYW1lcyBhcmUgZXhwZWN0ZWQgdG8gYmUgaW4gc25ha2UtY2FzZSwgYW5kIHZhbHVlIGtleXNcbiAqIGFyZSBleHBlY3RlZCB0byBiZSBpbiBjYW1lbENhc2UuXG4gKlxuICogRXhhbXBsZTpcbiAqIGNyZWF0ZVZhcmlhdGlvbnMoJ2xhcmdlLW1hcmdpbicsIFsnJywgJ2xlZnQnLCAncmlnaHQnXSwgJ21hcmdpbicsIDMwKVxuICogd2lsbCByZXR1cm46XG4gKiB7XG4gKiAgICdsYXJnZS1tYXJnaW4nOiB7XG4gKiAgICAgbWFyZ2luOiAzMFxuICogICB9LFxuICogICAnbGFyZ2UtbWFyZ2luLWxlZnQnOiB7XG4gKiAgICAgbWFyZ2luTGVmdDogMzAsXG4gKiAgIH0sXG4gKiAgICdsYXJnZS1tYXJnaW4tcmlnaHQnOiB7XG4gKiAgICAgbWFyZ2luUmlnaHQ6IDMwLFxuICogICB9XG4gKiB9XG4gKlxuICogQHBhcmFtIGJhc2VOYW1lIEJhc2UgbmFtZSBmb3Igc3R5bGUgdmFyaWF0aW9uIMKnbmFtZXMuXG4gKiBAcGFyYW0gbmFtZVN1ZmZpeGVzIFN1ZmZpeGVzIHRoYXQgd2lsbCBiZSBjb25jYXRlbmF0ZWQgdG8gYmFzZU5hbWUuXG4gKiBAcGFyYW0ga2V5IFRoZSB2YWx1ZSBrZXkgbmFtZSB0byB1c2UuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUga2V5IHByb3BlcnR5LlxuICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBzdHlsZSB2YXJpYW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZhcmlhdGlvbnMoYmFzZU5hbWUsIG5hbWVTdWZmaXhlcywga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gXy5yZWR1Y2UobmFtZVN1ZmZpeGVzLCAocmVzdWx0LCB2YXJpYW50KSA9PiB7XG4gICAgY29uc3QgdmFyaWFudE5hbWUgPSB2YXJpYW50ID8gYCR7YmFzZU5hbWV9LSR7dmFyaWFudH1gIDogYmFzZU5hbWU7XG4gICAgY29uc3Qga2V5TmFtZSA9IHZhcmlhbnQgPyBgJHtrZXl9JHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIodmFyaWFudCl9YCA6IGtleTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHJlc3VsdFt2YXJpYW50TmFtZV0gPSB7XG4gICAgICBba2V5TmFtZV06IHZhbHVlLFxuICAgIH07XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNldCBvZiBzdHlsZSBydWxlcyBmb3IgdGhlIHByb3ZpZGVkIGNvbXBvbmVudHMuIFRoaXMgZnVuY3Rpb25cbiAqIGlzIHVzZWZ1bCB3aGVuIGEgc2V0IG9mIGNvbXBvbmVudHMgbmVlZHMgdG8gaGF2ZSB0aGUgc2FtZSBzdHlsZS4gVGhlXG4gKiBzaGFyZWQgc3R5bGUgd2lsbCBiZSBhcHBsaWVkIHRvIGVhY2ggY29tcG9uZW50LiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvXG4gKiBwcm92aWRlIGN1c3RvbSBzdHlsZSBmb3IgZWFjaCBjb21wb25lbnQgdGhhdCB3aWxsIGJlIGFwcGxpZWQgb24gdG9wIG9mXG4gKiB0aGUgc2hhcmVkIHN0eWxlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBjcmVhdGVTaGFyZWRTdHlsZShbJ3Nob3V0ZW0udWkuVGV4dCcsICdzaG91dGVtLnVpLlRpdGxlJ10sIHtcbiAqICAgY29sb3I6ICd3aGl0ZSdcbiAqIH0sIHtcbiAqICAgJ3Nob3V0ZW0udWkuVGl0bGU6IHtcbiAqICAgICBtYXJnaW5Cb3R0b206IDE1XG4gKiAgIH1cbiAqICk7XG4gKiB3aWxsIHJldHVybjpcbiAqIHtcbiAqICAgJ3Nob3V0ZW0udWkuVGV4dCc6IHtcbiAqICAgICBjb2xvcjogJ3doaXRlJ1xuICogICB9LFxuICogICAnc2hvdXRlbS51aS5UaXRsZSc6IHtcbiAqICAgICBjb2xvcjogJ3doaXRlJyxcbiAqICAgICBtYXJnaW5Cb3R0b206IDE1XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50TmFtZXMgVGhlIG5hbWVzIG9mIHRoZSBjb21wb25lbnRzIHRvIGdlbmVyYXRlIHN0eWxlcyBmb3IuXG4gKiBAcGFyYW0gc2hhcmVkU3R5bGUgVGhlIHN0eWxlIHRvIGFwcGx5IHRvIGVhY2ggY29tcG9uZW50LlxuICogQHBhcmFtIGN1c3RvbVN0eWxlcyBTdHlsZSBvdmVycmlkZXMgYnkgY29tcG9uZW50IG5hbWVzLlxuICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBzdHlsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaGFyZWRTdHlsZShjb21wb25lbnROYW1lcywgc2hhcmVkU3R5bGUgPSB7fSwgY3VzdG9tU3R5bGVzID0ge30pIHtcbiAgcmV0dXJuIF8ucmVkdWNlKGNvbXBvbmVudE5hbWVzLCAocmVzdWx0LCBjb21wb25lbnROYW1lKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgcmVzdWx0W2NvbXBvbmVudE5hbWVdID0ge1xuICAgICAgLi4uc2hhcmVkU3R5bGUsXG4gICAgICAuLi5jdXN0b21TdHlsZXNbY29tcG9uZW50TmFtZV0sXG4gICAgfTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn1cbiJdfQ==