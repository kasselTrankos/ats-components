a6331a63230389f8daf76ae525bba203
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var AssetRegistry = require('./AssetRegistry');

var AssetSourceResolver = require('./AssetSourceResolver');

var _customSourceTransformer, _serverURL, _scriptURL;

var _sourceCodeScriptURL;

function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    sourceCode = require('../NativeModules/specs/NativeSourceCode')["default"];
  }

  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
  return _sourceCodeScriptURL;
}

function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }

  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }

    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }

  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }

  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if ((0, _typeof2["default"])(source) === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);

  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }

  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0U291cmNlQ29kZVNjcmlwdFVSTCIsInNvdXJjZUNvZGUiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiU291cmNlQ29kZSIsImdldENvbnN0YW50cyIsInNjcmlwdFVSTCIsImdldERldlNlcnZlclVSTCIsInVuZGVmaW5lZCIsInNvdXJjZUNvZGVTY3JpcHRVUkwiLCJtYXRjaCIsIl9jb2VyY2VMb2NhbFNjcmlwdFVSTCIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImluY2x1ZGVzIiwiZ2V0U2NyaXB0VVJMIiwic2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lciIsInJlc29sdmVBc3NldFNvdXJjZSIsInNvdXJjZSIsImFzc2V0IiwiZ2V0QXNzZXRCeUlEIiwicmVzb2x2ZXIiLCJkZWZhdWx0QXNzZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicGlja1NjYWxlIl0sIm1hcHBpbmdzIjoiQUFhQTs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUMsaUJBQUQsQ0FBN0I7O0FBQ0EsSUFBTUMsbUJBQW1CLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUFuQzs7QUFJQSxJQUFJRSx3QkFBSixFQUE4QkMsVUFBOUIsRUFBMENDLFVBQTFDOztBQUVBLElBQUlDLG9CQUFKOztBQUNBLFNBQVNDLHNCQUFULEdBQTJDO0FBQ3pDLE1BQUlELG9CQUFKLEVBQTBCO0FBQ3hCLFdBQU9BLG9CQUFQO0FBQ0Q7O0FBRUQsTUFBSUUsVUFBVSxHQUNaQyxNQUFNLENBQUNDLGdCQUFQLElBQTJCRCxNQUFNLENBQUNDLGdCQUFQLENBQXdCQyxVQURyRDs7QUFFQSxNQUFJLENBQUNILFVBQUwsRUFBaUI7QUFDZkEsSUFBQUEsVUFBVSxHQUFHUCxPQUFPLENBQUMseUNBQUQsQ0FBUCxXQUFiO0FBQ0Q7O0FBQ0RLLEVBQUFBLG9CQUFvQixHQUFHRSxVQUFVLENBQUNJLFlBQVgsR0FBMEJDLFNBQWpEO0FBQ0EsU0FBT1Asb0JBQVA7QUFDRDs7QUFFRCxTQUFTUSxlQUFULEdBQW9DO0FBQ2xDLE1BQUlWLFVBQVUsS0FBS1csU0FBbkIsRUFBOEI7QUFDNUIsUUFBTUMsbUJBQW1CLEdBQUdULHNCQUFzQixFQUFsRDtBQUNBLFFBQU1VLEtBQUssR0FDVEQsbUJBQW1CLElBQUlBLG1CQUFtQixDQUFDQyxLQUFwQixDQUEwQixtQkFBMUIsQ0FEekI7O0FBRUEsUUFBSUEsS0FBSixFQUFXO0FBRVRiLE1BQUFBLFVBQVUsR0FBR2EsS0FBSyxDQUFDLENBQUQsQ0FBbEI7QUFDRCxLQUhELE1BR087QUFFTGIsTUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDRDtBQUNGOztBQUNELFNBQU9BLFVBQVA7QUFDRDs7QUFFRCxTQUFTYyxxQkFBVCxDQUErQkwsU0FBL0IsRUFBNEQ7QUFDMUQsTUFBSUEsU0FBSixFQUFlO0FBQ2IsUUFBSUEsU0FBUyxDQUFDTSxVQUFWLENBQXFCLFdBQXJCLENBQUosRUFBdUM7QUFFckMsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0ROLElBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDTyxTQUFWLENBQW9CLENBQXBCLEVBQXVCUCxTQUFTLENBQUNRLFdBQVYsQ0FBc0IsR0FBdEIsSUFBNkIsQ0FBcEQsQ0FBWjs7QUFDQSxRQUFJLENBQUNSLFNBQVMsQ0FBQ1MsUUFBVixDQUFtQixLQUFuQixDQUFMLEVBQWdDO0FBRzlCVCxNQUFBQSxTQUFTLEdBQUcsWUFBWUEsU0FBeEI7QUFDRDtBQUNGOztBQUNELFNBQU9BLFNBQVA7QUFDRDs7QUFFRCxTQUFTVSxZQUFULEdBQWlDO0FBQy9CLE1BQUlsQixVQUFVLEtBQUtVLFNBQW5CLEVBQThCO0FBQzVCVixJQUFBQSxVQUFVLEdBQUdhLHFCQUFxQixDQUFDWCxzQkFBc0IsRUFBdkIsQ0FBbEM7QUFDRDs7QUFDRCxTQUFPRixVQUFQO0FBQ0Q7O0FBRUQsU0FBU21CLDBCQUFULENBQ0VDLFdBREYsRUFFUTtBQUNOdEIsRUFBQUEsd0JBQXdCLEdBQUdzQixXQUEzQjtBQUNEOztBQU1ELFNBQVNDLGtCQUFULENBQTRCQyxNQUE1QixFQUErRDtBQUM3RCxNQUFJLHlCQUFPQSxNQUFQLE1BQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFdBQU9BLE1BQVA7QUFDRDs7QUFFRCxNQUFNQyxLQUFLLEdBQUc1QixhQUFhLENBQUM2QixZQUFkLENBQTJCRixNQUEzQixDQUFkOztBQUNBLE1BQUksQ0FBQ0MsS0FBTCxFQUFZO0FBQ1YsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTUUsUUFBUSxHQUFHLElBQUk1QixtQkFBSixDQUNmWSxlQUFlLEVBREEsRUFFZlMsWUFBWSxFQUZHLEVBR2ZLLEtBSGUsQ0FBakI7O0FBS0EsTUFBSXpCLHdCQUFKLEVBQThCO0FBQzVCLFdBQU9BLHdCQUF3QixDQUFDMkIsUUFBRCxDQUEvQjtBQUNEOztBQUNELFNBQU9BLFFBQVEsQ0FBQ0MsWUFBVCxFQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlAsa0JBQWpCO0FBQ0FNLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxTQUFmLEdBQTJCaEMsbUJBQW1CLENBQUNnQyxTQUEvQztBQUNBRixNQUFNLENBQUNDLE9BQVAsQ0FBZVQsMEJBQWYsR0FBNENBLDBCQUE1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFJlc29sdmVzIGFuIGFzc2V0IGludG8gYSBgc291cmNlYCBmb3IgYEltYWdlYC5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXRSZWdpc3RyeSA9IHJlcXVpcmUoJy4vQXNzZXRSZWdpc3RyeScpO1xuY29uc3QgQXNzZXRTb3VyY2VSZXNvbHZlciA9IHJlcXVpcmUoJy4vQXNzZXRTb3VyY2VSZXNvbHZlcicpO1xuXG5pbXBvcnQgdHlwZSB7UmVzb2x2ZWRBc3NldFNvdXJjZX0gZnJvbSAnLi9Bc3NldFNvdXJjZVJlc29sdmVyJztcblxubGV0IF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciwgX3NlcnZlclVSTCwgX3NjcmlwdFVSTDtcblxubGV0IF9zb3VyY2VDb2RlU2NyaXB0VVJMOiA/c3RyaW5nO1xuZnVuY3Rpb24gZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zb3VyY2VDb2RlU2NyaXB0VVJMKSB7XG4gICAgcmV0dXJuIF9zb3VyY2VDb2RlU2NyaXB0VVJMO1xuICB9XG5cbiAgbGV0IHNvdXJjZUNvZGUgPVxuICAgIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zICYmIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zLlNvdXJjZUNvZGU7XG4gIGlmICghc291cmNlQ29kZSkge1xuICAgIHNvdXJjZUNvZGUgPSByZXF1aXJlKCcuLi9OYXRpdmVNb2R1bGVzL3NwZWNzL05hdGl2ZVNvdXJjZUNvZGUnKS5kZWZhdWx0O1xuICB9XG4gIF9zb3VyY2VDb2RlU2NyaXB0VVJMID0gc291cmNlQ29kZS5nZXRDb25zdGFudHMoKS5zY3JpcHRVUkw7XG4gIHJldHVybiBfc291cmNlQ29kZVNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2U2VydmVyVVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NlcnZlclVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3Qgc291cmNlQ29kZVNjcmlwdFVSTCA9IGdldFNvdXJjZUNvZGVTY3JpcHRVUkwoKTtcbiAgICBjb25zdCBtYXRjaCA9XG4gICAgICBzb3VyY2VDb2RlU2NyaXB0VVJMICYmIHNvdXJjZUNvZGVTY3JpcHRVUkwubWF0Y2goL15odHRwcz86XFwvXFwvLio/XFwvLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gbmV0d29ya1xuICAgICAgX3NlcnZlclVSTCA9IG1hdGNoWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gZmlsZVxuICAgICAgX3NlcnZlclVSTCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBfc2VydmVyVVJMO1xufVxuXG5mdW5jdGlvbiBfY29lcmNlTG9jYWxTY3JpcHRVUkwoc2NyaXB0VVJMOiA/c3RyaW5nKTogP3N0cmluZyB7XG4gIGlmIChzY3JpcHRVUkwpIHtcbiAgICBpZiAoc2NyaXB0VVJMLnN0YXJ0c1dpdGgoJ2Fzc2V0czovLycpKSB7XG4gICAgICAvLyBhbmRyb2lkOiBydW5uaW5nIGZyb20gd2l0aGluIGFzc2V0cywgbm8gb2ZmbGluZSBwYXRoIHRvIHVzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHNjcmlwdFVSTCA9IHNjcmlwdFVSTC5zdWJzdHJpbmcoMCwgc2NyaXB0VVJMLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICBpZiAoIXNjcmlwdFVSTC5pbmNsdWRlcygnOi8vJykpIHtcbiAgICAgIC8vIEFkZCBmaWxlIHByb3RvY29sIGluIGNhc2Ugd2UgaGF2ZSBhbiBhYnNvbHV0ZSBmaWxlIHBhdGggYW5kIG5vdCBhIFVSTC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IHJlYWxseSBiZSBuZWNlc3NhcnkuIHNjcmlwdFVSTCBzaG91bGQgYmUgYSBVUkwuXG4gICAgICBzY3JpcHRVUkwgPSAnZmlsZTovLycgKyBzY3JpcHRVUkw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIGdldFNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zY3JpcHRVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIF9zY3JpcHRVUkwgPSBfY29lcmNlTG9jYWxTY3JpcHRVUkwoZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpKTtcbiAgfVxuICByZXR1cm4gX3NjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIoXG4gIHRyYW5zZm9ybWVyOiAocmVzb2x2ZXI6IEFzc2V0U291cmNlUmVzb2x2ZXIpID0+IFJlc29sdmVkQXNzZXRTb3VyY2UsXG4pOiB2b2lkIHtcbiAgX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG59XG5cbi8qKlxuICogYHNvdXJjZWAgaXMgZWl0aGVyIGEgbnVtYmVyIChvcGFxdWUgdHlwZSByZXR1cm5lZCBieSByZXF1aXJlKCcuL2Zvby5wbmcnKSlcbiAqIG9yIGFuIGBJbWFnZVNvdXJjZWAgbGlrZSB7IHVyaTogJzxodHRwIGxvY2F0aW9uIHx8IGZpbGUgcGF0aD4nIH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0U291cmNlKHNvdXJjZTogYW55KTogP1Jlc29sdmVkQXNzZXRTb3VyY2Uge1xuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgY29uc3QgYXNzZXQgPSBBc3NldFJlZ2lzdHJ5LmdldEFzc2V0QnlJRChzb3VyY2UpO1xuICBpZiAoIWFzc2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCByZXNvbHZlciA9IG5ldyBBc3NldFNvdXJjZVJlc29sdmVyKFxuICAgIGdldERldlNlcnZlclVSTCgpLFxuICAgIGdldFNjcmlwdFVSTCgpLFxuICAgIGFzc2V0LFxuICApO1xuICBpZiAoX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKSB7XG4gICAgcmV0dXJuIF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcihyZXNvbHZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVyLmRlZmF1bHRBc3NldCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVBc3NldFNvdXJjZTtcbm1vZHVsZS5leHBvcnRzLnBpY2tTY2FsZSA9IEFzc2V0U291cmNlUmVzb2x2ZXIucGlja1NjYWxlO1xubW9kdWxlLmV4cG9ydHMuc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIgPSBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcjtcbiJdfQ==